
/home/tk-student/tse_tutorial/app_sotware2/tse_tutorial.elf:     file format elf32-littlenios2
/home/tk-student/tse_tutorial/app_sotware2/tse_tutorial.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0008015c

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00004fec memsz 0x00004fec flags r-x
    LOAD off    0x0000600c vaddr 0x0008500c paddr 0x00087340 align 2**12
         filesz 0x00002334 memsz 0x00002334 flags rw-
    LOAD off    0x00008674 vaddr 0x00089674 paddr 0x00089674 align 2**12
         filesz 0x00000000 memsz 0x00000c24 flags rw-
    LOAD off    0x00009000 vaddr 0x00100000 paddr 0x0008a298 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-
    LOAD off    0x0000a000 vaddr 0x00101000 paddr 0x0008a318 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000013c  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004bfc  0008015c  0008015c  0000115c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002b4  00084d58  00084d58  00005d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002334  0008500c  00087340  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000c24  00089674  00089674  00008674  2**2
                  ALLOC, SMALL_DATA
  6 .main_memory  00000000  0008a298  0008a298  0000a080  2**0
                  CONTENTS
  7 .descriptor_memory1 00000080  00100000  0008a298  00009000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .descriptor_memory0 00000080  00101000  0008a318  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .comment      00000023  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000970  00000000  00000000  0000a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001704e  00000000  00000000  0000aa18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000061f9  00000000  00000000  00021a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000064ba  00000000  00000000  00027c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001310  00000000  00000000  0002e11c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000024a4  00000000  00000000  0002f42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00005b4f  00000000  00000000  000318d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000020  00000000  00000000  00037420  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000550  00000000  00000000  00037440  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0003a2b4  2**0
                  CONTENTS, READONLY
 20 .cpu          00000005  00000000  00000000  0003a2b7  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003a2bc  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003a2bd  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0003a2be  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0003a2c7  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0003a2d0  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  0003a2d9  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009307e  00000000  00000000  0003a2e4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
0008015c l    d  .text	00000000 .text
00084d58 l    d  .rodata	00000000 .rodata
0008500c l    d  .rwdata	00000000 .rwdata
00089674 l    d  .bss	00000000 .bss
0008a298 l    d  .main_memory	00000000 .main_memory
00100000 l    d  .descriptor_memory1	00000000 .descriptor_memory1
00101000 l    d  .descriptor_memory0	00000000 .descriptor_memory0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 BSP//obj/HAL/src/crt0.o
00080194 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tse_tutorial.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000858cc l     O .rwdata	00001060 jtag_uart
0008589c l     O .rwdata	00000030 sgdma_rx0
0008586c l     O .rwdata	00000030 sgdma_rx1
0008583c l     O .rwdata	00000030 sgdma_tx0
0008580c l     O .rwdata	00000030 sgdma_tx1
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000811cc l     F .text	00000048 altera_avalon_jtag_uart_timeout
00081214 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
0008174c l     F .text	00000060 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00081e84 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000820b0 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00086ad4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000830b8 l     F .text	00000008 __fp_unlock
000830cc l     F .text	0000019c __sinit.part.1
00083268 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0008733c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000848a8 g     F .text	00000054 _isatty_r
00080e0c g     F .text	00000050 alt_main
00101000 g       *ABS*	00000000 __alt_mem_descriptor_memory0
0008a198 g     O .bss	00000100 alt_irq
000896b4 g     O .bss	00000400 rx_frame1
000848fc g     F .text	00000060 _lseek_r
00087340 g       *ABS*	00000000 __flash_rwdata_start
00080280 g     F .text	000003c4 rx_ethernet_isr0
0008a298 g       *ABS*	00000000 __alt_heap_start
00081838 g     F .text	0000008c alt_avalon_sgdma_do_sync_transfer
00084630 g     F .text	0000005c __sseek
00083408 g     F .text	00000010 __sinit
000829e4 g     F .text	00000140 __swbuf_r
00083270 g     F .text	00000068 __sfmoreglue
00084b5c g     F .text	00000004 __malloc_unlock
000819d0 g     F .text	00000128 alt_avalon_sgdma_construct_descriptor_burst
00100000 g     O .descriptor_memory1	00000020 rx_descriptor1_end
000833f0 g     F .text	00000018 _cleanup
00080000 g     F .entry	0000001c __reset
00081b78 g     F .text	00000048 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008484c g     F .text	0000005c _fstat_r
000896a4 g     O .bss	00000004 errno
00089678 g     O .bss	00000004 sgdma_rx_dev0
000845ac g     F .text	00000008 __seofread
00101060 g     O .descriptor_memory0	00000020 tx_descriptor0
00089690 g     O .bss	00000004 alt_argv
0008f300 g       *ABS*	00000000 _gp
0008540c g     O .rwdata	00000400 tx_frame0
0008692c g     O .rwdata	00000180 alt_fd_list
00101020 g     O .descriptor_memory0	00000020 rx_descriptor0
00081f00 g     F .text	0000007c alt_find_dev
0008269c g     F .text	00000148 memcpy
000830c0 g     F .text	0000000c _cleanup_r
00082114 g     F .text	00000094 alt_io_redirect
00081be8 g     F .text	00000050 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
00081458 g     F .text	00000158 altera_avalon_jtag_uart_read
00084a44 g     F .text	00000084 isatty
0008500c g     O .rwdata	00000400 tx_frame1
00082590 g     F .text	00000058 alt_icache_flush
000896b0 g     O .bss	00000004 __malloc_top_pad
000818ec g     F .text	0000001c alt_avalon_sgdma_stop
00084504 g     F .text	00000054 _sbrk_r
0008495c g     F .text	00000060 _read_r
00080200 g     F .text	00000080 SearchInTable
00081e7c g     F .text	00000004 alt_dcache_flush
00087308 g     O .rwdata	00000004 alt_max_fd
00084748 g     F .text	000000f0 _fclose_r
00083088 g     F .text	00000030 fflush
000896ac g     O .bss	00000004 __malloc_max_sbrked_mem
00080000 g       *ABS*	00000000 __alt_mem_main_memory
00084ac8 g     F .text	00000090 lseek
0008732c g     O .rwdata	00000004 _global_impure_ptr
0008a298 g       *ABS*	00000000 __bss_end
00082044 g     F .text	0000006c alt_iic_isr_register
000817ac g     F .text	0000008c alt_avalon_sgdma_do_async_transfer
00082394 g     F .text	000000cc alt_tick
00083428 g     F .text	00000018 __fp_lock_all
0008202c g     F .text	00000018 alt_ic_irq_enabled
00089eb4 g     O .bss	000002bc tabela
0008235c g     F .text	00000038 alt_alarm_stop
00100040 g     O .descriptor_memory1	00000020 tx_descriptor1_end
00089698 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	00000070 alt_irq_handler
00080644 g     F .text	000003c4 rx_ethernet_isr1
00086aac g     O .rwdata	00000028 alt_dev_null
00081908 g     F .text	0000002c alt_avalon_sgdma_check_descriptor_status
00081e80 g     F .text	00000004 alt_dcache_flush_all
00087340 g       *ABS*	00000000 __ram_rwdata_end
0008730c g     O .rwdata	00000008 alt_dev_list
00084c84 g     F .text	000000d4 write
00081980 g     F .text	00000030 alt_avalon_sgdma_enable_desc_poll
000827e4 g     F .text	000000a0 _putc_r
0008500c g       *ABS*	00000000 __ram_rodata_end
000849d0 g     F .text	00000074 fstat
00100000 g       *ABS*	00000000 __alt_mem_descriptor_memory1
00081c38 g     F .text	00000040 alt_avalon_sgdma_construct_mem_to_stream_desc
000818c4 g     F .text	00000010 alt_avalon_sgdma_register_callback
0008a298 g       *ABS*	00000000 end
0008967c g     O .bss	00000004 sgdma_tx_dev0
0008131c g     F .text	00000078 altera_avalon_jtag_uart_init
000cb000 g       *ABS*	00000000 __alt_stack_pointer
000819b0 g     F .text	00000020 alt_avalon_sgdma_disable_desc_poll
000815b0 g     F .text	0000019c altera_avalon_jtag_uart_write
00081b40 g     F .text	00000038 alt_avalon_sgdma_construct_mem_to_mem_desc
00083418 g     F .text	00000004 __sfp_lock_acquire
00081bc0 g     F .text	00000028 alt_avalon_sgdma_construct_stream_to_mem_desc
0008357c g     F .text	00000310 _free_r
00080e5c g     F .text	00000214 alt_printf
00100060 g     O .descriptor_memory1	00000020 tx_descriptor1
00082c90 g     F .text	00000180 __call_exitprocs
00087334 g     O .rwdata	00000004 __malloc_sbrk_base
0008015c g     F .text	0000003c _start
000896a0 g     O .bss	00000004 _alt_tick_rate
00081934 g     F .text	0000004c alt_avalon_sgdma_open
0008969c g     O .bss	00000004 _alt_nticks
00089680 g     O .bss	00000004 text_length
00084b60 g     F .text	000000d8 read
000810b0 g     F .text	00000090 alt_sys_init
00081394 g     F .text	0000003c altera_avalon_jtag_uart_close
0008500c g       *ABS*	00000000 __ram_rwdata_start
00084d58 g       *ABS*	00000000 __ram_rodata_start
0008a170 g     O .bss	00000028 __malloc_current_mallinfo
00081140 g     F .text	00000024 altera_avalon_jtag_uart_read_fd
00082528 g     F .text	00000068 alt_get_fd
000846f4 g     F .text	00000054 _close_r
00082620 g     F .text	0000007c memcmp
00081188 g     F .text	00000024 altera_avalon_jtag_uart_close_fd
0008a298 g       *ABS*	00000000 __alt_stack_base
000811ac g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
00082b3c g     F .text	00000154 __swsetup_r
000832d8 g     F .text	00000118 __sfp
00086ef8 g     O .rwdata	00000408 __malloc_av_
00101040 g     O .descriptor_memory0	00000020 tx_descriptor0_end
00083424 g     F .text	00000004 __sinit_lock_release
00084558 g     F .text	00000054 __sread
00089674 g     O .bss	00000004 counter
00082468 g     F .text	000000c0 alt_find_file
00081e8c g     F .text	00000074 alt_dev_llist_insert
00084b58 g     F .text	00000004 __malloc_lock
00084c38 g     F .text	0000004c sbrk
000818d4 g     F .text	00000018 alt_avalon_sgdma_start
0008302c g     F .text	0000005c _fflush_r
00089674 g       *ABS*	00000000 __bss_start
000843dc g     F .text	00000128 memset
00080a08 g     F .text	00000280 main
0008968c g     O .bss	00000004 alt_envp
000896a8 g     O .bss	00000004 __malloc_max_total_mem
00081164 g     F .text	00000024 altera_avalon_jtag_uart_write_fd
00082b24 g     F .text	00000018 __swbuf
00087300 g     O .rwdata	00000008 alt_sgdma_list
0008468c g     F .text	00000008 __sclose
000cb000 g       *ABS*	00000000 __alt_heap_limit
00084838 g     F .text	00000014 fclose
00089684 g     O .bss	00000004 sgdma_tx_dev1
00080198 g     F .text	00000068 insertInTable
00083bd0 g     F .text	0000080c _malloc_r
0008731c g     O .rwdata	00000004 alt_errno
0008388c g     F .text	000000c4 _fwalk
00082884 g     F .text	000000c8 putc
00083458 g     F .text	00000124 _malloc_trim_r
00084d58 g       *ABS*	00000000 __flash_rodata_start
00081090 g     F .text	00000020 alt_irq_init
00082338 g     F .text	00000024 alt_release_fd
00101000 g     O .descriptor_memory0	00000020 rx_descriptor0_end
00084694 g     F .text	00000060 _write_r
00087330 g     O .rwdata	00000004 _impure_ptr
00089694 g     O .bss	00000004 alt_argc
00082e10 g     F .text	0000021c __sflush_r
00080020 g       .exceptions	00000000 alt_irq_entry
00083440 g     F .text	00000018 __fp_unlock_all
00087314 g     O .rwdata	00000008 alt_fs_list
00089ab4 g     O .bss	00000400 rx_frame0
00080020 g       *ABS*	00000000 __ram_exceptions_start
00081f9c g     F .text	00000020 alt_ic_isr_register
00087340 g       *ABS*	00000000 _edata
0008a298 g       *ABS*	00000000 _end
00089688 g     O .bss	00000004 sgdma_rx_dev1
0008015c g       *ABS*	00000000 __ram_exceptions_end
000813d0 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
00081ff4 g     F .text	00000038 alt_ic_irq_disable
00100020 g     O .descriptor_memory1	00000020 rx_descriptor1
00081c78 g     F .text	00000048 alt_avalon_sgdma_construct_descriptor
000845b4 g     F .text	0000007c __swrite
00087338 g     O .rwdata	00000004 __malloc_trim_threshold
00082460 g     F .text	00000008 altera_nios2_qsys_irq_init
000825e8 g     F .text	00000038 exit
00083950 g     F .text	000000c4 _fwalk_reent
000cb000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
0008341c g     F .text	00000004 __sfp_lock_release
000849bc g     F .text	00000014 _exit
00081d44 g     F .text	00000080 alt_alarm_start
00083a14 g     F .text	000001bc __smakebuf_r
0008294c g     F .text	00000098 strlen
000821a8 g     F .text	00000190 open
00081070 g     F .text	00000020 alt_putchar
00081f7c g     F .text	00000020 alt_icache_flush_all
00087320 g     O .rwdata	00000004 alt_priority_mask
00081fbc g     F .text	00000038 alt_ic_irq_enable
00081af8 g     F .text	00000048 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
00087324 g     O .rwdata	00000008 alt_alarm_list
00081dc4 g     F .text	000000b8 close
00080c88 g     F .text	00000184 alt_load
00081cc0 g     F .text	00000084 alt_avalon_sgdma_init
00083420 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08405714 	ori	at,at,348
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_main_memory-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)

00080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defffe04 	addi	sp,sp,-8
   800f0:	dfc00115 	stw	ra,4(sp)
   800f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800f8:	000b313a 	rdctl	r5,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   800fc:	04000274 	movhi	r16,9
   80100:	84286604 	addi	r16,r16,-24168
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80104:	2880004c 	andi	r2,r5,1
   80108:	10000926 	beq	r2,zero,80130 <alt_irq_handler+0x44>

  active = alt_irq_pending ();

  do
  {
    i = 0;
   8010c:	0007883a 	mov	r3,zero
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   80110:	180690fa 	slli	r3,r3,3
   80114:	80c7883a 	add	r3,r16,r3
   80118:	18800017 	ldw	r2,0(r3)
   8011c:	19000117 	ldw	r4,4(r3)
   80120:	103ee83a 	callr	r2
   80124:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   80128:	283ff61e 	bne	r5,zero,80104 <alt_irq_handler+0x18>
   8012c:	00000706 	br	8014c <alt_irq_handler+0x60>
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80130:	0007883a 	mov	r3,zero
   80134:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80138:	1085883a 	add	r2,r2,r2
      i++;
   8013c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80140:	2888703a 	and	r4,r5,r2
   80144:	203ffc26 	beq	r4,zero,80138 <alt_irq_handler+0x4c>
   80148:	003ff106 	br	80110 <alt_irq_handler+0x24>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   8014c:	dfc00117 	ldw	ra,4(sp)
   80150:	dc000017 	ldw	r16,0(sp)
   80154:	dec00204 	addi	sp,sp,8
   80158:	f800283a 	ret

Disassembly of section .text:

0008015c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   8015c:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   80160:	deec0014 	ori	sp,sp,45056
    movhi gp, %hi(_gp)
   80164:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   80168:	d6bcc014 	ori	gp,gp,62208
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   8016c:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80170:	10a59d14 	ori	r2,r2,38516

    movhi r3, %hi(__bss_end)
   80174:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   80178:	18e8a614 	ori	r3,r3,41624

    beq r2, r3, 1f
   8017c:	10c00326 	beq	r2,r3,8018c <_start+0x30>

0:
    stw zero, (r2)
   80180:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80184:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80188:	10fffd36 	bltu	r2,r3,80180 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   8018c:	0080c880 	call	80c88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80190:	0080e0c0 	call	80e0c <alt_main>

00080194 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80194:	003fff06 	br	80194 <alt_after_alt_main>

00080198 <insertInTable>:

void insertInTable(unsigned char sourceAddress[], char port)
{
    int i=0;
    int j=0;
    if(counter==100)
   80198:	d0e8dd17 	ldw	r3,-23692(gp)
   8019c:	00801904 	movi	r2,100
   801a0:	18800f1e 	bne	r3,r2,801e0 <insertInTable+0x48>
        counter=0;
   801a4:	d028dd15 	stw	zero,-23692(gp)
   801a8:	00000d06 	br	801e0 <insertInTable+0x48>
    
    for(j=0;j<6;j++){
        
        tabela[counter][j]=sourceAddress[j];
   801ac:	11800003 	ldbu	r6,0(r2)
   801b0:	19800005 	stb	r6,0(r3)
   801b4:	10800044 	addi	r2,r2,1
   801b8:	18c00044 	addi	r3,r3,1
    int i=0;
    int j=0;
    if(counter==100)
        counter=0;
    
    for(j=0;j<6;j++){
   801bc:	113ffb1e 	bne	r2,r4,801ac <insertInTable+0x14>
        
        tabela[counter][j]=sourceAddress[j];
    }
       
        tabela[counter][6]=port;
   801c0:	38c001e4 	muli	r3,r7,7
   801c4:	00800274 	movhi	r2,9
   801c8:	10a7ae84 	addi	r2,r2,-24902
   801cc:	1885883a 	add	r2,r3,r2
   801d0:	11400005 	stb	r5,0(r2)
        counter++;
   801d4:	39c00044 	addi	r7,r7,1
   801d8:	d1e8dd15 	stw	r7,-23692(gp)
}
   801dc:	f800283a 	ret
    if(counter==100)
        counter=0;
    
    for(j=0;j<6;j++){
        
        tabela[counter][j]=sourceAddress[j];
   801e0:	d1e8dd17 	ldw	r7,-23692(gp)
   801e4:	2005883a 	mov	r2,r4
   801e8:	398001e4 	muli	r6,r7,7
   801ec:	00c00274 	movhi	r3,9
   801f0:	18e7ad04 	addi	r3,r3,-24908
   801f4:	30c7883a 	add	r3,r6,r3
   801f8:	21000184 	addi	r4,r4,6
   801fc:	003feb06 	br	801ac <insertInTable+0x14>

00080200 <SearchInTable>:
       
        tabela[counter][6]=port;
        counter++;
}

int SearchInTable(unsigned char sourceAddress[], char * port){
   80200:	02c00274 	movhi	r11,9
   80204:	5ae7ad04 	addi	r11,r11,-24908
    int i,j,br=0;
    for(i=0;i<100;i++){
   80208:	0015883a 	mov	r10,zero
   8020c:	22000184 	addi	r8,r4,6
        for(j=0;j<6;j++){
            if(sourceAddress[j]==tabela[i][j])
            br++;   
                }
        if(br==6) {
   80210:	03400184 	movi	r13,6
        counter++;
}

int SearchInTable(unsigned char sourceAddress[], char * port){
    int i,j,br=0;
    for(i=0;i<100;i++){
   80214:	03001904 	movi	r12,100
   80218:	00001306 	br	80268 <SearchInTable+0x68>
        for(j=0;j<6;j++){
            if(sourceAddress[j]==tabela[i][j])
   8021c:	11c00003 	ldbu	r7,0(r2)
   80220:	19800003 	ldbu	r6,0(r3)
   80224:	3980011e 	bne	r7,r6,8022c <SearchInTable+0x2c>
            br++;   
   80228:	4a400044 	addi	r9,r9,1
   8022c:	10800044 	addi	r2,r2,1
   80230:	18c00044 	addi	r3,r3,1
}

int SearchInTable(unsigned char sourceAddress[], char * port){
    int i,j,br=0;
    for(i=0;i<100;i++){
        for(j=0;j<6;j++){
   80234:	123ff91e 	bne	r2,r8,8021c <SearchInTable+0x1c>
            if(sourceAddress[j]==tabela[i][j])
            br++;   
                }
        if(br==6) {
   80238:	4b40081e 	bne	r9,r13,8025c <SearchInTable+0x5c>
            
            *port=tabela[i][6];
   8023c:	528001e4 	muli	r10,r10,7
   80240:	00800274 	movhi	r2,9
   80244:	10a7ae84 	addi	r2,r2,-24902
   80248:	5095883a 	add	r10,r10,r2
   8024c:	50800003 	ldbu	r2,0(r10)
   80250:	28800005 	stb	r2,0(r5)
            return 1;
   80254:	00800044 	movi	r2,1
   80258:	f800283a 	ret
        counter++;
}

int SearchInTable(unsigned char sourceAddress[], char * port){
    int i,j,br=0;
    for(i=0;i<100;i++){
   8025c:	52800044 	addi	r10,r10,1
   80260:	5ac001c4 	addi	r11,r11,7
   80264:	53000426 	beq	r10,r12,80278 <SearchInTable+0x78>
   80268:	2005883a 	mov	r2,r4
       
        tabela[counter][6]=port;
        counter++;
}

int SearchInTable(unsigned char sourceAddress[], char * port){
   8026c:	5807883a 	mov	r3,r11
   80270:	0013883a 	mov	r9,zero
   80274:	003fe906 	br	8021c <SearchInTable+0x1c>
            
        }
        br=0;
    }
 
    return 0;
   80278:	0005883a 	mov	r2,zero
}
   8027c:	f800283a 	ret

00080280 <rx_ethernet_isr0>:
	return 0;
}


void rx_ethernet_isr0 (void *context)
{
   80280:	deffee04 	addi	sp,sp,-72
   80284:	dfc01115 	stw	ra,68(sp)
   80288:	df001015 	stw	fp,64(sp)
   8028c:	ddc00f15 	stw	r23,60(sp)
   80290:	dd800e15 	stw	r22,56(sp)
   80294:	dd400d15 	stw	r21,52(sp)
   80298:	dd000c15 	stw	r20,48(sp)
   8029c:	dcc00b15 	stw	r19,44(sp)
   802a0:	dc800a15 	stw	r18,40(sp)
   802a4:	dc400915 	stw	r17,36(sp)
   802a8:	dc000815 	stw	r16,32(sp)
	int i,j;
    char port='s';
   802ac:	00801cc4 	movi	r2,115
   802b0:	d8800405 	stb	r2,16(sp)
    unsigned char kontekstSrc[6] = { 0 };       //6 bajti za source address
   802b4:	d8000445 	stb	zero,17(sp)
   802b8:	d8000485 	stb	zero,18(sp)
   802bc:	d80004c5 	stb	zero,19(sp)
   802c0:	d8000505 	stb	zero,20(sp)
   802c4:	d8000545 	stb	zero,21(sp)
   802c8:	d8000585 	stb	zero,22(sp)
    unsigned char kontekstDest[6] = { 0 };      //6 bajti za dest adresskontekstDest
   802cc:	d80005c5 	stb	zero,23(sp)
   802d0:	d8000605 	stb	zero,24(sp)
   802d4:	d8000645 	stb	zero,25(sp)
   802d8:	d8000685 	stb	zero,26(sp)
   802dc:	d80006c5 	stb	zero,27(sp)
   802e0:	d8000705 	stb	zero,28(sp)
	
	alt_printf("Packet arrived on port 0.\n");
   802e4:	01000234 	movhi	r4,8
   802e8:	21135604 	addi	r4,r4,19800
   802ec:	0080e5c0 	call	80e5c <alt_printf>
    
    
	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor0) != 0); 
   802f0:	04000434 	movhi	r16,16
   802f4:	84040804 	addi	r16,r16,4128
   802f8:	8009883a 	mov	r4,r16
   802fc:	00819080 	call	81908 <alt_avalon_sgdma_check_descriptor_status>
   80300:	103ffd1e 	bne	r2,zero,802f8 <rx_ethernet_isr0+0x78>
   80304:	00800274 	movhi	r2,9
   80308:	10a6af04 	addi	r2,r2,-25924
   8030c:	d9400444 	addi	r5,sp,17
   80310:	113ffe84 	addi	r4,r2,-6
   80314:	d8c005c4 	addi	r3,sp,23
   80318:	11c00184 	addi	r7,r2,6

    
    
    for(i=0;i<6;i++){
        kontekstSrc[i]=rx_frame0[i+8];         
   8031c:	11800003 	ldbu	r6,0(r2)
   80320:	29800005 	stb	r6,0(r5)
        kontekstDest[i]=rx_frame0[i+2];
   80324:	21800003 	ldbu	r6,0(r4)
   80328:	19800005 	stb	r6,0(r3)
   8032c:	10800044 	addi	r2,r2,1
   80330:	29400044 	addi	r5,r5,1
   80334:	21000044 	addi	r4,r4,1
   80338:	18c00044 	addi	r3,r3,1
	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor0) != 0); 

    
    
    for(i=0;i<6;i++){
   8033c:	11fff71e 	bne	r2,r7,8031c <rx_ethernet_isr0+0x9c>
   

    


    if(!SearchInTable(kontekstDest,&port)){
   80340:	d9400404 	addi	r5,sp,16
   80344:	d90005c4 	addi	r4,sp,23
   80348:	00802000 	call	80200 <SearchInTable>
   8034c:	1000301e 	bne	r2,zero,80410 <rx_ethernet_isr0+0x190>

        alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor0, &tx_descriptor0_end, (alt_u32 *)rx_frame0, 62, 0, 1, 1, 0 );
   80350:	04000434 	movhi	r16,16
   80354:	84041804 	addi	r16,r16,4192
   80358:	d8000315 	stw	zero,12(sp)
   8035c:	00800044 	movi	r2,1
   80360:	d8800215 	stw	r2,8(sp)
   80364:	d8800115 	stw	r2,4(sp)
   80368:	d8000015 	stw	zero,0(sp)
   8036c:	01c00f84 	movi	r7,62
   80370:	01800274 	movhi	r6,9
   80374:	31a6ad04 	addi	r6,r6,-25932
   80378:	01400434 	movhi	r5,16
   8037c:	29441004 	addi	r5,r5,4160
   80380:	8009883a 	mov	r4,r16
   80384:	0081c380 	call	81c38 <alt_avalon_sgdma_construct_mem_to_stream_desc>
		
         alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev0, &tx_descriptor0 );
   80388:	800b883a 	mov	r5,r16
   8038c:	d128df17 	ldw	r4,-23684(gp)
   80390:	00817ac0 	call	817ac <alt_avalon_sgdma_do_async_transfer>
		
         while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor0) != 0)
   80394:	04000434 	movhi	r16,16
   80398:	84041804 	addi	r16,r16,4192
   8039c:	8009883a 	mov	r4,r16
   803a0:	00819080 	call	81908 <alt_avalon_sgdma_check_descriptor_status>
   803a4:	103ffd1e 	bne	r2,zero,8039c <rx_ethernet_isr0+0x11c>
			;

        alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor1, &tx_descriptor1_end, (alt_u32 *)rx_frame0, 62, 0, 1, 1, 0 );
   803a8:	04000434 	movhi	r16,16
   803ac:	84001804 	addi	r16,r16,96
   803b0:	d8000315 	stw	zero,12(sp)
   803b4:	00800044 	movi	r2,1
   803b8:	d8800215 	stw	r2,8(sp)
   803bc:	d8800115 	stw	r2,4(sp)
   803c0:	d8000015 	stw	zero,0(sp)
   803c4:	01c00f84 	movi	r7,62
   803c8:	01800274 	movhi	r6,9
   803cc:	31a6ad04 	addi	r6,r6,-25932
   803d0:	01400434 	movhi	r5,16
   803d4:	29401004 	addi	r5,r5,64
   803d8:	8009883a 	mov	r4,r16
   803dc:	0081c380 	call	81c38 <alt_avalon_sgdma_construct_mem_to_stream_desc>
		
         alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev1, &tx_descriptor1 );
   803e0:	800b883a 	mov	r5,r16
   803e4:	d128e117 	ldw	r4,-23676(gp)
   803e8:	00817ac0 	call	817ac <alt_avalon_sgdma_do_async_transfer>
		
         while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor1) != 0)
   803ec:	04000434 	movhi	r16,16
   803f0:	84001804 	addi	r16,r16,96
   803f4:	8009883a 	mov	r4,r16
   803f8:	00819080 	call	81908 <alt_avalon_sgdma_check_descriptor_status>
   803fc:	103ffd1e 	bne	r2,zero,803f4 <rx_ethernet_isr0+0x174>
			;
		alt_printf("No destination address in table, packet forwarded on all ports.\n");
   80400:	01000234 	movhi	r4,8
   80404:	21135d04 	addi	r4,r4,19828
   80408:	0080e5c0 	call	80e5c <alt_printf>
   8040c:	00003e06 	br	80508 <rx_ethernet_isr0+0x288>
		
    }else if (port=='0')
   80410:	d8800403 	ldbu	r2,16(sp)
   80414:	11003fcc 	andi	r4,r2,255
   80418:	2100201c 	xori	r4,r4,128
   8041c:	213fe004 	addi	r4,r4,-128
   80420:	00c00c04 	movi	r3,48
   80424:	20c01a1e 	bne	r4,r3,80490 <rx_ethernet_isr0+0x210>
    {
        alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor0, &tx_descriptor0_end, (alt_u32 *)rx_frame0, 62, 0, 1, 1, 0 );
   80428:	04000434 	movhi	r16,16
   8042c:	84041804 	addi	r16,r16,4192
   80430:	d8000315 	stw	zero,12(sp)
   80434:	00800044 	movi	r2,1
   80438:	d8800215 	stw	r2,8(sp)
   8043c:	d8800115 	stw	r2,4(sp)
   80440:	d8000015 	stw	zero,0(sp)
   80444:	01c00f84 	movi	r7,62
   80448:	01800274 	movhi	r6,9
   8044c:	31a6ad04 	addi	r6,r6,-25932
   80450:	01400434 	movhi	r5,16
   80454:	29441004 	addi	r5,r5,4160
   80458:	8009883a 	mov	r4,r16
   8045c:	0081c380 	call	81c38 <alt_avalon_sgdma_construct_mem_to_stream_desc>
		
         alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev0, &tx_descriptor0 );
   80460:	800b883a 	mov	r5,r16
   80464:	d128df17 	ldw	r4,-23684(gp)
   80468:	00817ac0 	call	817ac <alt_avalon_sgdma_do_async_transfer>
		
         while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor0) != 0)
   8046c:	04000434 	movhi	r16,16
   80470:	84041804 	addi	r16,r16,4192
   80474:	8009883a 	mov	r4,r16
   80478:	00819080 	call	81908 <alt_avalon_sgdma_check_descriptor_status>
   8047c:	103ffd1e 	bne	r2,zero,80474 <rx_ethernet_isr0+0x1f4>
			;
		alt_printf("Packet forwarded to port 0 from port 0.\n");
   80480:	01000234 	movhi	r4,8
   80484:	21136e04 	addi	r4,r4,19896
   80488:	0080e5c0 	call	80e5c <alt_printf>
   8048c:	00001e06 	br	80508 <rx_ethernet_isr0+0x288>

    }else if (port=='1')
   80490:	10803fcc 	andi	r2,r2,255
   80494:	1080201c 	xori	r2,r2,128
   80498:	10bfe004 	addi	r2,r2,-128
   8049c:	00c00c44 	movi	r3,49
   804a0:	10c0191e 	bne	r2,r3,80508 <rx_ethernet_isr0+0x288>
    {

        alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor1, &tx_descriptor1_end, (alt_u32 *)rx_frame0, 62, 0, 1, 1, 0 );
   804a4:	04000434 	movhi	r16,16
   804a8:	84001804 	addi	r16,r16,96
   804ac:	d8000315 	stw	zero,12(sp)
   804b0:	00800044 	movi	r2,1
   804b4:	d8800215 	stw	r2,8(sp)
   804b8:	d8800115 	stw	r2,4(sp)
   804bc:	d8000015 	stw	zero,0(sp)
   804c0:	01c00f84 	movi	r7,62
   804c4:	01800274 	movhi	r6,9
   804c8:	31a6ad04 	addi	r6,r6,-25932
   804cc:	01400434 	movhi	r5,16
   804d0:	29401004 	addi	r5,r5,64
   804d4:	8009883a 	mov	r4,r16
   804d8:	0081c380 	call	81c38 <alt_avalon_sgdma_construct_mem_to_stream_desc>
		
         alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev1, &tx_descriptor1 );
   804dc:	800b883a 	mov	r5,r16
   804e0:	d128e117 	ldw	r4,-23676(gp)
   804e4:	00817ac0 	call	817ac <alt_avalon_sgdma_do_async_transfer>
		
         while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor1) != 0)
   804e8:	04000434 	movhi	r16,16
   804ec:	84001804 	addi	r16,r16,96
   804f0:	8009883a 	mov	r4,r16
   804f4:	00819080 	call	81908 <alt_avalon_sgdma_check_descriptor_status>
   804f8:	103ffd1e 	bne	r2,zero,804f0 <rx_ethernet_isr0+0x270>
			;    
		alt_printf("Packet forwarded to port 1 from port 0.\n");
   804fc:	01000234 	movhi	r4,8
   80500:	21137904 	addi	r4,r4,19940
   80504:	0080e5c0 	call	80e5c <alt_printf>

    }

    if(!SearchInTable(kontekstSrc,&port)){
   80508:	d9400404 	addi	r5,sp,16
   8050c:	d9000444 	addi	r4,sp,17
   80510:	00802000 	call	80200 <SearchInTable>
   80514:	1000061e 	bne	r2,zero,80530 <rx_ethernet_isr0+0x2b0>
        insertInTable(kontekstSrc,'0');
   80518:	01400c04 	movi	r5,48
   8051c:	d9000444 	addi	r4,sp,17
   80520:	00801980 	call	80198 <insertInTable>
        alt_printf("Source address didn't exist in table, now is added.\n");
   80524:	01000234 	movhi	r4,8
   80528:	21138404 	addi	r4,r4,19984
   8052c:	0080e5c0 	call	80e5c <alt_printf>
    }
    
    alt_printf("\n");
   80530:	01000234 	movhi	r4,8
   80534:	2113ab04 	addi	r4,r4,20140
   80538:	0080e5c0 	call	80e5c <alt_printf>
    alt_printf("MAC address table:    \n");
   8053c:	01000234 	movhi	r4,8
   80540:	21139204 	addi	r4,r4,20040
   80544:	0080e5c0 	call	80e5c <alt_printf>
    for(i=0;i<counter;i++){
   80548:	002b883a 	mov	r21,zero
   8054c:	d0a8dd17 	ldw	r2,-23692(gp)
   80550:	00801216 	blt	zero,r2,8059c <rx_ethernet_isr0+0x31c>
   80554:	00001f06 	br	805d4 <rx_ethernet_isr0+0x354>
   
    for(j=0;j<6;j++){
        if(j<5){
   80558:	9c000416 	blt	r19,r16,8056c <rx_ethernet_isr0+0x2ec>
                alt_printf("%x:",tabela[i][j]);
   8055c:	89400003 	ldbu	r5,0(r17)
   80560:	a009883a 	mov	r4,r20
   80564:	0080e5c0 	call	80e5c <alt_printf>
   80568:	00000306 	br	80578 <rx_ethernet_isr0+0x2f8>
        } else {
            alt_printf("%x",tabela[i][j]);
   8056c:	89400003 	ldbu	r5,0(r17)
   80570:	e009883a 	mov	r4,fp
   80574:	0080e5c0 	call	80e5c <alt_printf>
    
    alt_printf("\n");
    alt_printf("MAC address table:    \n");
    for(i=0;i<counter;i++){
   
    for(j=0;j<6;j++){
   80578:	84000044 	addi	r16,r16,1
   8057c:	8c400044 	addi	r17,r17,1
   80580:	84bff51e 	bne	r16,r18,80558 <rx_ethernet_isr0+0x2d8>
            alt_printf("%x",tabela[i][j]);
        }
        
        
    }
    alt_printf("\n");
   80584:	b809883a 	mov	r4,r23
   80588:	0080e5c0 	call	80e5c <alt_printf>
        alt_printf("Source address didn't exist in table, now is added.\n");
    }
    
    alt_printf("\n");
    alt_printf("MAC address table:    \n");
    for(i=0;i<counter;i++){
   8058c:	ad400044 	addi	r21,r21,1
   80590:	d0a8dd17 	ldw	r2,-23692(gp)
   80594:	a8800b16 	blt	r21,r2,805c4 <rx_ethernet_isr0+0x344>
   80598:	00000e06 	br	805d4 <rx_ethernet_isr0+0x354>
   8059c:	05800274 	movhi	r22,9
   805a0:	b5a7ad04 	addi	r22,r22,-24908
   
    for(j=0;j<6;j++){
        if(j<5){
   805a4:	04c00104 	movi	r19,4
                alt_printf("%x:",tabela[i][j]);
        } else {
            alt_printf("%x",tabela[i][j]);
   805a8:	07000234 	movhi	fp,8
   805ac:	e7139904 	addi	fp,fp,20068
    alt_printf("MAC address table:    \n");
    for(i=0;i<counter;i++){
   
    for(j=0;j<6;j++){
        if(j<5){
                alt_printf("%x:",tabela[i][j]);
   805b0:	05000234 	movhi	r20,8
   805b4:	a5139804 	addi	r20,r20,20064
    
    alt_printf("\n");
    alt_printf("MAC address table:    \n");
    for(i=0;i<counter;i++){
   
    for(j=0;j<6;j++){
   805b8:	04800184 	movi	r18,6
            alt_printf("%x",tabela[i][j]);
        }
        
        
    }
    alt_printf("\n");
   805bc:	05c00234 	movhi	r23,8
   805c0:	bdd3ab04 	addi	r23,r23,20140
   805c4:	ac4001e4 	muli	r17,r21,7
   805c8:	8da3883a 	add	r17,r17,r22
	return 0;
}


void rx_ethernet_isr0 (void *context)
{
   805cc:	0021883a 	mov	r16,zero
   805d0:	003fe106 	br	80558 <rx_ethernet_isr0+0x2d8>
        
    }
    alt_printf("\n");
  
    }
    alt_printf("\n");
   805d4:	01000234 	movhi	r4,8
   805d8:	2113ab04 	addi	r4,r4,20140
   805dc:	0080e5c0 	call	80e5c <alt_printf>

    

	// Create new receive sgdma descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor0, &rx_descriptor0_end, (alt_u32 *)rx_frame0, 0, 0 );
   805e0:	04000434 	movhi	r16,16
   805e4:	84040804 	addi	r16,r16,4128
   805e8:	d8000015 	stw	zero,0(sp)
   805ec:	000f883a 	mov	r7,zero
   805f0:	01800274 	movhi	r6,9
   805f4:	31a6ad04 	addi	r6,r6,-25932
   805f8:	01400434 	movhi	r5,16
   805fc:	29440004 	addi	r5,r5,4096
   80600:	8009883a 	mov	r4,r16
   80604:	0081bc00 	call	81bc0 <alt_avalon_sgdma_construct_stream_to_mem_desc>
	
	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev0, &rx_descriptor0 );
   80608:	800b883a 	mov	r5,r16
   8060c:	d128de17 	ldw	r4,-23688(gp)
   80610:	00817ac0 	call	817ac <alt_avalon_sgdma_do_async_transfer>
}
   80614:	dfc01117 	ldw	ra,68(sp)
   80618:	df001017 	ldw	fp,64(sp)
   8061c:	ddc00f17 	ldw	r23,60(sp)
   80620:	dd800e17 	ldw	r22,56(sp)
   80624:	dd400d17 	ldw	r21,52(sp)
   80628:	dd000c17 	ldw	r20,48(sp)
   8062c:	dcc00b17 	ldw	r19,44(sp)
   80630:	dc800a17 	ldw	r18,40(sp)
   80634:	dc400917 	ldw	r17,36(sp)
   80638:	dc000817 	ldw	r16,32(sp)
   8063c:	dec01204 	addi	sp,sp,72
   80640:	f800283a 	ret

00080644 <rx_ethernet_isr1>:


void rx_ethernet_isr1 (void *context)
{
   80644:	deffee04 	addi	sp,sp,-72
   80648:	dfc01115 	stw	ra,68(sp)
   8064c:	df001015 	stw	fp,64(sp)
   80650:	ddc00f15 	stw	r23,60(sp)
   80654:	dd800e15 	stw	r22,56(sp)
   80658:	dd400d15 	stw	r21,52(sp)
   8065c:	dd000c15 	stw	r20,48(sp)
   80660:	dcc00b15 	stw	r19,44(sp)
   80664:	dc800a15 	stw	r18,40(sp)
   80668:	dc400915 	stw	r17,36(sp)
   8066c:	dc000815 	stw	r16,32(sp)
    int i,j;
    char port='s';
   80670:	00801cc4 	movi	r2,115
   80674:	d8800405 	stb	r2,16(sp)
    unsigned char kontekstSrc[6] = { 0 };       //6 bajti za source address
   80678:	d8000445 	stb	zero,17(sp)
   8067c:	d8000485 	stb	zero,18(sp)
   80680:	d80004c5 	stb	zero,19(sp)
   80684:	d8000505 	stb	zero,20(sp)
   80688:	d8000545 	stb	zero,21(sp)
   8068c:	d8000585 	stb	zero,22(sp)
    unsigned char kontekstDest[6] = { 0 };      //6 bajti za dest adress
   80690:	d80005c5 	stb	zero,23(sp)
   80694:	d8000605 	stb	zero,24(sp)
   80698:	d8000645 	stb	zero,25(sp)
   8069c:	d8000685 	stb	zero,26(sp)
   806a0:	d80006c5 	stb	zero,27(sp)
   806a4:	d8000705 	stb	zero,28(sp)
    
    
	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor1) != 0)
   806a8:	04000434 	movhi	r16,16
   806ac:	84000804 	addi	r16,r16,32
   806b0:	8009883a 	mov	r4,r16
   806b4:	00819080 	call	81908 <alt_avalon_sgdma_check_descriptor_status>
   806b8:	103ffd1e 	bne	r2,zero,806b0 <rx_ethernet_isr1+0x6c>
		;
	
		alt_printf("Packet arrived on port 1. \n");
   806bc:	01000234 	movhi	r4,8
   806c0:	21139a04 	addi	r4,r4,20072
   806c4:	0080e5c0 	call	80e5c <alt_printf>
   806c8:	00800274 	movhi	r2,9
   806cc:	10a5af04 	addi	r2,r2,-26948
   806d0:	d9400444 	addi	r5,sp,17
   806d4:	113ffe84 	addi	r4,r2,-6
   806d8:	d8c005c4 	addi	r3,sp,23
   806dc:	11c00184 	addi	r7,r2,6

    
    for(i=0;i<6;i++){
        kontekstSrc[i]=rx_frame1[i+8];         //Provjeriti format ping okvira ! 
   806e0:	11800003 	ldbu	r6,0(r2)
   806e4:	29800005 	stb	r6,0(r5)
        
        kontekstDest[i]=rx_frame1[i+2];
   806e8:	21800003 	ldbu	r6,0(r4)
   806ec:	19800005 	stb	r6,0(r3)
   806f0:	10800044 	addi	r2,r2,1
   806f4:	29400044 	addi	r5,r5,1
   806f8:	21000044 	addi	r4,r4,1
   806fc:	18c00044 	addi	r3,r3,1
		;
	
		alt_printf("Packet arrived on port 1. \n");

    
    for(i=0;i<6;i++){
   80700:	11fff71e 	bne	r2,r7,806e0 <rx_ethernet_isr1+0x9c>
  
    


    
    if(!SearchInTable(kontekstDest,&port)){
   80704:	d9400404 	addi	r5,sp,16
   80708:	d90005c4 	addi	r4,sp,23
   8070c:	00802000 	call	80200 <SearchInTable>
   80710:	1000301e 	bne	r2,zero,807d4 <rx_ethernet_isr1+0x190>

        alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor0, &tx_descriptor0_end, (alt_u32 *)rx_frame1, 62, 0, 1, 1, 0 );
   80714:	04000434 	movhi	r16,16
   80718:	84041804 	addi	r16,r16,4192
   8071c:	d8000315 	stw	zero,12(sp)
   80720:	00800044 	movi	r2,1
   80724:	d8800215 	stw	r2,8(sp)
   80728:	d8800115 	stw	r2,4(sp)
   8072c:	d8000015 	stw	zero,0(sp)
   80730:	01c00f84 	movi	r7,62
   80734:	01800274 	movhi	r6,9
   80738:	31a5ad04 	addi	r6,r6,-26956
   8073c:	01400434 	movhi	r5,16
   80740:	29441004 	addi	r5,r5,4160
   80744:	8009883a 	mov	r4,r16
   80748:	0081c380 	call	81c38 <alt_avalon_sgdma_construct_mem_to_stream_desc>
		
        alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev0, &tx_descriptor0 );
   8074c:	800b883a 	mov	r5,r16
   80750:	d128df17 	ldw	r4,-23684(gp)
   80754:	00817ac0 	call	817ac <alt_avalon_sgdma_do_async_transfer>
		
         while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor0) != 0)
   80758:	04000434 	movhi	r16,16
   8075c:	84041804 	addi	r16,r16,4192
   80760:	8009883a 	mov	r4,r16
   80764:	00819080 	call	81908 <alt_avalon_sgdma_check_descriptor_status>
   80768:	103ffd1e 	bne	r2,zero,80760 <rx_ethernet_isr1+0x11c>
			;

        alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor1, &tx_descriptor1_end, (alt_u32 *)rx_frame1, 62, 0, 1, 1, 0 );
   8076c:	04000434 	movhi	r16,16
   80770:	84001804 	addi	r16,r16,96
   80774:	d8000315 	stw	zero,12(sp)
   80778:	00800044 	movi	r2,1
   8077c:	d8800215 	stw	r2,8(sp)
   80780:	d8800115 	stw	r2,4(sp)
   80784:	d8000015 	stw	zero,0(sp)
   80788:	01c00f84 	movi	r7,62
   8078c:	01800274 	movhi	r6,9
   80790:	31a5ad04 	addi	r6,r6,-26956
   80794:	01400434 	movhi	r5,16
   80798:	29401004 	addi	r5,r5,64
   8079c:	8009883a 	mov	r4,r16
   807a0:	0081c380 	call	81c38 <alt_avalon_sgdma_construct_mem_to_stream_desc>
		
        alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev1, &tx_descriptor1 );
   807a4:	800b883a 	mov	r5,r16
   807a8:	d128e117 	ldw	r4,-23676(gp)
   807ac:	00817ac0 	call	817ac <alt_avalon_sgdma_do_async_transfer>
		
         while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor1) != 0)
   807b0:	04000434 	movhi	r16,16
   807b4:	84001804 	addi	r16,r16,96
   807b8:	8009883a 	mov	r4,r16
   807bc:	00819080 	call	81908 <alt_avalon_sgdma_check_descriptor_status>
   807c0:	103ffd1e 	bne	r2,zero,807b8 <rx_ethernet_isr1+0x174>
			;
		
		alt_printf("No destination address in table, packet forwarded on all ports.\n");
   807c4:	01000234 	movhi	r4,8
   807c8:	21135d04 	addi	r4,r4,19828
   807cc:	0080e5c0 	call	80e5c <alt_printf>
   807d0:	00003e06 	br	808cc <rx_ethernet_isr1+0x288>

    }else if (port=='0')
   807d4:	d8800403 	ldbu	r2,16(sp)
   807d8:	11003fcc 	andi	r4,r2,255
   807dc:	2100201c 	xori	r4,r4,128
   807e0:	213fe004 	addi	r4,r4,-128
   807e4:	00c00c04 	movi	r3,48
   807e8:	20c01a1e 	bne	r4,r3,80854 <rx_ethernet_isr1+0x210>
    {
        alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor0, &tx_descriptor0_end, (alt_u32 *)rx_frame1, 62, 0, 1, 1, 0 );
   807ec:	04000434 	movhi	r16,16
   807f0:	84041804 	addi	r16,r16,4192
   807f4:	d8000315 	stw	zero,12(sp)
   807f8:	00800044 	movi	r2,1
   807fc:	d8800215 	stw	r2,8(sp)
   80800:	d8800115 	stw	r2,4(sp)
   80804:	d8000015 	stw	zero,0(sp)
   80808:	01c00f84 	movi	r7,62
   8080c:	01800274 	movhi	r6,9
   80810:	31a5ad04 	addi	r6,r6,-26956
   80814:	01400434 	movhi	r5,16
   80818:	29441004 	addi	r5,r5,4160
   8081c:	8009883a 	mov	r4,r16
   80820:	0081c380 	call	81c38 <alt_avalon_sgdma_construct_mem_to_stream_desc>
		
         alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev0, &tx_descriptor0 );
   80824:	800b883a 	mov	r5,r16
   80828:	d128df17 	ldw	r4,-23684(gp)
   8082c:	00817ac0 	call	817ac <alt_avalon_sgdma_do_async_transfer>
		
         while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor0) != 0)
   80830:	04000434 	movhi	r16,16
   80834:	84041804 	addi	r16,r16,4192
   80838:	8009883a 	mov	r4,r16
   8083c:	00819080 	call	81908 <alt_avalon_sgdma_check_descriptor_status>
   80840:	103ffd1e 	bne	r2,zero,80838 <rx_ethernet_isr1+0x1f4>
			;
	alt_printf("Packet forwarded to port 0 from port 1. \n");
   80844:	01000234 	movhi	r4,8
   80848:	2113a104 	addi	r4,r4,20100
   8084c:	0080e5c0 	call	80e5c <alt_printf>
   80850:	00001e06 	br	808cc <rx_ethernet_isr1+0x288>

    }else if (port=='1')
   80854:	10803fcc 	andi	r2,r2,255
   80858:	1080201c 	xori	r2,r2,128
   8085c:	10bfe004 	addi	r2,r2,-128
   80860:	00c00c44 	movi	r3,49
   80864:	10c0191e 	bne	r2,r3,808cc <rx_ethernet_isr1+0x288>
    {

        alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor1, &tx_descriptor1_end, (alt_u32 *)rx_frame1, 62, 0, 1, 1, 0 );
   80868:	04000434 	movhi	r16,16
   8086c:	84001804 	addi	r16,r16,96
   80870:	d8000315 	stw	zero,12(sp)
   80874:	00800044 	movi	r2,1
   80878:	d8800215 	stw	r2,8(sp)
   8087c:	d8800115 	stw	r2,4(sp)
   80880:	d8000015 	stw	zero,0(sp)
   80884:	01c00f84 	movi	r7,62
   80888:	01800274 	movhi	r6,9
   8088c:	31a5ad04 	addi	r6,r6,-26956
   80890:	01400434 	movhi	r5,16
   80894:	29401004 	addi	r5,r5,64
   80898:	8009883a 	mov	r4,r16
   8089c:	0081c380 	call	81c38 <alt_avalon_sgdma_construct_mem_to_stream_desc>
		
         alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev1, &tx_descriptor1 );
   808a0:	800b883a 	mov	r5,r16
   808a4:	d128e117 	ldw	r4,-23676(gp)
   808a8:	00817ac0 	call	817ac <alt_avalon_sgdma_do_async_transfer>
		
         while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor1) != 0)
   808ac:	04000434 	movhi	r16,16
   808b0:	84001804 	addi	r16,r16,96
   808b4:	8009883a 	mov	r4,r16
   808b8:	00819080 	call	81908 <alt_avalon_sgdma_check_descriptor_status>
   808bc:	103ffd1e 	bne	r2,zero,808b4 <rx_ethernet_isr1+0x270>
			;    
	alt_printf("Packet forwarded to port 1 from port 1. \n");
   808c0:	01000234 	movhi	r4,8
   808c4:	2113ac04 	addi	r4,r4,20144
   808c8:	0080e5c0 	call	80e5c <alt_printf>

    }

    if(!SearchInTable(kontekstSrc,&port)){
   808cc:	d9400404 	addi	r5,sp,16
   808d0:	d9000444 	addi	r4,sp,17
   808d4:	00802000 	call	80200 <SearchInTable>
   808d8:	1000061e 	bne	r2,zero,808f4 <rx_ethernet_isr1+0x2b0>
        insertInTable(kontekstSrc,'1');
   808dc:	01400c44 	movi	r5,49
   808e0:	d9000444 	addi	r4,sp,17
   808e4:	00801980 	call	80198 <insertInTable>
     alt_printf("Source address didn't exist in table, now is added.\n");
   808e8:	01000234 	movhi	r4,8
   808ec:	21138404 	addi	r4,r4,19984
   808f0:	0080e5c0 	call	80e5c <alt_printf>
    }
    
    alt_printf("\n");
   808f4:	01000234 	movhi	r4,8
   808f8:	2113ab04 	addi	r4,r4,20140
   808fc:	0080e5c0 	call	80e5c <alt_printf>
    alt_printf("MAC address table:    \n");
   80900:	01000234 	movhi	r4,8
   80904:	21139204 	addi	r4,r4,20040
   80908:	0080e5c0 	call	80e5c <alt_printf>
    for(i=0;i<counter;i++){
   8090c:	002b883a 	mov	r21,zero
   80910:	d0a8dd17 	ldw	r2,-23692(gp)
   80914:	00801216 	blt	zero,r2,80960 <rx_ethernet_isr1+0x31c>
   80918:	00001f06 	br	80998 <rx_ethernet_isr1+0x354>
   
    for(j=0;j<6;j++){
        if(j<5){
   8091c:	9c000416 	blt	r19,r16,80930 <rx_ethernet_isr1+0x2ec>
                alt_printf("%x:",tabela[i][j]);
   80920:	89400003 	ldbu	r5,0(r17)
   80924:	a009883a 	mov	r4,r20
   80928:	0080e5c0 	call	80e5c <alt_printf>
   8092c:	00000306 	br	8093c <rx_ethernet_isr1+0x2f8>
        } else {
            alt_printf("%x",tabela[i][j]);
   80930:	89400003 	ldbu	r5,0(r17)
   80934:	e009883a 	mov	r4,fp
   80938:	0080e5c0 	call	80e5c <alt_printf>
    
    alt_printf("\n");
    alt_printf("MAC address table:    \n");
    for(i=0;i<counter;i++){
   
    for(j=0;j<6;j++){
   8093c:	84000044 	addi	r16,r16,1
   80940:	8c400044 	addi	r17,r17,1
   80944:	84bff51e 	bne	r16,r18,8091c <rx_ethernet_isr1+0x2d8>
            alt_printf("%x",tabela[i][j]);
        }
        
        
    }
    alt_printf("\n");
   80948:	b809883a 	mov	r4,r23
   8094c:	0080e5c0 	call	80e5c <alt_printf>
     alt_printf("Source address didn't exist in table, now is added.\n");
    }
    
    alt_printf("\n");
    alt_printf("MAC address table:    \n");
    for(i=0;i<counter;i++){
   80950:	ad400044 	addi	r21,r21,1
   80954:	d0a8dd17 	ldw	r2,-23692(gp)
   80958:	a8800b16 	blt	r21,r2,80988 <rx_ethernet_isr1+0x344>
   8095c:	00000e06 	br	80998 <rx_ethernet_isr1+0x354>
   80960:	05800274 	movhi	r22,9
   80964:	b5a7ad04 	addi	r22,r22,-24908
   
    for(j=0;j<6;j++){
        if(j<5){
   80968:	04c00104 	movi	r19,4
                alt_printf("%x:",tabela[i][j]);
        } else {
            alt_printf("%x",tabela[i][j]);
   8096c:	07000234 	movhi	fp,8
   80970:	e7139904 	addi	fp,fp,20068
    alt_printf("MAC address table:    \n");
    for(i=0;i<counter;i++){
   
    for(j=0;j<6;j++){
        if(j<5){
                alt_printf("%x:",tabela[i][j]);
   80974:	05000234 	movhi	r20,8
   80978:	a5139804 	addi	r20,r20,20064
    
    alt_printf("\n");
    alt_printf("MAC address table:    \n");
    for(i=0;i<counter;i++){
   
    for(j=0;j<6;j++){
   8097c:	04800184 	movi	r18,6
            alt_printf("%x",tabela[i][j]);
        }
        
        
    }
    alt_printf("\n");
   80980:	05c00234 	movhi	r23,8
   80984:	bdd3ab04 	addi	r23,r23,20140
   80988:	ac4001e4 	muli	r17,r21,7
   8098c:	8da3883a 	add	r17,r17,r22
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev0, &rx_descriptor0 );
}


void rx_ethernet_isr1 (void *context)
{
   80990:	0021883a 	mov	r16,zero
   80994:	003fe106 	br	8091c <rx_ethernet_isr1+0x2d8>
        
    }
    alt_printf("\n");
  
    }
    alt_printf("\n");
   80998:	01000234 	movhi	r4,8
   8099c:	2113ab04 	addi	r4,r4,20140
   809a0:	0080e5c0 	call	80e5c <alt_printf>
    

	
	// Create new receive sgdma descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor1, &rx_descriptor1_end, (alt_u32 *)rx_frame1, 0, 0 );
   809a4:	04000434 	movhi	r16,16
   809a8:	84000804 	addi	r16,r16,32
   809ac:	d8000015 	stw	zero,0(sp)
   809b0:	000f883a 	mov	r7,zero
   809b4:	01800274 	movhi	r6,9
   809b8:	31a5ad04 	addi	r6,r6,-26956
   809bc:	01400434 	movhi	r5,16
   809c0:	29400004 	addi	r5,r5,0
   809c4:	8009883a 	mov	r4,r16
   809c8:	0081bc00 	call	81bc0 <alt_avalon_sgdma_construct_stream_to_mem_desc>
	
	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev1, &rx_descriptor1 );
   809cc:	800b883a 	mov	r5,r16
   809d0:	d128e217 	ldw	r4,-23672(gp)
   809d4:	00817ac0 	call	817ac <alt_avalon_sgdma_do_async_transfer>
}
   809d8:	dfc01117 	ldw	ra,68(sp)
   809dc:	df001017 	ldw	fp,64(sp)
   809e0:	ddc00f17 	ldw	r23,60(sp)
   809e4:	dd800e17 	ldw	r22,56(sp)
   809e8:	dd400d17 	ldw	r21,52(sp)
   809ec:	dd000c17 	ldw	r20,48(sp)
   809f0:	dcc00b17 	ldw	r19,44(sp)
   809f4:	dc800a17 	ldw	r18,40(sp)
   809f8:	dc400917 	ldw	r17,36(sp)
   809fc:	dc000817 	ldw	r16,32(sp)
   80a00:	dec01204 	addi	sp,sp,72
   80a04:	f800283a 	ret

00080a08 <main>:
alt_sgdma_descriptor rx_descriptor1_end  __attribute__ (( section ( ".descriptor_memory1" )));



int main(void)
{	
   80a08:	defffc04 	addi	sp,sp,-16
   80a0c:	dfc00315 	stw	ra,12(sp)
   80a10:	dc400215 	stw	r17,8(sp)
   80a14:	dc000115 	stw	r16,4(sp)
	// Open the sgdma transmit device
	sgdma_tx_dev0 = alt_avalon_sgdma_open ("/dev/sgdma_tx0");
   80a18:	01000234 	movhi	r4,8
   80a1c:	2113b704 	addi	r4,r4,20188
   80a20:	00819340 	call	81934 <alt_avalon_sgdma_open>
   80a24:	d0a8df15 	stw	r2,-23684(gp)
    sgdma_tx_dev1 = alt_avalon_sgdma_open ("/dev/sgdma_tx1");
   80a28:	01000234 	movhi	r4,8
   80a2c:	2113bb04 	addi	r4,r4,20204
   80a30:	00819340 	call	81934 <alt_avalon_sgdma_open>
   80a34:	d0a8e115 	stw	r2,-23676(gp)

	if (sgdma_tx_dev0 == NULL || sgdma_tx_dev1 == NULL) {
   80a38:	d0e8df17 	ldw	r3,-23684(gp)
   80a3c:	18000126 	beq	r3,zero,80a44 <main+0x3c>
   80a40:	1000041e 	bne	r2,zero,80a54 <main+0x4c>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
   80a44:	01000234 	movhi	r4,8
   80a48:	2113bf04 	addi	r4,r4,20220
   80a4c:	0080e5c0 	call	80e5c <alt_printf>
		return -1;
   80a50:	00008706 	br	80c70 <main+0x268>
	} else alt_printf ("Opened scatter-gather dma transmit device.\n");
   80a54:	01000234 	movhi	r4,8
   80a58:	2113ce04 	addi	r4,r4,20280
   80a5c:	0080e5c0 	call	80e5c <alt_printf>
    
		
	// Open the sgdma receive device
	sgdma_rx_dev0 = alt_avalon_sgdma_open ("/dev/sgdma_rx0");
   80a60:	01000234 	movhi	r4,8
   80a64:	2113d904 	addi	r4,r4,20324
   80a68:	00819340 	call	81934 <alt_avalon_sgdma_open>
   80a6c:	d0a8de15 	stw	r2,-23688(gp)
    sgdma_rx_dev1 = alt_avalon_sgdma_open ("/dev/sgdma_rx1");
   80a70:	01000234 	movhi	r4,8
   80a74:	2113dd04 	addi	r4,r4,20340
   80a78:	00819340 	call	81934 <alt_avalon_sgdma_open>
   80a7c:	d0a8e215 	stw	r2,-23672(gp)

	if (sgdma_rx_dev0 == NULL || sgdma_rx_dev1 == NULL) {
   80a80:	d0e8de17 	ldw	r3,-23688(gp)
   80a84:	18000126 	beq	r3,zero,80a8c <main+0x84>
   80a88:	1000041e 	bne	r2,zero,80a9c <main+0x94>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
   80a8c:	01000234 	movhi	r4,8
   80a90:	2113e104 	addi	r4,r4,20356
   80a94:	0080e5c0 	call	80e5c <alt_printf>
		return -1;
   80a98:	00007506 	br	80c70 <main+0x268>
	} else alt_printf ("Opened scatter-gather dma receive device.\n");
   80a9c:	01000234 	movhi	r4,8
   80aa0:	2113f004 	addi	r4,r4,20416
   80aa4:	0080e5c0 	call	80e5c <alt_printf>

	// Set interrupts for the sgdma receive device
	alt_avalon_sgdma_register_callback( sgdma_rx_dev0, (alt_avalon_sgdma_callback) rx_ethernet_isr0, 0x00000014, NULL );
   80aa8:	04000504 	movi	r16,20
   80aac:	000f883a 	mov	r7,zero
   80ab0:	800d883a 	mov	r6,r16
   80ab4:	01400234 	movhi	r5,8
   80ab8:	2940a004 	addi	r5,r5,640
   80abc:	d128de17 	ldw	r4,-23688(gp)
   80ac0:	00818c40 	call	818c4 <alt_avalon_sgdma_register_callback>
    alt_avalon_sgdma_register_callback( sgdma_rx_dev1, (alt_avalon_sgdma_callback) rx_ethernet_isr1, 0x00000014, NULL );
   80ac4:	000f883a 	mov	r7,zero
   80ac8:	800d883a 	mov	r6,r16
   80acc:	01400234 	movhi	r5,8
   80ad0:	29419104 	addi	r5,r5,1604
   80ad4:	d128e217 	ldw	r4,-23672(gp)
   80ad8:	00818c40 	call	818c4 <alt_avalon_sgdma_register_callback>


	// Create sgdma receive descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor0, &rx_descriptor0_end, (alt_u32 *)rx_frame0, 0, 0 );
   80adc:	04400434 	movhi	r17,16
   80ae0:	8c440804 	addi	r17,r17,4128
   80ae4:	d8000015 	stw	zero,0(sp)
   80ae8:	000f883a 	mov	r7,zero
   80aec:	01800274 	movhi	r6,9
   80af0:	31a6ad04 	addi	r6,r6,-25932
   80af4:	01400434 	movhi	r5,16
   80af8:	29440004 	addi	r5,r5,4096
   80afc:	8809883a 	mov	r4,r17
   80b00:	0081bc00 	call	81bc0 <alt_avalon_sgdma_construct_stream_to_mem_desc>
    alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor1, &rx_descriptor1_end, (alt_u32 *)rx_frame1, 0, 0 );
   80b04:	04000434 	movhi	r16,16
   80b08:	84000804 	addi	r16,r16,32
   80b0c:	d8000015 	stw	zero,0(sp)
   80b10:	000f883a 	mov	r7,zero
   80b14:	01800274 	movhi	r6,9
   80b18:	31a5ad04 	addi	r6,r6,-26956
   80b1c:	01400434 	movhi	r5,16
   80b20:	29400004 	addi	r5,r5,0
   80b24:	8009883a 	mov	r4,r16
   80b28:	0081bc00 	call	81bc0 <alt_avalon_sgdma_construct_stream_to_mem_desc>


	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev0, &rx_descriptor0 );
   80b2c:	880b883a 	mov	r5,r17
   80b30:	d128de17 	ldw	r4,-23688(gp)
   80b34:	00817ac0 	call	817ac <alt_avalon_sgdma_do_async_transfer>
    alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev1, &rx_descriptor1 );
   80b38:	800b883a 	mov	r5,r16
   80b3c:	d128e217 	ldw	r4,-23672(gp)
   80b40:	00817ac0 	call	817ac <alt_avalon_sgdma_do_async_transfer>
	// Triple-speed Ethernet MegaCore base address
	volatile int * tse0 = (int *) 0x00103400;
    volatile int * tse1 = (int *) 0x00103000;
 	
	// Initialize the MAC address 
	*(tse0 + 3) = 0x116E6001;
   80b44:	00845bb4 	movhi	r2,4462
   80b48:	10980044 	addi	r2,r2,24577
   80b4c:	00c00434 	movhi	r3,16
   80b50:	18cd0304 	addi	r3,r3,13324
   80b54:	18800015 	stw	r2,0(r3)
	*(tse0 + 4) = 0x00000F02; 
   80b58:	0103c084 	movi	r4,3842
   80b5c:	00c00434 	movhi	r3,16
   80b60:	18cd0404 	addi	r3,r3,13328
   80b64:	19000015 	stw	r4,0(r3)
    
	*(tse1 + 3) = 0x116E6001;
   80b68:	00c00434 	movhi	r3,16
   80b6c:	18cc0304 	addi	r3,r3,12300
   80b70:	18800015 	stw	r2,0(r3)
	*(tse1 + 4) = 0x00000F03;
   80b74:	00c3c0c4 	movi	r3,3843
   80b78:	00800434 	movhi	r2,16
   80b7c:	108c0404 	addi	r2,r2,12304
   80b80:	10c00015 	stw	r3,0(r2)
    


	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	//*(tse1 + 0x0F) = 0x10;
	*(tse0 + 0x10) = 0x10;
   80b84:	00c00404 	movi	r3,16
   80b88:	00800434 	movhi	r2,16
   80b8c:	108d1004 	addi	r2,r2,13376
   80b90:	10c00015 	stw	r3,0(r2)
	
	// Write to register 16 of the PHY chip for Ethernet port 0 to enable automatic crossover for all modes
	*(tse0 + 0xB0) = *(tse0 + 0xB0) | 0x0060;
   80b94:	00c00434 	movhi	r3,16
   80b98:	18cdb004 	addi	r3,r3,14016
   80b9c:	18800017 	ldw	r2,0(r3)
   80ba0:	10801814 	ori	r2,r2,96
   80ba4:	18800015 	stw	r2,0(r3)
	
	// Write to register 20 of the PHY chip for Ethernet port 0 to set up delay for input/output clk
	*(tse0 + 0xB4) = *(tse0 + 0xB4) | 0x0082;
   80ba8:	00c00434 	movhi	r3,16
   80bac:	18cdb404 	addi	r3,r3,14032
   80bb0:	18800017 	ldw	r2,0(r3)
   80bb4:	10802094 	ori	r2,r2,130
   80bb8:	18800015 	stw	r2,0(r3)
	
	// Software reset the second PHY chip and wait
	*(tse0 + 0xA0) = *(tse0 + 0xA0) | 0x8000;
   80bbc:	00c00434 	movhi	r3,16
   80bc0:	18cda004 	addi	r3,r3,13952
   80bc4:	18800017 	ldw	r2,0(r3)
   80bc8:	10a00014 	ori	r2,r2,32768
   80bcc:	18800015 	stw	r2,0(r3)
	while ( *(tse0 + 0xA0) & 0x8000  )
   80bd0:	00800434 	movhi	r2,16
   80bd4:	108da004 	addi	r2,r2,13952
   80bd8:	10800017 	ldw	r2,0(r2)
   80bdc:	10a0000c 	andi	r2,r2,32768
   80be0:	103ffb1e 	bne	r2,zero,80bd0 <main+0x1c8>
		;	 
	 
	// Enable read and write transfers, gigabit Ethernet operation, and CRC forwarding
	*(tse0 + 2) = *(tse0 + 2) | 0x0000005B;	
   80be4:	00c00434 	movhi	r3,16
   80be8:	18cd0204 	addi	r3,r3,13320
   80bec:	18800017 	ldw	r2,0(r3)
   80bf0:	108016d4 	ori	r2,r2,91
   80bf4:	18800015 	stw	r2,0(r3)

    
    // Specify the addresses of the PHY devices to be accessed through MDIO interface
	//*(tse1 + 0x0F) = 0x10;
	*(tse1 + 0x10) = 0x11;
   80bf8:	00c00444 	movi	r3,17
   80bfc:	00800434 	movhi	r2,16
   80c00:	108c1004 	addi	r2,r2,12352
   80c04:	10c00015 	stw	r3,0(r2)
	
	// Write to register 16 of the PHY chip for Ethernet port 0 to enable automatic crossover for all modes
	*(tse1 + 0xB0) = *(tse1 + 0xB0) | 0x0060;
   80c08:	00c00434 	movhi	r3,16
   80c0c:	18ccb004 	addi	r3,r3,12992
   80c10:	18800017 	ldw	r2,0(r3)
   80c14:	10801814 	ori	r2,r2,96
   80c18:	18800015 	stw	r2,0(r3)
	
	// Write to register 20 of the PHY chip for Ethernet port 0 to set up delay for input/output clk
	*(tse1 + 0xB4) = *(tse1 + 0xB4) | 0x0082;
   80c1c:	00c00434 	movhi	r3,16
   80c20:	18ccb404 	addi	r3,r3,13008
   80c24:	18800017 	ldw	r2,0(r3)
   80c28:	10802094 	ori	r2,r2,130
   80c2c:	18800015 	stw	r2,0(r3)
	
	// Software reset the second PHY chip and wait
	*(tse1 + 0xA0) = *(tse1 + 0xA0) | 0x8000;
   80c30:	00c00434 	movhi	r3,16
   80c34:	18cca004 	addi	r3,r3,12928
   80c38:	18800017 	ldw	r2,0(r3)
   80c3c:	10a00014 	ori	r2,r2,32768
   80c40:	18800015 	stw	r2,0(r3)
	while ( *(tse1 + 0xA0) & 0x8000  )
   80c44:	00800434 	movhi	r2,16
   80c48:	108ca004 	addi	r2,r2,12928
   80c4c:	10800017 	ldw	r2,0(r2)
   80c50:	10a0000c 	andi	r2,r2,32768
   80c54:	103ffb1e 	bne	r2,zero,80c44 <main+0x23c>
		;	 
	 
	// Enable read and write transfers, gigabit Ethernet operation, and CRC forwarding
	*(tse1 + 2) = *(tse1 + 2) | 0x0000005B;	
   80c58:	00c00434 	movhi	r3,16
   80c5c:	18cc0204 	addi	r3,r3,12296
   80c60:	18800017 	ldw	r2,0(r3)
   80c64:	108016d4 	ori	r2,r2,91
   80c68:	18800015 	stw	r2,0(r3)
   80c6c:	003fff06 	br	80c6c <main+0x264>


	}    
	
	return 0;
}
   80c70:	00bfffc4 	movi	r2,-1
   80c74:	dfc00317 	ldw	ra,12(sp)
   80c78:	dc400217 	ldw	r17,8(sp)
   80c7c:	dc000117 	ldw	r16,4(sp)
   80c80:	dec00404 	addi	sp,sp,16
   80c84:	f800283a 	ret

00080c88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   80c88:	deffff04 	addi	sp,sp,-4
   80c8c:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   80c90:	00800234 	movhi	r2,8
   80c94:	109cd004 	addi	r2,r2,29504
   80c98:	00c00234 	movhi	r3,8
   80c9c:	18d40304 	addi	r3,r3,20492
   80ca0:	18801926 	beq	r3,r2,80d08 <alt_load+0x80>
  {
    while( to != end )
   80ca4:	00800234 	movhi	r2,8
   80ca8:	109cd004 	addi	r2,r2,29504
   80cac:	00c00234 	movhi	r3,8
   80cb0:	18d40304 	addi	r3,r3,20492
   80cb4:	18801426 	beq	r3,r2,80d08 <alt_load+0x80>
   80cb8:	00c00234 	movhi	r3,8
   80cbc:	18d40404 	addi	r3,r3,20496
   80cc0:	00800234 	movhi	r2,8
   80cc4:	109cd004 	addi	r2,r2,29504
   80cc8:	10c7c83a 	sub	r3,r2,r3
   80ccc:	1806d0ba 	srli	r3,r3,2
   80cd0:	18c00044 	addi	r3,r3,1
   80cd4:	18c7883a 	add	r3,r3,r3
   80cd8:	18c7883a 	add	r3,r3,r3
   80cdc:	0005883a 	mov	r2,zero
    {
      *to++ = *from++;
   80ce0:	01c00234 	movhi	r7,8
   80ce4:	39d40304 	addi	r7,r7,20492
   80ce8:	01800234 	movhi	r6,8
   80cec:	319cd004 	addi	r6,r6,29504
   80cf0:	11c9883a 	add	r4,r2,r7
   80cf4:	118b883a 	add	r5,r2,r6
   80cf8:	29400017 	ldw	r5,0(r5)
   80cfc:	21400015 	stw	r5,0(r4)
   80d00:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80d04:	10fffa1e 	bne	r2,r3,80cf0 <alt_load+0x68>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   80d08:	00800234 	movhi	r2,8
   80d0c:	10800804 	addi	r2,r2,32
   80d10:	00c00234 	movhi	r3,8
   80d14:	18c00804 	addi	r3,r3,32
   80d18:	18801926 	beq	r3,r2,80d80 <alt_load+0xf8>
  {
    while( to != end )
   80d1c:	00800234 	movhi	r2,8
   80d20:	10805704 	addi	r2,r2,348
   80d24:	00c00234 	movhi	r3,8
   80d28:	18c00804 	addi	r3,r3,32
   80d2c:	18801426 	beq	r3,r2,80d80 <alt_load+0xf8>
   80d30:	00c00234 	movhi	r3,8
   80d34:	18c00904 	addi	r3,r3,36
   80d38:	00800234 	movhi	r2,8
   80d3c:	10805704 	addi	r2,r2,348
   80d40:	10c7c83a 	sub	r3,r2,r3
   80d44:	1806d0ba 	srli	r3,r3,2
   80d48:	18c00044 	addi	r3,r3,1
   80d4c:	18c7883a 	add	r3,r3,r3
   80d50:	18c7883a 	add	r3,r3,r3
   80d54:	0005883a 	mov	r2,zero
    {
      *to++ = *from++;
   80d58:	01c00234 	movhi	r7,8
   80d5c:	39c00804 	addi	r7,r7,32
   80d60:	01800234 	movhi	r6,8
   80d64:	31800804 	addi	r6,r6,32
   80d68:	11c9883a 	add	r4,r2,r7
   80d6c:	118b883a 	add	r5,r2,r6
   80d70:	29400017 	ldw	r5,0(r5)
   80d74:	21400015 	stw	r5,0(r4)
   80d78:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80d7c:	18bffa1e 	bne	r3,r2,80d68 <alt_load+0xe0>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   80d80:	00800234 	movhi	r2,8
   80d84:	10935604 	addi	r2,r2,19800
   80d88:	00c00234 	movhi	r3,8
   80d8c:	18d35604 	addi	r3,r3,19800
   80d90:	18801926 	beq	r3,r2,80df8 <alt_load+0x170>
  {
    while( to != end )
   80d94:	00800234 	movhi	r2,8
   80d98:	10940304 	addi	r2,r2,20492
   80d9c:	00c00234 	movhi	r3,8
   80da0:	18d35604 	addi	r3,r3,19800
   80da4:	18801426 	beq	r3,r2,80df8 <alt_load+0x170>
   80da8:	00c00234 	movhi	r3,8
   80dac:	18d35704 	addi	r3,r3,19804
   80db0:	00800234 	movhi	r2,8
   80db4:	10940304 	addi	r2,r2,20492
   80db8:	10c7c83a 	sub	r3,r2,r3
   80dbc:	1806d0ba 	srli	r3,r3,2
   80dc0:	18c00044 	addi	r3,r3,1
   80dc4:	18c7883a 	add	r3,r3,r3
   80dc8:	18c7883a 	add	r3,r3,r3
   80dcc:	0005883a 	mov	r2,zero
    {
      *to++ = *from++;
   80dd0:	01c00234 	movhi	r7,8
   80dd4:	39d35604 	addi	r7,r7,19800
   80dd8:	01800234 	movhi	r6,8
   80ddc:	31935604 	addi	r6,r6,19800
   80de0:	11c9883a 	add	r4,r2,r7
   80de4:	118b883a 	add	r5,r2,r6
   80de8:	29400017 	ldw	r5,0(r5)
   80dec:	21400015 	stw	r5,0(r4)
   80df0:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80df4:	18bffa1e 	bne	r3,r2,80de0 <alt_load+0x158>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   80df8:	0081e800 	call	81e80 <alt_dcache_flush_all>
  alt_icache_flush_all();
   80dfc:	0081f7c0 	call	81f7c <alt_icache_flush_all>
}
   80e00:	dfc00017 	ldw	ra,0(sp)
   80e04:	dec00104 	addi	sp,sp,4
   80e08:	f800283a 	ret

00080e0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   80e0c:	defffe04 	addi	sp,sp,-8
   80e10:	dfc00115 	stw	ra,4(sp)
   80e14:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   80e18:	0009883a 	mov	r4,zero
   80e1c:	00810900 	call	81090 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   80e20:	00810b00 	call	810b0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   80e24:	01000234 	movhi	r4,8
   80e28:	2113fb04 	addi	r4,r4,20460
   80e2c:	200d883a 	mov	r6,r4
   80e30:	200b883a 	mov	r5,r4
   80e34:	00821140 	call	82114 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   80e38:	d1a8e317 	ldw	r6,-23668(gp)
   80e3c:	d168e417 	ldw	r5,-23664(gp)
   80e40:	d128e517 	ldw	r4,-23660(gp)
   80e44:	0080a080 	call	80a08 <main>
   80e48:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
   80e4c:	01000044 	movi	r4,1
   80e50:	0081dc40 	call	81dc4 <close>
  exit (result);
   80e54:	8009883a 	mov	r4,r16
   80e58:	00825e80 	call	825e8 <exit>

00080e5c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   80e5c:	defff304 	addi	sp,sp,-52
   80e60:	dfc00915 	stw	ra,36(sp)
   80e64:	df000815 	stw	fp,32(sp)
   80e68:	ddc00715 	stw	r23,28(sp)
   80e6c:	dd800615 	stw	r22,24(sp)
   80e70:	dd400515 	stw	r21,20(sp)
   80e74:	dd000415 	stw	r20,16(sp)
   80e78:	dcc00315 	stw	r19,12(sp)
   80e7c:	dc800215 	stw	r18,8(sp)
   80e80:	dc400115 	stw	r17,4(sp)
   80e84:	dc000015 	stw	r16,0(sp)
   80e88:	2021883a 	mov	r16,r4
   80e8c:	d9400a15 	stw	r5,40(sp)
   80e90:	d9800b15 	stw	r6,44(sp)
   80e94:	d9c00c15 	stw	r7,48(sp)
	va_list args;
	va_start(args, fmt);
   80e98:	dd800a04 	addi	r22,sp,40
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   80e9c:	04800944 	movi	r18,37
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   80ea0:	05c018c4 	movi	r23,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   80ea4:	07001e04 	movi	fp,120
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   80ea8:	04c003c4 	movi	r19,15
                        if (digit <= 9)
   80eac:	05400244 	movi	r21,9
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   80eb0:	00005e06 	br	8102c <alt_printf+0x1d0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   80eb4:	20803fcc 	andi	r2,r4,255
   80eb8:	1080201c 	xori	r2,r2,128
   80ebc:	10bfe004 	addi	r2,r2,-128
   80ec0:	14800426 	beq	r2,r18,80ed4 <alt_printf+0x78>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   80ec4:	84000044 	addi	r16,r16,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
        {
            alt_putchar(c);
   80ec8:	1009883a 	mov	r4,r2
   80ecc:	00810700 	call	81070 <alt_putchar>
   80ed0:	00005606 	br	8102c <alt_printf+0x1d0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   80ed4:	85000084 	addi	r20,r16,2
   80ed8:	80800043 	ldbu	r2,1(r16)
   80edc:	10c03fcc 	andi	r3,r2,255
   80ee0:	18c0201c 	xori	r3,r3,128
   80ee4:	18ffe004 	addi	r3,r3,-128
   80ee8:	18005526 	beq	r3,zero,81040 <alt_printf+0x1e4>
            {
                if (c == '%')
   80eec:	1c80041e 	bne	r3,r18,80f00 <alt_printf+0xa4>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   80ef0:	9009883a 	mov	r4,r18
   80ef4:	00810700 	call	81070 <alt_putchar>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   80ef8:	a021883a 	mov	r16,r20
   80efc:	00004b06 	br	8102c <alt_printf+0x1d0>
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   80f00:	10c03fcc 	andi	r3,r2,255
   80f04:	18c0201c 	xori	r3,r3,128
   80f08:	18ffe004 	addi	r3,r3,-128
   80f0c:	1dc0061e 	bne	r3,r23,80f28 <alt_printf+0xcc>
                {
                    int v = va_arg(args, int);
   80f10:	b4000104 	addi	r16,r22,4
                    alt_putchar(v);
   80f14:	b1000017 	ldw	r4,0(r22)
   80f18:	00810700 	call	81070 <alt_putchar>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   80f1c:	802d883a 	mov	r22,r16
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   80f20:	a021883a 	mov	r16,r20
   80f24:	00004106 	br	8102c <alt_printf+0x1d0>
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   80f28:	10c03fcc 	andi	r3,r2,255
   80f2c:	18c0201c 	xori	r3,r3,128
   80f30:	18ffe004 	addi	r3,r3,-128
   80f34:	1f00201e 	bne	r3,fp,80fb8 <alt_printf+0x15c>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   80f38:	b4400017 	ldw	r17,0(r22)
   80f3c:	b5800104 	addi	r22,r22,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   80f40:	88000426 	beq	r17,zero,80f54 <alt_printf+0xf8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   80f44:	88bc002c 	andhi	r2,r17,61440
   80f48:	10000626 	beq	r2,zero,80f64 <alt_printf+0x108>
   80f4c:	04000704 	movi	r16,28
   80f50:	00000a06 	br	80f7c <alt_printf+0x120>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   80f54:	01000c04 	movi	r4,48
   80f58:	00810700 	call	81070 <alt_putchar>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   80f5c:	a021883a 	mov	r16,r20

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
                        continue;
   80f60:	00003206 	br	8102c <alt_printf+0x1d0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   80f64:	04000704 	movi	r16,28
                        digit_shift -= 4;
   80f68:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   80f6c:	9c04983a 	sll	r2,r19,r16
   80f70:	1444703a 	and	r2,r2,r17
   80f74:	103ffc26 	beq	r2,zero,80f68 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80f78:	80002716 	blt	r16,zero,81018 <alt_printf+0x1bc>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   80f7c:	9c08983a 	sll	r4,r19,r16
   80f80:	2448703a 	and	r4,r4,r17
   80f84:	2408d83a 	srl	r4,r4,r16
                        if (digit <= 9)
   80f88:	a9000236 	bltu	r21,r4,80f94 <alt_printf+0x138>
                            c = '0' + digit;
   80f8c:	21000c04 	addi	r4,r4,48
   80f90:	00000106 	br	80f98 <alt_printf+0x13c>
                        else
                            c = 'a' + digit - 10;
   80f94:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   80f98:	21003fcc 	andi	r4,r4,255
   80f9c:	2100201c 	xori	r4,r4,128
   80fa0:	213fe004 	addi	r4,r4,-128
   80fa4:	00810700 	call	81070 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80fa8:	843fff04 	addi	r16,r16,-4
   80fac:	803ff30e 	bge	r16,zero,80f7c <alt_printf+0x120>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   80fb0:	a021883a 	mov	r16,r20
   80fb4:	00001d06 	br	8102c <alt_printf+0x1d0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   80fb8:	10803fcc 	andi	r2,r2,255
   80fbc:	1080201c 	xori	r2,r2,128
   80fc0:	10bfe004 	addi	r2,r2,-128
   80fc4:	00c01cc4 	movi	r3,115
   80fc8:	10c0151e 	bne	r2,r3,81020 <alt_printf+0x1c4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   80fcc:	b4000017 	ldw	r16,0(r22)
   80fd0:	b5800104 	addi	r22,r22,4

                    while(*s)
   80fd4:	81000003 	ldbu	r4,0(r16)
   80fd8:	20803fcc 	andi	r2,r4,255
   80fdc:	1080201c 	xori	r2,r2,128
   80fe0:	10bfe004 	addi	r2,r2,-128
   80fe4:	10001026 	beq	r2,zero,81028 <alt_printf+0x1cc>
                      alt_putchar(*s++);
   80fe8:	84000044 	addi	r16,r16,1
   80fec:	21003fcc 	andi	r4,r4,255
   80ff0:	2100201c 	xori	r4,r4,128
   80ff4:	213fe004 	addi	r4,r4,-128
   80ff8:	00810700 	call	81070 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   80ffc:	81000003 	ldbu	r4,0(r16)
   81000:	20803fcc 	andi	r2,r4,255
   81004:	1080201c 	xori	r2,r2,128
   81008:	10bfe004 	addi	r2,r2,-128
   8100c:	103ff61e 	bne	r2,zero,80fe8 <alt_printf+0x18c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   81010:	a021883a 	mov	r16,r20
   81014:	00000506 	br	8102c <alt_printf+0x1d0>
   81018:	a021883a 	mov	r16,r20
   8101c:	00000306 	br	8102c <alt_printf+0x1d0>
   81020:	a021883a 	mov	r16,r20
   81024:	00000106 	br	8102c <alt_printf+0x1d0>
   81028:	a021883a 	mov	r16,r20
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   8102c:	81000003 	ldbu	r4,0(r16)
   81030:	20803fcc 	andi	r2,r4,255
   81034:	1080201c 	xori	r2,r2,128
   81038:	10bfe004 	addi	r2,r2,-128
   8103c:	103f9d1e 	bne	r2,zero,80eb4 <alt_printf+0x58>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   81040:	dfc00917 	ldw	ra,36(sp)
   81044:	df000817 	ldw	fp,32(sp)
   81048:	ddc00717 	ldw	r23,28(sp)
   8104c:	dd800617 	ldw	r22,24(sp)
   81050:	dd400517 	ldw	r21,20(sp)
   81054:	dd000417 	ldw	r20,16(sp)
   81058:	dcc00317 	ldw	r19,12(sp)
   8105c:	dc800217 	ldw	r18,8(sp)
   81060:	dc400117 	ldw	r17,4(sp)
   81064:	dc000017 	ldw	r16,0(sp)
   81068:	dec00d04 	addi	sp,sp,52
   8106c:	f800283a 	ret

00081070 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   81070:	deffff04 	addi	sp,sp,-4
   81074:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   81078:	d0a00c17 	ldw	r2,-32720(gp)
   8107c:	11400217 	ldw	r5,8(r2)
   81080:	00828840 	call	82884 <putc>
#endif
#endif
}
   81084:	dfc00017 	ldw	ra,0(sp)
   81088:	dec00104 	addi	sp,sp,4
   8108c:	f800283a 	ret

00081090 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   81090:	deffff04 	addi	sp,sp,-4
   81094:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   81098:	00824600 	call	82460 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8109c:	00800044 	movi	r2,1
   810a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   810a4:	dfc00017 	ldw	ra,0(sp)
   810a8:	dec00104 	addi	sp,sp,4
   810ac:	f800283a 	ret

000810b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   810b0:	defffe04 	addi	sp,sp,-8
   810b4:	dfc00115 	stw	ra,4(sp)
   810b8:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   810bc:	04000234 	movhi	r16,8
   810c0:	84163d04 	addi	r16,r16,22772
   810c4:	000d883a 	mov	r6,zero
   810c8:	000b883a 	mov	r5,zero
   810cc:	8009883a 	mov	r4,r16
   810d0:	008131c0 	call	8131c <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   810d4:	d1600304 	addi	r5,gp,-32756
   810d8:	813ff604 	addi	r4,r16,-40
   810dc:	0081e8c0 	call	81e8c <alt_dev_llist_insert>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX0, sgdma_rx0);
   810e0:	01800044 	movi	r6,1
   810e4:	000b883a 	mov	r5,zero
   810e8:	01000234 	movhi	r4,8
   810ec:	21162704 	addi	r4,r4,22684
   810f0:	0081cc00 	call	81cc0 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX1, sgdma_rx1);
   810f4:	018000c4 	movi	r6,3
   810f8:	000b883a 	mov	r5,zero
   810fc:	01000234 	movhi	r4,8
   81100:	21161b04 	addi	r4,r4,22636
   81104:	0081cc00 	call	81cc0 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX0, sgdma_tx0);
   81108:	01800084 	movi	r6,2
   8110c:	000b883a 	mov	r5,zero
   81110:	01000234 	movhi	r4,8
   81114:	21160f04 	addi	r4,r4,22588
   81118:	0081cc00 	call	81cc0 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX1, sgdma_tx1);
   8111c:	01800104 	movi	r6,4
   81120:	000b883a 	mov	r5,zero
   81124:	01000234 	movhi	r4,8
   81128:	21160304 	addi	r4,r4,22540
   8112c:	0081cc00 	call	81cc0 <alt_avalon_sgdma_init>
    ALTERA_ETH_TSE_INIT ( TSE0, tse0);
    ALTERA_ETH_TSE_INIT ( TSE1, tse1);
}
   81130:	dfc00117 	ldw	ra,4(sp)
   81134:	dc000017 	ldw	r16,0(sp)
   81138:	dec00204 	addi	sp,sp,8
   8113c:	f800283a 	ret

00081140 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   81140:	deffff04 	addi	sp,sp,-4
   81144:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   81148:	20800017 	ldw	r2,0(r4)
   8114c:	21c00217 	ldw	r7,8(r4)
   81150:	11000a04 	addi	r4,r2,40
   81154:	00814580 	call	81458 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   81158:	dfc00017 	ldw	ra,0(sp)
   8115c:	dec00104 	addi	sp,sp,4
   81160:	f800283a 	ret

00081164 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   81164:	deffff04 	addi	sp,sp,-4
   81168:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8116c:	20800017 	ldw	r2,0(r4)
   81170:	21c00217 	ldw	r7,8(r4)
   81174:	11000a04 	addi	r4,r2,40
   81178:	00815b00 	call	815b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8117c:	dfc00017 	ldw	ra,0(sp)
   81180:	dec00104 	addi	sp,sp,4
   81184:	f800283a 	ret

00081188 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   81188:	deffff04 	addi	sp,sp,-4
   8118c:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   81190:	20800017 	ldw	r2,0(r4)
   81194:	21400217 	ldw	r5,8(r4)
   81198:	11000a04 	addi	r4,r2,40
   8119c:	00813940 	call	81394 <altera_avalon_jtag_uart_close>
}
   811a0:	dfc00017 	ldw	ra,0(sp)
   811a4:	dec00104 	addi	sp,sp,4
   811a8:	f800283a 	ret

000811ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   811ac:	deffff04 	addi	sp,sp,-4
   811b0:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   811b4:	21000017 	ldw	r4,0(r4)
   811b8:	21000a04 	addi	r4,r4,40
   811bc:	00813d00 	call	813d0 <altera_avalon_jtag_uart_ioctl>
}
   811c0:	dfc00017 	ldw	ra,0(sp)
   811c4:	dec00104 	addi	sp,sp,4
   811c8:	f800283a 	ret

000811cc <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   811cc:	20800017 	ldw	r2,0(r4)
   811d0:	10800137 	ldwio	r2,4(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   811d4:	1081000c 	andi	r2,r2,1024
   811d8:	10000626 	beq	r2,zero,811f4 <altera_avalon_jtag_uart_timeout+0x28>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   811dc:	20c00017 	ldw	r3,0(r4)
   811e0:	20800817 	ldw	r2,32(r4)
   811e4:	10810014 	ori	r2,r2,1024
   811e8:	18800135 	stwio	r2,4(r3)
    sp->host_inactive = 0;
   811ec:	20000915 	stw	zero,36(r4)
   811f0:	00000606 	br	8120c <altera_avalon_jtag_uart_timeout+0x40>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   811f4:	20800917 	ldw	r2,36(r4)
   811f8:	00e00034 	movhi	r3,32768
   811fc:	18ffff04 	addi	r3,r3,-4
   81200:	18800236 	bltu	r3,r2,8120c <altera_avalon_jtag_uart_timeout+0x40>
    sp->host_inactive++;
   81204:	10800044 	addi	r2,r2,1
   81208:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8120c:	d0a8e817 	ldw	r2,-23648(gp)
   81210:	f800283a 	ret

00081214 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   81214:	21800017 	ldw	r6,0(r4)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   81218:	32000104 	addi	r8,r6,4
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8121c:	02bfff84 	movi	r10,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   81220:	02ffff44 	movi	r11,-3
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   81224:	4013883a 	mov	r9,r8
   81228:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8122c:	3880c00c 	andi	r2,r7,768
   81230:	10003926 	beq	r2,zero,81318 <altera_avalon_jtag_uart_irq+0x104>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   81234:	3880400c 	andi	r2,r7,256
   81238:	10001c26 	beq	r2,zero,812ac <altera_avalon_jtag_uart_irq+0x98>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8123c:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   81240:	10800044 	addi	r2,r2,1
   81244:	1081ffcc 	andi	r2,r2,2047
   81248:	20c00b17 	ldw	r3,44(r4)
   8124c:	10c01226 	beq	r2,r3,81298 <altera_avalon_jtag_uart_irq+0x84>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   81250:	30800037 	ldwio	r2,0(r6)
   81254:	100b883a 	mov	r5,r2
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   81258:	10e0000c 	andi	r3,r2,32768
   8125c:	18000c26 	beq	r3,zero,81290 <altera_avalon_jtag_uart_irq+0x7c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   81260:	20c00a17 	ldw	r3,40(r4)
   81264:	20c7883a 	add	r3,r4,r3
   81268:	18800e05 	stb	r2,56(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8126c:	20800a17 	ldw	r2,40(r4)
   81270:	10800044 	addi	r2,r2,1
   81274:	1081ffcc 	andi	r2,r2,2047
   81278:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8127c:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   81280:	10800044 	addi	r2,r2,1
   81284:	1081ffcc 	andi	r2,r2,2047
   81288:	20c00b17 	ldw	r3,44(r4)
   8128c:	10fff01e 	bne	r2,r3,81250 <altera_avalon_jtag_uart_irq+0x3c>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   81290:	297fffec 	andhi	r5,r5,65535
   81294:	28000526 	beq	r5,zero,812ac <altera_avalon_jtag_uart_irq+0x98>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   81298:	20800817 	ldw	r2,32(r4)
   8129c:	1284703a 	and	r2,r2,r10
   812a0:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   812a4:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   812a8:	40800037 	ldwio	r2,0(r8)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   812ac:	3880800c 	andi	r2,r7,512
   812b0:	103fdc26 	beq	r2,zero,81224 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   812b4:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   812b8:	383fda26 	beq	r7,zero,81224 <altera_avalon_jtag_uart_irq+0x10>
   812bc:	20c00d17 	ldw	r3,52(r4)
   812c0:	20800c17 	ldw	r2,48(r4)
   812c4:	18800d26 	beq	r3,r2,812fc <altera_avalon_jtag_uart_irq+0xe8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   812c8:	20800d17 	ldw	r2,52(r4)
   812cc:	2085883a 	add	r2,r4,r2
   812d0:	10820e07 	ldb	r2,2104(r2)
   812d4:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   812d8:	20800d17 	ldw	r2,52(r4)
   812dc:	10800044 	addi	r2,r2,1
   812e0:	1081ffcc 	andi	r2,r2,2047
   812e4:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   812e8:	39ffffc4 	addi	r7,r7,-1
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   812ec:	383fcd26 	beq	r7,zero,81224 <altera_avalon_jtag_uart_irq+0x10>
   812f0:	20c00d17 	ldw	r3,52(r4)
   812f4:	20800c17 	ldw	r2,48(r4)
   812f8:	18bff31e 	bne	r3,r2,812c8 <altera_avalon_jtag_uart_irq+0xb4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   812fc:	20800817 	ldw	r2,32(r4)
   81300:	12c4703a 	and	r2,r2,r11
   81304:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   81308:	20c00017 	ldw	r3,0(r4)
   8130c:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   81310:	48800037 	ldwio	r2,0(r9)
   81314:	003fc306 	br	81224 <altera_avalon_jtag_uart_irq+0x10>
   81318:	f800283a 	ret

0008131c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8131c:	defffd04 	addi	sp,sp,-12
   81320:	dfc00215 	stw	ra,8(sp)
   81324:	dc000115 	stw	r16,4(sp)
   81328:	2021883a 	mov	r16,r4
   8132c:	2809883a 	mov	r4,r5
   81330:	300b883a 	mov	r5,r6
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   81334:	00800044 	movi	r2,1
   81338:	80800815 	stw	r2,32(r16)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8133c:	80c00017 	ldw	r3,0(r16)
   81340:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   81344:	d8000015 	stw	zero,0(sp)
   81348:	800f883a 	mov	r7,r16
   8134c:	01800234 	movhi	r6,8
   81350:	31848504 	addi	r6,r6,4628
   81354:	0081f9c0 	call	81f9c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   81358:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8135c:	800f883a 	mov	r7,r16
   81360:	01800234 	movhi	r6,8
   81364:	31847304 	addi	r6,r6,4556
   81368:	d168e817 	ldw	r5,-23648(gp)
   8136c:	81000204 	addi	r4,r16,8
   81370:	0081d440 	call	81d44 <alt_alarm_start>
   81374:	1000030e 	bge	r2,zero,81384 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   81378:	00a00034 	movhi	r2,32768
   8137c:	10bfffc4 	addi	r2,r2,-1
   81380:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   81384:	dfc00217 	ldw	ra,8(sp)
   81388:	dc000117 	ldw	r16,4(sp)
   8138c:	dec00304 	addi	sp,sp,12
   81390:	f800283a 	ret

00081394 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   81394:	21800c17 	ldw	r6,48(r4)
    if (flags & O_NONBLOCK) {
   81398:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8139c:	00000106 	br	813a4 <altera_avalon_jtag_uart_close+0x10>
    if (flags & O_NONBLOCK) {
   813a0:	2800071e 	bne	r5,zero,813c0 <altera_avalon_jtag_uart_close+0x2c>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   813a4:	20800d17 	ldw	r2,52(r4)
   813a8:	11800726 	beq	r2,r6,813c8 <altera_avalon_jtag_uart_close+0x34>
   813ac:	20c00917 	ldw	r3,36(r4)
   813b0:	20800117 	ldw	r2,4(r4)
   813b4:	18bffa36 	bltu	r3,r2,813a0 <altera_avalon_jtag_uart_close+0xc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   813b8:	0005883a 	mov	r2,zero
   813bc:	f800283a 	ret
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
   813c0:	00bffd44 	movi	r2,-11
   813c4:	f800283a 	ret
    }
  }

  return 0;
   813c8:	0005883a 	mov	r2,zero
}
   813cc:	f800283a 	ret

000813d0 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   813d0:	009a8044 	movi	r2,27137
   813d4:	28800326 	beq	r5,r2,813e4 <altera_avalon_jtag_uart_ioctl+0x14>
   813d8:	009a8084 	movi	r2,27138
   813dc:	28800f26 	beq	r5,r2,8141c <altera_avalon_jtag_uart_ioctl+0x4c>
   813e0:	00001706 	br	81440 <altera_avalon_jtag_uart_ioctl+0x70>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   813e4:	20c00117 	ldw	r3,4(r4)
   813e8:	00a00034 	movhi	r2,32768
   813ec:	10bfffc4 	addi	r2,r2,-1
   813f0:	18801526 	beq	r3,r2,81448 <altera_avalon_jtag_uart_ioctl+0x78>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   813f4:	30800017 	ldw	r2,0(r6)
   813f8:	10ffff84 	addi	r3,r2,-2
   813fc:	01600034 	movhi	r5,32768
   81400:	297fff04 	addi	r5,r5,-4
   81404:	28c0022e 	bgeu	r5,r3,81410 <altera_avalon_jtag_uart_ioctl+0x40>
   81408:	00a00034 	movhi	r2,32768
   8140c:	10bfff84 	addi	r2,r2,-2
   81410:	20800115 	stw	r2,4(r4)
      rc = 0;
   81414:	0005883a 	mov	r2,zero
   81418:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8141c:	20c00117 	ldw	r3,4(r4)
   81420:	00a00034 	movhi	r2,32768
   81424:	10bfffc4 	addi	r2,r2,-1
   81428:	18800926 	beq	r3,r2,81450 <altera_avalon_jtag_uart_ioctl+0x80>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8142c:	20800917 	ldw	r2,36(r4)
   81430:	10c5803a 	cmpltu	r2,r2,r3
   81434:	30800015 	stw	r2,0(r6)
      rc = 0;
   81438:	0005883a 	mov	r2,zero
   8143c:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
   81440:	00bff9c4 	movi	r2,-25
   81444:	f800283a 	ret
   81448:	00bff9c4 	movi	r2,-25
   8144c:	f800283a 	ret
   81450:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
   81454:	f800283a 	ret

00081458 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   81458:	0180450e 	bge	zero,r6,81570 <altera_avalon_jtag_uart_read+0x118>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8145c:	defff504 	addi	sp,sp,-44
   81460:	dfc00a15 	stw	ra,40(sp)
   81464:	df000915 	stw	fp,36(sp)
   81468:	ddc00815 	stw	r23,32(sp)
   8146c:	dd800715 	stw	r22,28(sp)
   81470:	dd400615 	stw	r21,24(sp)
   81474:	dd000515 	stw	r20,20(sp)
   81478:	dcc00415 	stw	r19,16(sp)
   8147c:	dc800315 	stw	r18,12(sp)
   81480:	dc400215 	stw	r17,8(sp)
   81484:	dc000115 	stw	r16,4(sp)
   81488:	2023883a 	mov	r17,r4
   8148c:	2839883a 	mov	fp,r5
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   81490:	05c20004 	movi	r23,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   81494:	25800e04 	addi	r22,r4,56
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   81498:	39d0000c 	andi	r7,r7,16384
   8149c:	d9c00015 	stw	r7,0(sp)
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   814a0:	e029883a 	mov	r20,fp
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   814a4:	8cc00a17 	ldw	r19,40(r17)
      out = sp->rx_out;
   814a8:	8c800b17 	ldw	r18,44(r17)

      if (in >= out)
   814ac:	9c800236 	bltu	r19,r18,814b8 <altera_avalon_jtag_uart_read+0x60>
        n = in - out;
   814b0:	9ca1c83a 	sub	r16,r19,r18
   814b4:	00000106 	br	814bc <altera_avalon_jtag_uart_read+0x64>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   814b8:	bca1c83a 	sub	r16,r23,r18

      if (n == 0)
   814bc:	80000d26 	beq	r16,zero,814f4 <altera_avalon_jtag_uart_read+0x9c>
        break; /* No more data available */

      if (n > space)
   814c0:	302b883a 	mov	r21,r6
   814c4:	3400012e 	bgeu	r6,r16,814cc <altera_avalon_jtag_uart_read+0x74>
   814c8:	3021883a 	mov	r16,r6
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   814cc:	800d883a 	mov	r6,r16
   814d0:	b48b883a 	add	r5,r22,r18
   814d4:	a009883a 	mov	r4,r20
   814d8:	008269c0 	call	8269c <memcpy>
      ptr   += n;
   814dc:	a429883a 	add	r20,r20,r16
      space -= n;
   814e0:	ac0dc83a 	sub	r6,r21,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   814e4:	9421883a 	add	r16,r18,r16
   814e8:	8401ffcc 	andi	r16,r16,2047
   814ec:	8c000b15 	stw	r16,44(r17)
    }
    while (space > 0);
   814f0:	01bfec16 	blt	zero,r6,814a4 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
   814f4:	a700121e 	bne	r20,fp,81540 <altera_avalon_jtag_uart_read+0xe8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   814f8:	d8800017 	ldw	r2,0(sp)
   814fc:	10000a1e 	bne	r2,zero,81528 <altera_avalon_jtag_uart_read+0xd0>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   81500:	88800a17 	ldw	r2,40(r17)
   81504:	9880031e 	bne	r19,r2,81514 <altera_avalon_jtag_uart_read+0xbc>
   81508:	88c00917 	ldw	r3,36(r17)
   8150c:	88800117 	ldw	r2,4(r17)
   81510:	18bffb36 	bltu	r3,r2,81500 <altera_avalon_jtag_uart_read+0xa8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   81514:	88800a17 	ldw	r2,40(r17)
   81518:	98800526 	beq	r19,r2,81530 <altera_avalon_jtag_uart_read+0xd8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8151c:	01bfe016 	blt	zero,r6,814a0 <altera_avalon_jtag_uart_read+0x48>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
   81520:	00bffec4 	movi	r2,-5
   81524:	00001606 	br	81580 <altera_avalon_jtag_uart_read+0x128>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   81528:	00bffd44 	movi	r2,-11
   8152c:	00001406 	br	81580 <altera_avalon_jtag_uart_read+0x128>
  else
    return -EIO;
   81530:	00bffec4 	movi	r2,-5
   81534:	00001206 	br	81580 <altera_avalon_jtag_uart_read+0x128>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   81538:	00bffd44 	movi	r2,-11
   8153c:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81540:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81544:	00bfff84 	movi	r2,-2
   81548:	1884703a 	and	r2,r3,r2
   8154c:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   81550:	88800817 	ldw	r2,32(r17)
   81554:	10800054 	ori	r2,r2,1
   81558:	88800815 	stw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8155c:	89000017 	ldw	r4,0(r17)
   81560:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81564:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   81568:	a705c83a 	sub	r2,r20,fp
   8156c:	00000406 	br	81580 <altera_avalon_jtag_uart_read+0x128>
  else if (flags & O_NONBLOCK)
   81570:	39d0000c 	andi	r7,r7,16384
   81574:	383ff01e 	bne	r7,zero,81538 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
  else
    return -EIO;
   81578:	00bffec4 	movi	r2,-5
   8157c:	f800283a 	ret
}
   81580:	dfc00a17 	ldw	ra,40(sp)
   81584:	df000917 	ldw	fp,36(sp)
   81588:	ddc00817 	ldw	r23,32(sp)
   8158c:	dd800717 	ldw	r22,28(sp)
   81590:	dd400617 	ldw	r21,24(sp)
   81594:	dd000517 	ldw	r20,20(sp)
   81598:	dcc00417 	ldw	r19,16(sp)
   8159c:	dc800317 	ldw	r18,12(sp)
   815a0:	dc400217 	ldw	r17,8(sp)
   815a4:	dc000117 	ldw	r16,4(sp)
   815a8:	dec00b04 	addi	sp,sp,44
   815ac:	f800283a 	ret

000815b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   815b0:	defff504 	addi	sp,sp,-44
   815b4:	dfc00a15 	stw	ra,40(sp)
   815b8:	df000915 	stw	fp,36(sp)
   815bc:	ddc00815 	stw	r23,32(sp)
   815c0:	dd800715 	stw	r22,28(sp)
   815c4:	dd400615 	stw	r21,24(sp)
   815c8:	dd000515 	stw	r20,20(sp)
   815cc:	dcc00415 	stw	r19,16(sp)
   815d0:	dc800315 	stw	r18,12(sp)
   815d4:	dc400215 	stw	r17,8(sp)
   815d8:	dc000115 	stw	r16,4(sp)
   815dc:	2021883a 	mov	r16,r4
   815e0:	282f883a 	mov	r23,r5
   815e4:	d9c00015 	stw	r7,0(sp)
   815e8:	2827883a 	mov	r19,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   815ec:	05bfff84 	movi	r22,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   815f0:	3d50000c 	andi	r21,r7,16384
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   815f4:	27020e04 	addi	fp,r4,2104
   815f8:	00001906 	br	81660 <altera_avalon_jtag_uart_write+0xb0>
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   815fc:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
   81600:	81000d17 	ldw	r4,52(r16)

      if (in < out)
   81604:	9100032e 	bgeu	r18,r4,81614 <altera_avalon_jtag_uart_write+0x64>
        n = out - 1 - in;
   81608:	247fffc4 	addi	r17,r4,-1
   8160c:	8ca3c83a 	sub	r17,r17,r18
   81610:	00000606 	br	8162c <altera_avalon_jtag_uart_write+0x7c>
      else if (out > 0)
   81614:	20000326 	beq	r4,zero,81624 <altera_avalon_jtag_uart_write+0x74>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   81618:	00820004 	movi	r2,2048
   8161c:	14a3c83a 	sub	r17,r2,r18
   81620:	00000206 	br	8162c <altera_avalon_jtag_uart_write+0x7c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   81624:	00c1ffc4 	movi	r3,2047
   81628:	1ca3c83a 	sub	r17,r3,r18

      if (n == 0)
   8162c:	88002b26 	beq	r17,zero,816dc <altera_avalon_jtag_uart_write+0x12c>
        break;

      if (n > count)
   81630:	3029883a 	mov	r20,r6
   81634:	3440012e 	bgeu	r6,r17,8163c <altera_avalon_jtag_uart_write+0x8c>
   81638:	3023883a 	mov	r17,r6
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   8163c:	880d883a 	mov	r6,r17
   81640:	980b883a 	mov	r5,r19
   81644:	e489883a 	add	r4,fp,r18
   81648:	008269c0 	call	8269c <memcpy>
      ptr   += n;
   8164c:	9c67883a 	add	r19,r19,r17
      count -= n;
   81650:	a44dc83a 	sub	r6,r20,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81654:	9463883a 	add	r17,r18,r17
   81658:	8c41ffcc 	andi	r17,r17,2047
   8165c:	84400c15 	stw	r17,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   81660:	01bfe616 	blt	zero,r6,815fc <altera_avalon_jtag_uart_write+0x4c>
   81664:	00001106 	br	816ac <altera_avalon_jtag_uart_write+0xfc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   81668:	80800d17 	ldw	r2,52(r16)
   8166c:	2080031e 	bne	r4,r2,8167c <altera_avalon_jtag_uart_write+0xcc>
   81670:	80c00917 	ldw	r3,36(r16)
   81674:	80800117 	ldw	r2,4(r16)
   81678:	18bffb36 	bltu	r3,r2,81668 <altera_avalon_jtag_uart_write+0xb8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   8167c:	80800917 	ldw	r2,36(r16)
   81680:	103ff726 	beq	r2,zero,81660 <altera_avalon_jtag_uart_write+0xb0>
   81684:	00002006 	br	81708 <altera_avalon_jtag_uart_write+0x158>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
   81688:	9dc5c83a 	sub	r2,r19,r23
   8168c:	00002306 	br	8171c <altera_avalon_jtag_uart_write+0x16c>
  else if (flags & O_NONBLOCK)
   81690:	d8c00017 	ldw	r3,0(sp)
   81694:	1890000c 	andi	r2,r3,16384
   81698:	1000021e 	bne	r2,zero,816a4 <altera_avalon_jtag_uart_write+0xf4>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8169c:	00bffec4 	movi	r2,-5
   816a0:	00001e06 	br	8171c <altera_avalon_jtag_uart_write+0x16c>
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   816a4:	00bffd44 	movi	r2,-11
   816a8:	00001c06 	br	8171c <altera_avalon_jtag_uart_write+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   816ac:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   816b0:	00bfff84 	movi	r2,-2
   816b4:	1884703a 	and	r2,r3,r2
   816b8:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   816bc:	80800817 	ldw	r2,32(r16)
   816c0:	10800094 	ori	r2,r2,2
   816c4:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   816c8:	81000017 	ldw	r4,0(r16)
   816cc:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   816d0:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   816d4:	9dffec1e 	bne	r19,r23,81688 <altera_avalon_jtag_uart_write+0xd8>
   816d8:	003fed06 	br	81690 <altera_avalon_jtag_uart_write+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   816dc:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   816e0:	1d84703a 	and	r2,r3,r22
   816e4:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   816e8:	80800817 	ldw	r2,32(r16)
   816ec:	10800094 	ori	r2,r2,2
   816f0:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   816f4:	81400017 	ldw	r5,0(r16)
   816f8:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   816fc:	1801703a 	wrctl	status,r3
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   81700:	a83fd926 	beq	r21,zero,81668 <altera_avalon_jtag_uart_write+0xb8>
   81704:	00000306 	br	81714 <altera_avalon_jtag_uart_write+0x164>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   81708:	9dffdf1e 	bne	r19,r23,81688 <altera_avalon_jtag_uart_write+0xd8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8170c:	00bffec4 	movi	r2,-5
   81710:	00000206 	br	8171c <altera_avalon_jtag_uart_write+0x16c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   81714:	9dffdc1e 	bne	r19,r23,81688 <altera_avalon_jtag_uart_write+0xd8>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   81718:	00bffd44 	movi	r2,-11
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
   8171c:	dfc00a17 	ldw	ra,40(sp)
   81720:	df000917 	ldw	fp,36(sp)
   81724:	ddc00817 	ldw	r23,32(sp)
   81728:	dd800717 	ldw	r22,28(sp)
   8172c:	dd400617 	ldw	r21,24(sp)
   81730:	dd000517 	ldw	r20,20(sp)
   81734:	dcc00417 	ldw	r19,16(sp)
   81738:	dc800317 	ldw	r18,12(sp)
   8173c:	dc400217 	ldw	r17,8(sp)
   81740:	dc000117 	ldw	r16,4(sp)
   81744:	dec00b04 	addi	sp,sp,44
   81748:	f800283a 	ret

0008174c <alt_avalon_sgdma_irq>:
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   8174c:	20800317 	ldw	r2,12(r4)
   81750:	10800404 	addi	r2,r2,16
   81754:	10c00037 	ldwio	r3,0(r2)
   81758:	18e00034 	orhi	r3,r3,32768
   8175c:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81760:	20800317 	ldw	r2,12(r4)
   81764:	10800437 	ldwio	r2,16(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   81768:	20800917 	ldw	r2,36(r4)
   8176c:	10000e26 	beq	r2,zero,817a8 <alt_avalon_sgdma_irq+0x5c>
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   81770:	defffe04 	addi	sp,sp,-8
   81774:	dfc00115 	stw	ra,4(sp)
   81778:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8177c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81780:	00bfff84 	movi	r2,-2
   81784:	8084703a 	and	r2,r16,r2
   81788:	1001703a 	wrctl	status,r2
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
    cpu_sr = alt_irq_disable_all();
    (dev->callback)(dev->callback_context);
   8178c:	20800917 	ldw	r2,36(r4)
   81790:	21000a17 	ldw	r4,40(r4)
   81794:	103ee83a 	callr	r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81798:	8001703a 	wrctl	status,r16
    alt_irq_enable_all(cpu_sr);
  }
}
   8179c:	dfc00117 	ldw	ra,4(sp)
   817a0:	dc000017 	ldw	r16,0(sp)
   817a4:	dec00204 	addi	sp,sp,8
   817a8:	f800283a 	ret

000817ac <alt_avalon_sgdma_do_async_transfer>:
  alt_sgdma_descriptor *desc)
{
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   817ac:	20800317 	ldw	r2,12(r4)
   817b0:	10800037 	ldwio	r2,0(r2)
   817b4:	1080040c 	andi	r2,r2,16
   817b8:	10001d1e 	bne	r2,zero,81830 <alt_avalon_sgdma_do_async_transfer+0x84>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   817bc:	20c00317 	ldw	r3,12(r4)
   817c0:	18c00404 	addi	r3,r3,16
   817c4:	19c00037 	ldwio	r7,0(r3)
   817c8:	01bff7c4 	movi	r6,-33
   817cc:	398c703a 	and	r6,r7,r6
   817d0:	19800035 	stwio	r6,0(r3)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   817d4:	20c00317 	ldw	r3,12(r4)
   817d8:	01803fc4 	movi	r6,255
   817dc:	19800035 	stwio	r6,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   817e0:	20c00317 	ldw	r3,12(r4)
   817e4:	19400835 	stwio	r5,32(r3)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   817e8:	20c00917 	ldw	r3,36(r4)
   817ec:	18000826 	beq	r3,zero,81810 <alt_avalon_sgdma_do_async_transfer+0x64>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   817f0:	20c00317 	ldw	r3,12(r4)
   817f4:	18c00404 	addi	r3,r3,16
   817f8:	19400037 	ldwio	r5,0(r3)

    control |= (dev->chain_control                          |
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   817fc:	21000b17 	ldw	r4,44(r4)
   81800:	21001814 	ori	r4,r4,96
   81804:	2148b03a 	or	r4,r4,r5
   81808:	19000035 	stwio	r4,0(r3)
   8180c:	f800283a 	ret
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81810:	21000317 	ldw	r4,12(r4)
   81814:	21000404 	addi	r4,r4,16
   81818:	21400037 	ldwio	r5,0(r4)
   8181c:	00fffbc4 	movi	r3,-17
   81820:	28c6703a 	and	r3,r5,r3

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81824:	18c01814 	ori	r3,r3,96
   81828:	20c00035 	stwio	r3,0(r4)
   8182c:	f800283a 	ret
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
   81830:	00bffc04 	movi	r2,-16
  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
}
   81834:	f800283a 	ret

00081838 <alt_avalon_sgdma_do_sync_transfer>:
  alt_sgdma_descriptor *desc)
{
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81838:	20800317 	ldw	r2,12(r4)
   8183c:	10800037 	ldwio	r2,0(r2)
   81840:	1080040c 	andi	r2,r2,16
   81844:	103ffc1e 	bne	r2,zero,81838 <alt_avalon_sgdma_do_sync_transfer>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   81848:	20800317 	ldw	r2,12(r4)
   8184c:	10800404 	addi	r2,r2,16
   81850:	11800037 	ldwio	r6,0(r2)
   81854:	00fff7c4 	movi	r3,-33
   81858:	30c6703a 	and	r3,r6,r3
   8185c:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   81860:	20800317 	ldw	r2,12(r4)
   81864:	00c03fc4 	movi	r3,255
   81868:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   8186c:	20800317 	ldw	r2,12(r4)
   81870:	11400835 	stwio	r5,32(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   81874:	20800317 	ldw	r2,12(r4)
   81878:	10800404 	addi	r2,r2,16
   8187c:	10c00037 	ldwio	r3,0(r2)
   81880:	18c01814 	ori	r3,r3,96
   81884:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81888:	20800317 	ldw	r2,12(r4)
   8188c:	10800037 	ldwio	r2,0(r2)
   81890:	1080040c 	andi	r2,r2,16
   81894:	103ffc1e 	bne	r2,zero,81888 <alt_avalon_sgdma_do_sync_transfer+0x50>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   81898:	20800317 	ldw	r2,12(r4)
   8189c:	10800404 	addi	r2,r2,16
   818a0:	11400037 	ldwio	r5,0(r2)
   818a4:	00fff7c4 	movi	r3,-33
   818a8:	28c6703a 	and	r3,r5,r3
   818ac:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   818b0:	20c00317 	ldw	r3,12(r4)
   818b4:	18800037 	ldwio	r2,0(r3)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   818b8:	01003fc4 	movi	r4,255
   818bc:	19000035 	stwio	r4,0(r3)

  return status;
}
   818c0:	f800283a 	ret

000818c4 <alt_avalon_sgdma_register_callback>:
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
  dev->callback         = callback;
   818c4:	21400915 	stw	r5,36(r4)
  dev->callback_context = context;
   818c8:	21c00a15 	stw	r7,40(r4)
  dev->chain_control    = chain_control;
   818cc:	21800b15 	stw	r6,44(r4)
   818d0:	f800283a 	ret

000818d4 <alt_avalon_sgdma_start>:
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   818d4:	20800317 	ldw	r2,12(r4)
   818d8:	10800404 	addi	r2,r2,16
   818dc:	10c00037 	ldwio	r3,0(r2)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   818e0:	18c00814 	ori	r3,r3,32
   818e4:	10c00035 	stwio	r3,0(r2)
   818e8:	f800283a 	ret

000818ec <alt_avalon_sgdma_stop>:
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   818ec:	20800317 	ldw	r2,12(r4)
   818f0:	10800404 	addi	r2,r2,16
   818f4:	11000037 	ldwio	r4,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   818f8:	00fff7c4 	movi	r3,-33
   818fc:	20c6703a 	and	r3,r4,r3
   81900:	10c00035 	stwio	r3,0(r2)
   81904:	f800283a 	ret

00081908 <alt_avalon_sgdma_check_descriptor_status>:
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   81908:	208007a3 	ldbuio	r2,30(r4)
   8190c:	10801fcc 	andi	r2,r2,127
   81910:	1000041e 	bne	r2,zero,81924 <alt_avalon_sgdma_check_descriptor_status+0x1c>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   81914:	208007e3 	ldbuio	r2,31(r4)
   81918:	1080200c 	andi	r2,r2,128
   8191c:	1000031e 	bne	r2,zero,8192c <alt_avalon_sgdma_check_descriptor_status+0x24>
   81920:	f800283a 	ret
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
   81924:	00bffec4 	movi	r2,-5
   81928:	f800283a 	ret
  }

  if( IORD_8DIRECT(&desc->control, 0) &
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
   8192c:	00bfe244 	movi	r2,-119
  }

    return 0;
}
   81930:	f800283a 	ret

00081934 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   81934:	defffe04 	addi	sp,sp,-8
   81938:	dfc00115 	stw	ra,4(sp)
   8193c:	dc000015 	stw	r16,0(sp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   81940:	d1600004 	addi	r5,gp,-32768
   81944:	0081f000 	call	81f00 <alt_find_dev>
   81948:	1021883a 	mov	r16,r2

  if (NULL == dev) {
   8194c:	1000071e 	bne	r2,zero,8196c <alt_avalon_sgdma_open+0x38>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   81950:	d0a00717 	ldw	r2,-32740(gp)
   81954:	10000226 	beq	r2,zero,81960 <alt_avalon_sgdma_open+0x2c>
   81958:	103ee83a 	callr	r2
   8195c:	00000106 	br	81964 <alt_avalon_sgdma_open+0x30>
   81960:	d0a8e904 	addi	r2,gp,-23644
    ALT_ERRNO = ENODEV;
   81964:	00c004c4 	movi	r3,19
   81968:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
   8196c:	8005883a 	mov	r2,r16
   81970:	dfc00117 	ldw	ra,4(sp)
   81974:	dc000017 	ldw	r16,0(sp)
   81978:	dec00204 	addi	sp,sp,8
   8197c:	f800283a 	ret

00081980 <alt_avalon_sgdma_enable_desc_poll>:
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81980:	20c00317 	ldw	r3,12(r4)
   81984:	18c00404 	addi	r3,r3,16
   81988:	19000037 	ldwio	r4,0(r3)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   8198c:	00a00434 	movhi	r2,32784
   81990:	10bfffc4 	addi	r2,r2,-1
   81994:	2084703a 	and	r2,r4,r2
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81998:	280a953a 	slli	r5,r5,20
   8199c:	295ffc2c 	andhi	r5,r5,32752
   819a0:	29400134 	orhi	r5,r5,4
   819a4:	288ab03a 	or	r5,r5,r2
   819a8:	19400035 	stwio	r5,0(r3)
   819ac:	f800283a 	ret

000819b0 <alt_avalon_sgdma_disable_desc_poll>:
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   819b0:	20800317 	ldw	r2,12(r4)
   819b4:	10800404 	addi	r2,r2,16
   819b8:	11000037 	ldwio	r4,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   819bc:	00ffff34 	movhi	r3,65532
   819c0:	18ffffc4 	addi	r3,r3,-1
   819c4:	20c6703a 	and	r3,r4,r3
   819c8:	10c00035 	stwio	r3,0(r2)
   819cc:	f800283a 	ret

000819d0 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   819d0:	deffff04 	addi	sp,sp,-4
   819d4:	dfc00015 	stw	ra,0(sp)
   819d8:	da000717 	ldw	r8,28(sp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   819dc:	288007c3 	ldbu	r2,31(r5)
   819e0:	10801fcc 	andi	r2,r2,127
   819e4:	288007e5 	stbio	r2,31(r5)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   819e8:	21800005 	stb	r6,0(r4)
   819ec:	3004d23a 	srli	r2,r6,8
   819f0:	20800045 	stb	r2,1(r4)
   819f4:	3004d43a 	srli	r2,r6,16
   819f8:	20800085 	stb	r2,2(r4)
   819fc:	300cd63a 	srli	r6,r6,24
   81a00:	218000c5 	stb	r6,3(r4)
  desc->write_addr               = write_addr;
   81a04:	21c00205 	stb	r7,8(r4)
   81a08:	3804d23a 	srli	r2,r7,8
   81a0c:	20800245 	stb	r2,9(r4)
   81a10:	3804d43a 	srli	r2,r7,16
   81a14:	20800285 	stb	r2,10(r4)
   81a18:	380ed63a 	srli	r7,r7,24
   81a1c:	21c002c5 	stb	r7,11(r4)
  desc->next                     = (alt_u32 *) next;
   81a20:	21400405 	stb	r5,16(r4)
   81a24:	2804d23a 	srli	r2,r5,8
   81a28:	20800445 	stb	r2,17(r4)
   81a2c:	2804d43a 	srli	r2,r5,16
   81a30:	20800485 	stb	r2,18(r4)
   81a34:	280ad63a 	srli	r5,r5,24
   81a38:	214004c5 	stb	r5,19(r4)
  desc->read_addr_pad            = 0x0;
   81a3c:	20000105 	stb	zero,4(r4)
   81a40:	20000145 	stb	zero,5(r4)
   81a44:	20000185 	stb	zero,6(r4)
   81a48:	200001c5 	stb	zero,7(r4)
  desc->write_addr_pad           = 0x0;
   81a4c:	20000305 	stb	zero,12(r4)
   81a50:	20000345 	stb	zero,13(r4)
   81a54:	20000385 	stb	zero,14(r4)
   81a58:	200003c5 	stb	zero,15(r4)
  desc->next_pad                 = 0x0;
   81a5c:	20000505 	stb	zero,20(r4)
   81a60:	20000545 	stb	zero,21(r4)
   81a64:	20000585 	stb	zero,22(r4)
   81a68:	200005c5 	stb	zero,23(r4)
  desc->bytes_to_transfer        = length_or_eop;
   81a6c:	d880010b 	ldhu	r2,4(sp)
   81a70:	20800605 	stb	r2,24(r4)
   81a74:	1004d23a 	srli	r2,r2,8
   81a78:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
   81a7c:	20000705 	stb	zero,28(r4)
   81a80:	20000745 	stb	zero,29(r4)
  desc->status                   = 0x0;
   81a84:	20000785 	stb	zero,30(r4)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   81a88:	d8800517 	ldw	r2,20(sp)
   81a8c:	20800685 	stb	r2,26(r4)
  desc->write_burst              = write_burst;
   81a90:	d8800617 	ldw	r2,24(sp)
   81a94:	208006c5 	stb	r2,27(r4)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   81a98:	d8800217 	ldw	r2,8(sp)
   81a9c:	1004c03a 	cmpne	r2,r2,zero
   81aa0:	10bfe004 	addi	r2,r2,-128
   81aa4:	d8c00317 	ldw	r3,12(sp)
   81aa8:	1806c03a 	cmpne	r3,r3,zero
   81aac:	1806907a 	slli	r3,r3,1
   81ab0:	10c4b03a 	or	r2,r2,r3
   81ab4:	d8c00417 	ldw	r3,16(sp)
   81ab8:	1806c03a 	cmpne	r3,r3,zero
   81abc:	180690ba 	slli	r3,r3,2
   81ac0:	10c4b03a 	or	r2,r2,r3
   81ac4:	40c03fcc 	andi	r3,r8,255
   81ac8:	18000326 	beq	r3,zero,81ad8 <alt_avalon_sgdma_construct_descriptor_burst+0x108>
   81acc:	420003cc 	andi	r8,r8,15
   81ad0:	401090fa 	slli	r8,r8,3
   81ad4:	00000106 	br	81adc <alt_avalon_sgdma_construct_descriptor_burst+0x10c>
   81ad8:	0011883a 	mov	r8,zero
   81adc:	1204b03a 	or	r2,r2,r8
   81ae0:	208007c5 	stb	r2,31(r4)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
   81ae4:	01400804 	movi	r5,32
   81ae8:	0081e7c0 	call	81e7c <alt_dcache_flush>
}
   81aec:	dfc00017 	ldw	ra,0(sp)
   81af0:	dec00104 	addi	sp,sp,4
   81af4:	f800283a 	ret

00081af8 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   81af8:	defff804 	addi	sp,sp,-32
   81afc:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81b00:	d8000615 	stw	zero,24(sp)
   81b04:	d8800c17 	ldw	r2,48(sp)
   81b08:	d8800515 	stw	r2,20(sp)
   81b0c:	d8800b17 	ldw	r2,44(sp)
   81b10:	d8800415 	stw	r2,16(sp)
   81b14:	d8800a17 	ldw	r2,40(sp)
   81b18:	d8800315 	stw	r2,12(sp)
   81b1c:	d8800917 	ldw	r2,36(sp)
   81b20:	d8800215 	stw	r2,8(sp)
   81b24:	d8000115 	stw	zero,4(sp)
   81b28:	d880080b 	ldhu	r2,32(sp)
   81b2c:	d8800015 	stw	r2,0(sp)
   81b30:	00819d00 	call	819d0 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   81b34:	dfc00717 	ldw	ra,28(sp)
   81b38:	dec00804 	addi	sp,sp,32
   81b3c:	f800283a 	ret

00081b40 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   81b40:	defffa04 	addi	sp,sp,-24
   81b44:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   81b48:	d8000415 	stw	zero,16(sp)
   81b4c:	d8000315 	stw	zero,12(sp)
   81b50:	d8800817 	ldw	r2,32(sp)
   81b54:	d8800215 	stw	r2,8(sp)
   81b58:	d8800717 	ldw	r2,28(sp)
   81b5c:	d8800115 	stw	r2,4(sp)
   81b60:	d880060b 	ldhu	r2,24(sp)
   81b64:	d8800015 	stw	r2,0(sp)
   81b68:	0081af80 	call	81af8 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   81b6c:	dfc00517 	ldw	ra,20(sp)
   81b70:	dec00604 	addi	sp,sp,24
   81b74:	f800283a 	ret

00081b78 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   81b78:	defff804 	addi	sp,sp,-32
   81b7c:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81b80:	d8000615 	stw	zero,24(sp)
   81b84:	d8800917 	ldw	r2,36(sp)
   81b88:	d8800515 	stw	r2,20(sp)
   81b8c:	d8000415 	stw	zero,16(sp)
   81b90:	d8800817 	ldw	r2,32(sp)
   81b94:	d8800315 	stw	r2,12(sp)
   81b98:	d8000215 	stw	zero,8(sp)
   81b9c:	d8000115 	stw	zero,4(sp)
   81ba0:	39ffffcc 	andi	r7,r7,65535
   81ba4:	d9c00015 	stw	r7,0(sp)
   81ba8:	300f883a 	mov	r7,r6
   81bac:	000d883a 	mov	r6,zero
   81bb0:	00819d00 	call	819d0 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   81bb4:	dfc00717 	ldw	ra,28(sp)
   81bb8:	dec00804 	addi	sp,sp,32
   81bbc:	f800283a 	ret

00081bc0 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   81bc0:	defffd04 	addi	sp,sp,-12
   81bc4:	dfc00215 	stw	ra,8(sp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   81bc8:	d8000115 	stw	zero,4(sp)
   81bcc:	d8800317 	ldw	r2,12(sp)
   81bd0:	d8800015 	stw	r2,0(sp)
   81bd4:	39ffffcc 	andi	r7,r7,65535
   81bd8:	0081b780 	call	81b78 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   81bdc:	dfc00217 	ldw	ra,8(sp)
   81be0:	dec00304 	addi	sp,sp,12
   81be4:	f800283a 	ret

00081be8 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   81be8:	defff804 	addi	sp,sp,-32
   81bec:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81bf0:	d8800c03 	ldbu	r2,48(sp)
   81bf4:	d8800615 	stw	r2,24(sp)
   81bf8:	d8000515 	stw	zero,20(sp)
   81bfc:	d8800b17 	ldw	r2,44(sp)
   81c00:	d8800415 	stw	r2,16(sp)
   81c04:	d8800917 	ldw	r2,36(sp)
   81c08:	d8800315 	stw	r2,12(sp)
   81c0c:	d8800817 	ldw	r2,32(sp)
   81c10:	d8800215 	stw	r2,8(sp)
   81c14:	d8800a17 	ldw	r2,40(sp)
   81c18:	d8800115 	stw	r2,4(sp)
   81c1c:	39ffffcc 	andi	r7,r7,65535
   81c20:	d9c00015 	stw	r7,0(sp)
   81c24:	000f883a 	mov	r7,zero
   81c28:	00819d00 	call	819d0 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   81c2c:	dfc00717 	ldw	ra,28(sp)
   81c30:	dec00804 	addi	sp,sp,32
   81c34:	f800283a 	ret

00081c38 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   81c38:	defffa04 	addi	sp,sp,-24
   81c3c:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   81c40:	d8800903 	ldbu	r2,36(sp)
   81c44:	d8800415 	stw	r2,16(sp)
   81c48:	d8000315 	stw	zero,12(sp)
   81c4c:	d8800817 	ldw	r2,32(sp)
   81c50:	d8800215 	stw	r2,8(sp)
   81c54:	d8800717 	ldw	r2,28(sp)
   81c58:	d8800115 	stw	r2,4(sp)
   81c5c:	d8800617 	ldw	r2,24(sp)
   81c60:	d8800015 	stw	r2,0(sp)
   81c64:	39ffffcc 	andi	r7,r7,65535
   81c68:	0081be80 	call	81be8 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   81c6c:	dfc00517 	ldw	ra,20(sp)
   81c70:	dec00604 	addi	sp,sp,24
   81c74:	f800283a 	ret

00081c78 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   81c78:	defff804 	addi	sp,sp,-32
   81c7c:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   81c80:	d8800c03 	ldbu	r2,48(sp)
   81c84:	d8800615 	stw	r2,24(sp)
   81c88:	d8000515 	stw	zero,20(sp)
   81c8c:	d8000415 	stw	zero,16(sp)
   81c90:	d8800b17 	ldw	r2,44(sp)
   81c94:	d8800315 	stw	r2,12(sp)
   81c98:	d8800a17 	ldw	r2,40(sp)
   81c9c:	d8800215 	stw	r2,8(sp)
   81ca0:	d8800917 	ldw	r2,36(sp)
   81ca4:	d8800115 	stw	r2,4(sp)
   81ca8:	d880080b 	ldhu	r2,32(sp)
   81cac:	d8800015 	stw	r2,0(sp)
   81cb0:	00819d00 	call	819d0 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   81cb4:	dfc00717 	ldw	ra,28(sp)
   81cb8:	dec00804 	addi	sp,sp,32
   81cbc:	f800283a 	ret

00081cc0 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   81cc0:	defffb04 	addi	sp,sp,-20
   81cc4:	dfc00415 	stw	ra,16(sp)
   81cc8:	dc800315 	stw	r18,12(sp)
   81ccc:	dc400215 	stw	r17,8(sp)
   81cd0:	dc000115 	stw	r16,4(sp)
   81cd4:	2021883a 	mov	r16,r4
   81cd8:	2823883a 	mov	r17,r5
   81cdc:	3025883a 	mov	r18,r6

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   81ce0:	20c00317 	ldw	r3,12(r4)
   81ce4:	00800074 	movhi	r2,1
   81ce8:	18800435 	stwio	r2,16(r3)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   81cec:	20c00317 	ldw	r3,12(r4)
   81cf0:	18800435 	stwio	r2,16(r3)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   81cf4:	20800317 	ldw	r2,12(r4)
   81cf8:	10000435 	stwio	zero,16(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   81cfc:	20800317 	ldw	r2,12(r4)
   81d00:	00c03fc4 	movi	r3,255
   81d04:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   81d08:	d1600004 	addi	r5,gp,-32768
   81d0c:	0081e8c0 	call	81e8c <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   81d10:	d8000015 	stw	zero,0(sp)
   81d14:	800f883a 	mov	r7,r16
   81d18:	01800234 	movhi	r6,8
   81d1c:	3185d304 	addi	r6,r6,5964
   81d20:	900b883a 	mov	r5,r18
   81d24:	8809883a 	mov	r4,r17
   81d28:	0081f9c0 	call	81f9c <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   81d2c:	dfc00417 	ldw	ra,16(sp)
   81d30:	dc800317 	ldw	r18,12(sp)
   81d34:	dc400217 	ldw	r17,8(sp)
   81d38:	dc000117 	ldw	r16,4(sp)
   81d3c:	dec00504 	addi	sp,sp,20
   81d40:	f800283a 	ret

00081d44 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   81d44:	d0a8e817 	ldw	r2,-23648(gp)
   81d48:	10001a26 	beq	r2,zero,81db4 <alt_alarm_start+0x70>
  {
    if (alarm)
   81d4c:	20001b26 	beq	r4,zero,81dbc <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
   81d50:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   81d54:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81d58:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81d5c:	00bfff84 	movi	r2,-2
   81d60:	1884703a 	and	r2,r3,r2
   81d64:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   81d68:	d0a8e717 	ldw	r2,-23652(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   81d6c:	11800044 	addi	r6,r2,1
   81d70:	314b883a 	add	r5,r6,r5
   81d74:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   81d78:	2880032e 	bgeu	r5,r2,81d88 <alt_alarm_start+0x44>
      {
        alarm->rollover = 1;
   81d7c:	00800044 	movi	r2,1
   81d80:	20800405 	stb	r2,16(r4)
   81d84:	00000106 	br	81d8c <alt_alarm_start+0x48>
      }
      else
      {
        alarm->rollover = 0;
   81d88:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   81d8c:	d0a00904 	addi	r2,gp,-32732
   81d90:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   81d94:	11400017 	ldw	r5,0(r2)
   81d98:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
   81d9c:	11400017 	ldw	r5,0(r2)
   81da0:	29000115 	stw	r4,4(r5)
  list->next           = entry;
   81da4:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81da8:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
   81dac:	0005883a 	mov	r2,zero
   81db0:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
   81db4:	00bfde84 	movi	r2,-134
   81db8:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
   81dbc:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
   81dc0:	f800283a 	ret

00081dc4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   81dc4:	defffd04 	addi	sp,sp,-12
   81dc8:	dfc00215 	stw	ra,8(sp)
   81dcc:	dc400115 	stw	r17,4(sp)
   81dd0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   81dd4:	20001816 	blt	r4,zero,81e38 <close+0x74>
   81dd8:	2021883a 	mov	r16,r4
   81ddc:	21000324 	muli	r4,r4,12
   81de0:	00800234 	movhi	r2,8
   81de4:	109a4b04 	addi	r2,r2,26924
   81de8:	2089883a 	add	r4,r4,r2

  if (fd)
   81dec:	20001226 	beq	r4,zero,81e38 <close+0x74>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   81df0:	20800017 	ldw	r2,0(r4)
   81df4:	10800417 	ldw	r2,16(r2)
   81df8:	10001826 	beq	r2,zero,81e5c <close+0x98>
   81dfc:	103ee83a 	callr	r2
   81e00:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   81e04:	8009883a 	mov	r4,r16
   81e08:	00823380 	call	82338 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   81e0c:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
   81e10:	8800150e 	bge	r17,zero,81e68 <close+0xa4>
   81e14:	d0a00717 	ldw	r2,-32740(gp)
   81e18:	10000226 	beq	r2,zero,81e24 <close+0x60>
   81e1c:	103ee83a 	callr	r2
   81e20:	00000106 	br	81e28 <close+0x64>
   81e24:	d0a8e904 	addi	r2,gp,-23644
    {
      ALT_ERRNO = -rval;
   81e28:	0463c83a 	sub	r17,zero,r17
   81e2c:	14400015 	stw	r17,0(r2)
      return -1;
   81e30:	00bfffc4 	movi	r2,-1
   81e34:	00000c06 	br	81e68 <close+0xa4>
   81e38:	d0a00717 	ldw	r2,-32740(gp)
   81e3c:	10000226 	beq	r2,zero,81e48 <close+0x84>
   81e40:	103ee83a 	callr	r2
   81e44:	00000106 	br	81e4c <close+0x88>
   81e48:	d0a8e904 	addi	r2,gp,-23644
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
   81e4c:	00c01444 	movi	r3,81
   81e50:	10c00015 	stw	r3,0(r2)
    return -1;
   81e54:	00bfffc4 	movi	r2,-1
   81e58:	00000306 	br	81e68 <close+0xa4>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   81e5c:	8009883a 	mov	r4,r16
   81e60:	00823380 	call	82338 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   81e64:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   81e68:	dfc00217 	ldw	ra,8(sp)
   81e6c:	dc400117 	ldw	r17,4(sp)
   81e70:	dc000017 	ldw	r16,0(sp)
   81e74:	dec00304 	addi	sp,sp,12
   81e78:	f800283a 	ret

00081e7c <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   81e7c:	f800283a 	ret

00081e80 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   81e80:	f800283a 	ret

00081e84 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   81e84:	3005883a 	mov	r2,r6
   81e88:	f800283a 	ret

00081e8c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   81e8c:	20000226 	beq	r4,zero,81e98 <alt_dev_llist_insert+0xc>
   81e90:	20800217 	ldw	r2,8(r4)
   81e94:	10000f1e 	bne	r2,zero,81ed4 <alt_dev_llist_insert+0x48>
   81e98:	d0a00717 	ldw	r2,-32740(gp)
   81e9c:	10000426 	beq	r2,zero,81eb0 <alt_dev_llist_insert+0x24>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   81ea0:	deffff04 	addi	sp,sp,-4
   81ea4:	dfc00015 	stw	ra,0(sp)
   81ea8:	103ee83a 	callr	r2
   81eac:	00000506 	br	81ec4 <alt_dev_llist_insert+0x38>
   81eb0:	d0a8e904 	addi	r2,gp,-23644
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   81eb4:	00c00584 	movi	r3,22
   81eb8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   81ebc:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   81ec0:	f800283a 	ret
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   81ec4:	00c00584 	movi	r3,22
   81ec8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   81ecc:	00bffa84 	movi	r2,-22
   81ed0:	00000806 	br	81ef4 <alt_dev_llist_insert+0x68>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   81ed4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   81ed8:	28800017 	ldw	r2,0(r5)
   81edc:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   81ee0:	28800017 	ldw	r2,0(r5)
   81ee4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   81ee8:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   81eec:	0005883a 	mov	r2,zero
   81ef0:	f800283a 	ret
}
   81ef4:	dfc00017 	ldw	ra,0(sp)
   81ef8:	dec00104 	addi	sp,sp,4
   81efc:	f800283a 	ret

00081f00 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   81f00:	defffb04 	addi	sp,sp,-20
   81f04:	dfc00415 	stw	ra,16(sp)
   81f08:	dcc00315 	stw	r19,12(sp)
   81f0c:	dc800215 	stw	r18,8(sp)
   81f10:	dc400115 	stw	r17,4(sp)
   81f14:	dc000015 	stw	r16,0(sp)
   81f18:	2027883a 	mov	r19,r4
   81f1c:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   81f20:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   81f24:	008294c0 	call	8294c <strlen>
   81f28:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   81f2c:	8c000926 	beq	r17,r16,81f54 <alt_find_dev+0x54>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   81f30:	900d883a 	mov	r6,r18
   81f34:	980b883a 	mov	r5,r19
   81f38:	81000217 	ldw	r4,8(r16)
   81f3c:	00826200 	call	82620 <memcmp>
   81f40:	10000626 	beq	r2,zero,81f5c <alt_find_dev+0x5c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   81f44:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   81f48:	8c3ff91e 	bne	r17,r16,81f30 <alt_find_dev+0x30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   81f4c:	0005883a 	mov	r2,zero
   81f50:	00000306 	br	81f60 <alt_find_dev+0x60>
   81f54:	0005883a 	mov	r2,zero
   81f58:	00000106 	br	81f60 <alt_find_dev+0x60>
   81f5c:	8005883a 	mov	r2,r16
}
   81f60:	dfc00417 	ldw	ra,16(sp)
   81f64:	dcc00317 	ldw	r19,12(sp)
   81f68:	dc800217 	ldw	r18,8(sp)
   81f6c:	dc400117 	ldw	r17,4(sp)
   81f70:	dc000017 	ldw	r16,0(sp)
   81f74:	dec00504 	addi	sp,sp,20
   81f78:	f800283a 	ret

00081f7c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   81f7c:	deffff04 	addi	sp,sp,-4
   81f80:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   81f84:	01440004 	movi	r5,4096
   81f88:	0009883a 	mov	r4,zero
   81f8c:	00825900 	call	82590 <alt_icache_flush>
#endif
}
   81f90:	dfc00017 	ldw	ra,0(sp)
   81f94:	dec00104 	addi	sp,sp,4
   81f98:	f800283a 	ret

00081f9c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   81f9c:	defffe04 	addi	sp,sp,-8
   81fa0:	dfc00115 	stw	ra,4(sp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   81fa4:	d8800217 	ldw	r2,8(sp)
   81fa8:	d8800015 	stw	r2,0(sp)
   81fac:	00820440 	call	82044 <alt_iic_isr_register>
}  
   81fb0:	dfc00117 	ldw	ra,4(sp)
   81fb4:	dec00204 	addi	sp,sp,8
   81fb8:	f800283a 	ret

00081fbc <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81fbc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81fc0:	00bfff84 	movi	r2,-2
   81fc4:	2084703a 	and	r2,r4,r2
   81fc8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   81fcc:	d0a8e617 	ldw	r2,-23656(gp)
   81fd0:	00c00044 	movi	r3,1
   81fd4:	194a983a 	sll	r5,r3,r5
   81fd8:	288ab03a 	or	r5,r5,r2
   81fdc:	d168e615 	stw	r5,-23656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   81fe0:	d0a8e617 	ldw	r2,-23656(gp)
   81fe4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81fe8:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   81fec:	0005883a 	mov	r2,zero
   81ff0:	f800283a 	ret

00081ff4 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81ff4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81ff8:	00bfff84 	movi	r2,-2
   81ffc:	2084703a 	and	r2,r4,r2
   82000:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   82004:	d0a8e617 	ldw	r2,-23656(gp)
   82008:	00ffff84 	movi	r3,-2
   8200c:	194a183a 	rol	r5,r3,r5
   82010:	288a703a 	and	r5,r5,r2
   82014:	d168e615 	stw	r5,-23656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   82018:	d0a8e617 	ldw	r2,-23656(gp)
   8201c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82020:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   82024:	0005883a 	mov	r2,zero
   82028:	f800283a 	ret

0008202c <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8202c:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   82030:	00800044 	movi	r2,1
   82034:	1144983a 	sll	r2,r2,r5
   82038:	10c4703a 	and	r2,r2,r3
}
   8203c:	1004c03a 	cmpne	r2,r2,zero
   82040:	f800283a 	ret

00082044 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   82044:	008007c4 	movi	r2,31
   82048:	11401316 	blt	r2,r5,82098 <alt_iic_isr_register+0x54>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8204c:	defffe04 	addi	sp,sp,-8
   82050:	dfc00115 	stw	ra,4(sp)
   82054:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82058:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8205c:	00bfff84 	movi	r2,-2
   82060:	8084703a 	and	r2,r16,r2
   82064:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   82068:	280490fa 	slli	r2,r5,3
   8206c:	00c00274 	movhi	r3,9
   82070:	18e86604 	addi	r3,r3,-24168
   82074:	1885883a 	add	r2,r3,r2
   82078:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   8207c:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   82080:	30000226 	beq	r6,zero,8208c <alt_iic_isr_register+0x48>
   82084:	0081fbc0 	call	81fbc <alt_ic_irq_enable>
   82088:	00000106 	br	82090 <alt_iic_isr_register+0x4c>
   8208c:	0081ff40 	call	81ff4 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82090:	8001703a 	wrctl	status,r16
   82094:	00000206 	br	820a0 <alt_iic_isr_register+0x5c>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   82098:	00bffa84 	movi	r2,-22
   8209c:	f800283a 	ret

    alt_irq_enable_all(status);
  }

  return rc; 
}
   820a0:	dfc00117 	ldw	ra,4(sp)
   820a4:	dc000017 	ldw	r16,0(sp)
   820a8:	dec00204 	addi	sp,sp,8
   820ac:	f800283a 	ret

000820b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   820b0:	defffe04 	addi	sp,sp,-8
   820b4:	dfc00115 	stw	ra,4(sp)
   820b8:	dc000015 	stw	r16,0(sp)
   820bc:	2021883a 	mov	r16,r4
   820c0:	2809883a 	mov	r4,r5
   820c4:	300b883a 	mov	r5,r6
  int old;

  old = open (name, flags, mode);
   820c8:	380d883a 	mov	r6,r7
   820cc:	00821a80 	call	821a8 <open>

  if (old >= 0)
   820d0:	10000c16 	blt	r2,zero,82104 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
   820d4:	10c00324 	muli	r3,r2,12
   820d8:	01000234 	movhi	r4,8
   820dc:	211a4b04 	addi	r4,r4,26924
   820e0:	20c7883a 	add	r3,r4,r3
   820e4:	19000017 	ldw	r4,0(r3)
   820e8:	81000015 	stw	r4,0(r16)
    fd->priv     = alt_fd_list[old].priv;
   820ec:	19000117 	ldw	r4,4(r3)
   820f0:	81000115 	stw	r4,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   820f4:	18c00217 	ldw	r3,8(r3)
   820f8:	80c00215 	stw	r3,8(r16)

    alt_release_fd (old);
   820fc:	1009883a 	mov	r4,r2
   82100:	00823380 	call	82338 <alt_release_fd>
  }
} 
   82104:	dfc00117 	ldw	ra,4(sp)
   82108:	dc000017 	ldw	r16,0(sp)
   8210c:	dec00204 	addi	sp,sp,8
   82110:	f800283a 	ret

00082114 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   82114:	defffa04 	addi	sp,sp,-24
   82118:	dfc00515 	stw	ra,20(sp)
   8211c:	dd000415 	stw	r20,16(sp)
   82120:	dcc00315 	stw	r19,12(sp)
   82124:	dc800215 	stw	r18,8(sp)
   82128:	dc400115 	stw	r17,4(sp)
   8212c:	dc000015 	stw	r16,0(sp)
   82130:	2829883a 	mov	r20,r5
   82134:	3027883a 	mov	r19,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   82138:	04407fc4 	movi	r17,511
   8213c:	04800044 	movi	r18,1
   82140:	04000234 	movhi	r16,8
   82144:	841a4e04 	addi	r16,r16,26936
   82148:	880f883a 	mov	r7,r17
   8214c:	900d883a 	mov	r6,r18
   82150:	200b883a 	mov	r5,r4
   82154:	8009883a 	mov	r4,r16
   82158:	00820b00 	call	820b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8215c:	843ffd04 	addi	r16,r16,-12
   82160:	880f883a 	mov	r7,r17
   82164:	000d883a 	mov	r6,zero
   82168:	a00b883a 	mov	r5,r20
   8216c:	8009883a 	mov	r4,r16
   82170:	00820b00 	call	820b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   82174:	880f883a 	mov	r7,r17
   82178:	900d883a 	mov	r6,r18
   8217c:	980b883a 	mov	r5,r19
   82180:	81000604 	addi	r4,r16,24
   82184:	00820b00 	call	820b0 <alt_open_fd>
}  
   82188:	dfc00517 	ldw	ra,20(sp)
   8218c:	dd000417 	ldw	r20,16(sp)
   82190:	dcc00317 	ldw	r19,12(sp)
   82194:	dc800217 	ldw	r18,8(sp)
   82198:	dc400117 	ldw	r17,4(sp)
   8219c:	dc000017 	ldw	r16,0(sp)
   821a0:	dec00604 	addi	sp,sp,24
   821a4:	f800283a 	ret

000821a8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   821a8:	defffa04 	addi	sp,sp,-24
   821ac:	dfc00515 	stw	ra,20(sp)
   821b0:	dd000415 	stw	r20,16(sp)
   821b4:	dcc00315 	stw	r19,12(sp)
   821b8:	dc800215 	stw	r18,8(sp)
   821bc:	dc400115 	stw	r17,4(sp)
   821c0:	dc000015 	stw	r16,0(sp)
   821c4:	2027883a 	mov	r19,r4
   821c8:	2825883a 	mov	r18,r5
   821cc:	3029883a 	mov	r20,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   821d0:	d1600304 	addi	r5,gp,-32756
   821d4:	0081f000 	call	81f00 <alt_find_dev>
   821d8:	10003b1e 	bne	r2,zero,822c8 <open+0x120>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   821dc:	9809883a 	mov	r4,r19
   821e0:	00824680 	call	82468 <alt_find_file>
   821e4:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   821e8:	1000461e 	bne	r2,zero,82304 <open+0x15c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   821ec:	047ffb44 	movi	r17,-19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   821f0:	043fffc4 	movi	r16,-1
   821f4:	00001406 	br	82248 <open+0xa0>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   821f8:	11800017 	ldw	r6,0(r2)
   821fc:	31c0031e 	bne	r6,r7,8220c <open+0x64>
   82200:	29800017 	ldw	r6,0(r5)
   82204:	3000010e 	bge	r6,zero,8220c <open+0x64>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   82208:	20800e1e 	bne	r4,r2,82244 <open+0x9c>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8220c:	18c00044 	addi	r3,r3,1
   82210:	10800304 	addi	r2,r2,12
   82214:	29400304 	addi	r5,r5,12
   82218:	40fff72e 	bgeu	r8,r3,821f8 <open+0x50>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8221c:	88800317 	ldw	r2,12(r17)
   82220:	10001426 	beq	r2,zero,82274 <open+0xcc>
   82224:	a00f883a 	mov	r7,r20
   82228:	900d883a 	mov	r6,r18
   8222c:	980b883a 	mov	r5,r19
   82230:	103ee83a 	callr	r2
   82234:	1023883a 	mov	r17,r2
   82238:	8005883a 	mov	r2,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8223c:	8800360e 	bge	r17,zero,82318 <open+0x170>
   82240:	00000106 	br	82248 <open+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   82244:	047ffcc4 	movi	r17,-13

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
   82248:	8009883a 	mov	r4,r16
   8224c:	00823380 	call	82338 <alt_release_fd>
   82250:	d0a00717 	ldw	r2,-32740(gp)
   82254:	10000226 	beq	r2,zero,82260 <open+0xb8>
   82258:	103ee83a 	callr	r2
   8225c:	00000106 	br	82264 <open+0xbc>
   82260:	d0a8e904 	addi	r2,gp,-23644
    ALT_ERRNO = -status;
   82264:	0463c83a 	sub	r17,zero,r17
   82268:	14400015 	stw	r17,0(r2)
    return -1;
   8226c:	00bfffc4 	movi	r2,-1
   82270:	00002906 	br	82318 <open+0x170>
   82274:	8005883a 	mov	r2,r16
   82278:	00002706 	br	82318 <open+0x170>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   8227c:	8023883a 	mov	r17,r16
   82280:	003ff106 	br	82248 <open+0xa0>
   82284:	8023883a 	mov	r17,r16
   82288:	003fef06 	br	82248 <open+0xa0>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   8228c:	81000324 	muli	r4,r16,12
   82290:	01400234 	movhi	r5,8
   82294:	295a4b04 	addi	r5,r5,26924
   82298:	2149883a 	add	r4,r4,r5

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8229c:	00900034 	movhi	r2,16384
   822a0:	10bfffc4 	addi	r2,r2,-1
   822a4:	9084703a 	and	r2,r18,r2
   822a8:	10900034 	orhi	r2,r2,16384
   822ac:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   822b0:	d2200217 	ldw	r8,-32760(gp)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   822b4:	21c00017 	ldw	r7,0(r4)
   822b8:	2805883a 	mov	r2,r5
   822bc:	29400204 	addi	r5,r5,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   822c0:	0007883a 	mov	r3,zero
   822c4:	003fcc06 	br	821f8 <open+0x50>
   822c8:	1023883a 	mov	r17,r2
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   822cc:	1009883a 	mov	r4,r2
   822d0:	00825280 	call	82528 <alt_get_fd>
   822d4:	1021883a 	mov	r16,r2
   822d8:	103fe816 	blt	r2,zero,8227c <open+0xd4>
   822dc:	003feb06 	br	8228c <open+0xe4>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   822e0:	81000324 	muli	r4,r16,12
   822e4:	00800234 	movhi	r2,8
   822e8:	109a4b04 	addi	r2,r2,26924
   822ec:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   822f0:	00900034 	movhi	r2,16384
   822f4:	10bfffc4 	addi	r2,r2,-1
   822f8:	9084703a 	and	r2,r18,r2
   822fc:	20800215 	stw	r2,8(r4)
   82300:	003fc606 	br	8221c <open+0x74>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   82304:	1009883a 	mov	r4,r2
   82308:	00825280 	call	82528 <alt_get_fd>
   8230c:	1021883a 	mov	r16,r2
   82310:	103ff30e 	bge	r2,zero,822e0 <open+0x138>
   82314:	003fdb06 	br	82284 <open+0xdc>
  }
  
  /* return the reference upon success */

  return index;
}
   82318:	dfc00517 	ldw	ra,20(sp)
   8231c:	dd000417 	ldw	r20,16(sp)
   82320:	dcc00317 	ldw	r19,12(sp)
   82324:	dc800217 	ldw	r18,8(sp)
   82328:	dc400117 	ldw	r17,4(sp)
   8232c:	dc000017 	ldw	r16,0(sp)
   82330:	dec00604 	addi	sp,sp,24
   82334:	f800283a 	ret

00082338 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
   82338:	00800084 	movi	r2,2
   8233c:	1100060e 	bge	r2,r4,82358 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
   82340:	21000324 	muli	r4,r4,12
   82344:	00800234 	movhi	r2,8
   82348:	109a4b04 	addi	r2,r2,26924
   8234c:	1109883a 	add	r4,r2,r4
   82350:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
   82354:	20000015 	stw	zero,0(r4)
   82358:	f800283a 	ret

0008235c <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8235c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82360:	00bfff84 	movi	r2,-2
   82364:	1884703a 	and	r2,r3,r2
   82368:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8236c:	20800017 	ldw	r2,0(r4)
   82370:	21400117 	ldw	r5,4(r4)
   82374:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   82378:	20800117 	ldw	r2,4(r4)
   8237c:	21400017 	ldw	r5,0(r4)
   82380:	11400015 	stw	r5,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   82384:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   82388:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8238c:	1801703a 	wrctl	status,r3
   82390:	f800283a 	ret

00082394 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   82394:	defffb04 	addi	sp,sp,-20
   82398:	dfc00415 	stw	ra,16(sp)
   8239c:	dcc00315 	stw	r19,12(sp)
   823a0:	dc800215 	stw	r18,8(sp)
   823a4:	dc400115 	stw	r17,4(sp)
   823a8:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   823ac:	d0e00904 	addi	r3,gp,-32732
   823b0:	1c000017 	ldw	r16,0(r3)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   823b4:	d0a8e717 	ldw	r2,-23652(gp)
   823b8:	10800044 	addi	r2,r2,1
   823bc:	d0a8e715 	stw	r2,-23652(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   823c0:	80c02026 	beq	r16,r3,82444 <alt_tick+0xb0>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   823c4:	04c00044 	movi	r19,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   823c8:	1825883a 	mov	r18,r3
  {
    next = (alt_alarm*) alarm->llist.next;
   823cc:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   823d0:	80800403 	ldbu	r2,16(r16)
   823d4:	10001526 	beq	r2,zero,8242c <alt_tick+0x98>
   823d8:	d0a8e717 	ldw	r2,-23652(gp)
   823dc:	1000171e 	bne	r2,zero,8243c <alt_tick+0xa8>
    {
      alarm->rollover = 0;
   823e0:	80000405 	stb	zero,16(r16)
   823e4:	00001106 	br	8242c <alt_tick+0x98>

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
      {
        alt_alarm_stop (alarm);
   823e8:	8009883a 	mov	r4,r16
   823ec:	008235c0 	call	8235c <alt_alarm_stop>
   823f0:	00000606 	br	8240c <alt_tick+0x78>
      }
      else
      {
        alarm->time += next_callback;
   823f4:	80c00217 	ldw	r3,8(r16)
   823f8:	10c5883a 	add	r2,r2,r3
   823fc:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   82400:	d0e8e717 	ldw	r3,-23652(gp)
   82404:	10c0012e 	bgeu	r2,r3,8240c <alt_tick+0x78>
        {
          alarm->rollover = 1;
   82408:	84c00405 	stb	r19,16(r16)
   8240c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   82410:	8cbfee1e 	bne	r17,r18,823cc <alt_tick+0x38>
   82414:	00000b06 	br	82444 <alt_tick+0xb0>
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
   82418:	80800317 	ldw	r2,12(r16)
   8241c:	81000517 	ldw	r4,20(r16)
   82420:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   82424:	103ff31e 	bne	r2,zero,823f4 <alt_tick+0x60>
   82428:	003fef06 	br	823e8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8242c:	d0e8e717 	ldw	r3,-23652(gp)
   82430:	80800217 	ldw	r2,8(r16)
   82434:	18bff536 	bltu	r3,r2,8240c <alt_tick+0x78>
   82438:	003ff706 	br	82418 <alt_tick+0x84>
   8243c:	d0a8e717 	ldw	r2,-23652(gp)
   82440:	003ff206 	br	8240c <alt_tick+0x78>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   82444:	dfc00417 	ldw	ra,16(sp)
   82448:	dcc00317 	ldw	r19,12(sp)
   8244c:	dc800217 	ldw	r18,8(sp)
   82450:	dc400117 	ldw	r17,4(sp)
   82454:	dc000017 	ldw	r16,0(sp)
   82458:	dec00504 	addi	sp,sp,20
   8245c:	f800283a 	ret

00082460 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   82460:	000170fa 	wrctl	ienable,zero
   82464:	f800283a 	ret

00082468 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   82468:	defffa04 	addi	sp,sp,-24
   8246c:	dfc00515 	stw	ra,20(sp)
   82470:	dd000415 	stw	r20,16(sp)
   82474:	dcc00315 	stw	r19,12(sp)
   82478:	dc800215 	stw	r18,8(sp)
   8247c:	dc400115 	stw	r17,4(sp)
   82480:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   82484:	d0a00504 	addi	r2,gp,-32748
   82488:	14000017 	ldw	r16,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8248c:	80801b26 	beq	r16,r2,824fc <alt_find_file+0x94>
   82490:	2027883a 	mov	r19,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
   82494:	04800bc4 	movi	r18,47
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   82498:	1029883a 	mov	r20,r2
  {
    len = strlen(next->name);
   8249c:	84400217 	ldw	r17,8(r16)
   824a0:	8809883a 	mov	r4,r17
   824a4:	008294c0 	call	8294c <strlen>
   824a8:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
   824ac:	8889883a 	add	r4,r17,r2
   824b0:	213fffc7 	ldb	r4,-1(r4)
   824b4:	2480011e 	bne	r4,r18,824bc <alt_find_file+0x54>
    {
      len -= 1;
   824b8:	10ffffc4 	addi	r3,r2,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   824bc:	180d883a 	mov	r6,r3
   824c0:	98c7883a 	add	r3,r19,r3
   824c4:	18800003 	ldbu	r2,0(r3)
   824c8:	10c03fcc 	andi	r3,r2,255
   824cc:	18c0201c 	xori	r3,r3,128
   824d0:	18ffe004 	addi	r3,r3,-128
   824d4:	1c800126 	beq	r3,r18,824dc <alt_find_file+0x74>
   824d8:	1800041e 	bne	r3,zero,824ec <alt_find_file+0x84>
        !memcmp (next->name, name, len))
   824dc:	980b883a 	mov	r5,r19
   824e0:	8809883a 	mov	r4,r17
   824e4:	00826200 	call	82620 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   824e8:	10000626 	beq	r2,zero,82504 <alt_find_file+0x9c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   824ec:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   824f0:	853fea1e 	bne	r16,r20,8249c <alt_find_file+0x34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   824f4:	0005883a 	mov	r2,zero
   824f8:	00000306 	br	82508 <alt_find_file+0xa0>
   824fc:	0005883a 	mov	r2,zero
   82500:	00000106 	br	82508 <alt_find_file+0xa0>
   82504:	8005883a 	mov	r2,r16
}
   82508:	dfc00517 	ldw	ra,20(sp)
   8250c:	dd000417 	ldw	r20,16(sp)
   82510:	dcc00317 	ldw	r19,12(sp)
   82514:	dc800217 	ldw	r18,8(sp)
   82518:	dc400117 	ldw	r17,4(sp)
   8251c:	dc000017 	ldw	r16,0(sp)
   82520:	dec00604 	addi	sp,sp,24
   82524:	f800283a 	ret

00082528 <alt_get_fd>:
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
   82528:	00800234 	movhi	r2,8
   8252c:	109a4b04 	addi	r2,r2,26924
   82530:	10800017 	ldw	r2,0(r2)
   82534:	10000726 	beq	r2,zero,82554 <alt_get_fd+0x2c>
   82538:	00c00234 	movhi	r3,8
   8253c:	18da4e04 	addi	r3,r3,26936
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   82540:	00800044 	movi	r2,1
   82544:	01800804 	movi	r6,32
  {
    if (!alt_fd_list[i].dev)
   82548:	19400017 	ldw	r5,0(r3)
   8254c:	28000b1e 	bne	r5,zero,8257c <alt_get_fd+0x54>
   82550:	00000106 	br	82558 <alt_get_fd+0x30>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   82554:	0005883a 	mov	r2,zero
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
   82558:	10c00324 	muli	r3,r2,12
   8255c:	01400234 	movhi	r5,8
   82560:	295a4b04 	addi	r5,r5,26924
   82564:	28c7883a 	add	r3,r5,r3
   82568:	19000015 	stw	r4,0(r3)
      if (i > alt_max_fd)
   8256c:	d0e00217 	ldw	r3,-32760(gp)
   82570:	1880060e 	bge	r3,r2,8258c <alt_get_fd+0x64>
      {
        alt_max_fd = i;
   82574:	d0a00215 	stw	r2,-32760(gp)
   82578:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8257c:	10800044 	addi	r2,r2,1
   82580:	18c00304 	addi	r3,r3,12
   82584:	11bff01e 	bne	r2,r6,82548 <alt_get_fd+0x20>
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
   82588:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   8258c:	f800283a 	ret

00082590 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   82590:	00840004 	movi	r2,4096
   82594:	1140012e 	bgeu	r2,r5,8259c <alt_icache_flush+0xc>
   82598:	100b883a 	mov	r5,r2
   8259c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   825a0:	21400b2e 	bgeu	r4,r5,825d0 <alt_icache_flush+0x40>
   825a4:	2005883a 	mov	r2,r4
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   825a8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   825ac:	10800804 	addi	r2,r2,32
   825b0:	117ffd36 	bltu	r2,r5,825a8 <alt_icache_flush+0x18>
   825b4:	0104303a 	nor	r2,zero,r4
   825b8:	2885883a 	add	r2,r5,r2
   825bc:	1004d17a 	srli	r2,r2,5
   825c0:	10800044 	addi	r2,r2,1
   825c4:	1004917a 	slli	r2,r2,5
   825c8:	2085883a 	add	r2,r4,r2
   825cc:	00000106 	br	825d4 <alt_icache_flush+0x44>
   825d0:	2005883a 	mov	r2,r4
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   825d4:	210007cc 	andi	r4,r4,31
   825d8:	20000126 	beq	r4,zero,825e0 <alt_icache_flush+0x50>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   825dc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   825e0:	0000203a 	flushp
   825e4:	f800283a 	ret

000825e8 <exit>:
   825e8:	defffe04 	addi	sp,sp,-8
   825ec:	000b883a 	mov	r5,zero
   825f0:	dc000015 	stw	r16,0(sp)
   825f4:	dfc00115 	stw	ra,4(sp)
   825f8:	2021883a 	mov	r16,r4
   825fc:	0082c900 	call	82c90 <__call_exitprocs>
   82600:	00800234 	movhi	r2,8
   82604:	109ccb04 	addi	r2,r2,29484
   82608:	11000017 	ldw	r4,0(r2)
   8260c:	20800f17 	ldw	r2,60(r4)
   82610:	10000126 	beq	r2,zero,82618 <exit+0x30>
   82614:	103ee83a 	callr	r2
   82618:	8009883a 	mov	r4,r16
   8261c:	00849bc0 	call	849bc <_exit>

00082620 <memcmp>:
   82620:	01c000c4 	movi	r7,3
   82624:	3980192e 	bgeu	r7,r6,8268c <memcmp+0x6c>
   82628:	2144b03a 	or	r2,r4,r5
   8262c:	11c4703a 	and	r2,r2,r7
   82630:	10000f26 	beq	r2,zero,82670 <memcmp+0x50>
   82634:	20800003 	ldbu	r2,0(r4)
   82638:	28c00003 	ldbu	r3,0(r5)
   8263c:	10c0151e 	bne	r2,r3,82694 <memcmp+0x74>
   82640:	31bfff84 	addi	r6,r6,-2
   82644:	01ffffc4 	movi	r7,-1
   82648:	00000406 	br	8265c <memcmp+0x3c>
   8264c:	20800003 	ldbu	r2,0(r4)
   82650:	28c00003 	ldbu	r3,0(r5)
   82654:	31bfffc4 	addi	r6,r6,-1
   82658:	10c00e1e 	bne	r2,r3,82694 <memcmp+0x74>
   8265c:	21000044 	addi	r4,r4,1
   82660:	29400044 	addi	r5,r5,1
   82664:	31fff91e 	bne	r6,r7,8264c <memcmp+0x2c>
   82668:	0005883a 	mov	r2,zero
   8266c:	f800283a 	ret
   82670:	20c00017 	ldw	r3,0(r4)
   82674:	28800017 	ldw	r2,0(r5)
   82678:	18bfee1e 	bne	r3,r2,82634 <memcmp+0x14>
   8267c:	31bfff04 	addi	r6,r6,-4
   82680:	21000104 	addi	r4,r4,4
   82684:	29400104 	addi	r5,r5,4
   82688:	39bff936 	bltu	r7,r6,82670 <memcmp+0x50>
   8268c:	303fe91e 	bne	r6,zero,82634 <memcmp+0x14>
   82690:	003ff506 	br	82668 <memcmp+0x48>
   82694:	10c5c83a 	sub	r2,r2,r3
   82698:	f800283a 	ret

0008269c <memcpy>:
   8269c:	defffd04 	addi	sp,sp,-12
   826a0:	dfc00215 	stw	ra,8(sp)
   826a4:	dc400115 	stw	r17,4(sp)
   826a8:	dc000015 	stw	r16,0(sp)
   826ac:	00c003c4 	movi	r3,15
   826b0:	2005883a 	mov	r2,r4
   826b4:	1980452e 	bgeu	r3,r6,827cc <memcpy+0x130>
   826b8:	2906b03a 	or	r3,r5,r4
   826bc:	18c000cc 	andi	r3,r3,3
   826c0:	1800441e 	bne	r3,zero,827d4 <memcpy+0x138>
   826c4:	347ffc04 	addi	r17,r6,-16
   826c8:	8822d13a 	srli	r17,r17,4
   826cc:	28c00104 	addi	r3,r5,4
   826d0:	23400104 	addi	r13,r4,4
   826d4:	8820913a 	slli	r16,r17,4
   826d8:	2b000204 	addi	r12,r5,8
   826dc:	22c00204 	addi	r11,r4,8
   826e0:	84000504 	addi	r16,r16,20
   826e4:	2a800304 	addi	r10,r5,12
   826e8:	22400304 	addi	r9,r4,12
   826ec:	2c21883a 	add	r16,r5,r16
   826f0:	2811883a 	mov	r8,r5
   826f4:	200f883a 	mov	r7,r4
   826f8:	41000017 	ldw	r4,0(r8)
   826fc:	1fc00017 	ldw	ra,0(r3)
   82700:	63c00017 	ldw	r15,0(r12)
   82704:	39000015 	stw	r4,0(r7)
   82708:	53800017 	ldw	r14,0(r10)
   8270c:	6fc00015 	stw	ra,0(r13)
   82710:	5bc00015 	stw	r15,0(r11)
   82714:	4b800015 	stw	r14,0(r9)
   82718:	18c00404 	addi	r3,r3,16
   8271c:	39c00404 	addi	r7,r7,16
   82720:	42000404 	addi	r8,r8,16
   82724:	6b400404 	addi	r13,r13,16
   82728:	63000404 	addi	r12,r12,16
   8272c:	5ac00404 	addi	r11,r11,16
   82730:	52800404 	addi	r10,r10,16
   82734:	4a400404 	addi	r9,r9,16
   82738:	1c3fef1e 	bne	r3,r16,826f8 <memcpy+0x5c>
   8273c:	89c00044 	addi	r7,r17,1
   82740:	380e913a 	slli	r7,r7,4
   82744:	310003cc 	andi	r4,r6,15
   82748:	02c000c4 	movi	r11,3
   8274c:	11c7883a 	add	r3,r2,r7
   82750:	29cb883a 	add	r5,r5,r7
   82754:	5900212e 	bgeu	r11,r4,827dc <memcpy+0x140>
   82758:	1813883a 	mov	r9,r3
   8275c:	2811883a 	mov	r8,r5
   82760:	200f883a 	mov	r7,r4
   82764:	42800017 	ldw	r10,0(r8)
   82768:	4a400104 	addi	r9,r9,4
   8276c:	39ffff04 	addi	r7,r7,-4
   82770:	4abfff15 	stw	r10,-4(r9)
   82774:	42000104 	addi	r8,r8,4
   82778:	59fffa36 	bltu	r11,r7,82764 <memcpy+0xc8>
   8277c:	213fff04 	addi	r4,r4,-4
   82780:	2008d0ba 	srli	r4,r4,2
   82784:	318000cc 	andi	r6,r6,3
   82788:	21000044 	addi	r4,r4,1
   8278c:	2109883a 	add	r4,r4,r4
   82790:	2109883a 	add	r4,r4,r4
   82794:	1907883a 	add	r3,r3,r4
   82798:	290b883a 	add	r5,r5,r4
   8279c:	30000626 	beq	r6,zero,827b8 <memcpy+0x11c>
   827a0:	198d883a 	add	r6,r3,r6
   827a4:	29c00003 	ldbu	r7,0(r5)
   827a8:	18c00044 	addi	r3,r3,1
   827ac:	29400044 	addi	r5,r5,1
   827b0:	19ffffc5 	stb	r7,-1(r3)
   827b4:	19bffb1e 	bne	r3,r6,827a4 <memcpy+0x108>
   827b8:	dfc00217 	ldw	ra,8(sp)
   827bc:	dc400117 	ldw	r17,4(sp)
   827c0:	dc000017 	ldw	r16,0(sp)
   827c4:	dec00304 	addi	sp,sp,12
   827c8:	f800283a 	ret
   827cc:	2007883a 	mov	r3,r4
   827d0:	003ff206 	br	8279c <memcpy+0x100>
   827d4:	2007883a 	mov	r3,r4
   827d8:	003ff106 	br	827a0 <memcpy+0x104>
   827dc:	200d883a 	mov	r6,r4
   827e0:	003fee06 	br	8279c <memcpy+0x100>

000827e4 <_putc_r>:
   827e4:	defffc04 	addi	sp,sp,-16
   827e8:	dc000215 	stw	r16,8(sp)
   827ec:	dfc00315 	stw	ra,12(sp)
   827f0:	2021883a 	mov	r16,r4
   827f4:	20000226 	beq	r4,zero,82800 <_putc_r+0x1c>
   827f8:	20800e17 	ldw	r2,56(r4)
   827fc:	10001b26 	beq	r2,zero,8286c <_putc_r+0x88>
   82800:	30800217 	ldw	r2,8(r6)
   82804:	10bfffc4 	addi	r2,r2,-1
   82808:	30800215 	stw	r2,8(r6)
   8280c:	10000a16 	blt	r2,zero,82838 <_putc_r+0x54>
   82810:	30800017 	ldw	r2,0(r6)
   82814:	11400005 	stb	r5,0(r2)
   82818:	30800017 	ldw	r2,0(r6)
   8281c:	10c00044 	addi	r3,r2,1
   82820:	30c00015 	stw	r3,0(r6)
   82824:	10800003 	ldbu	r2,0(r2)
   82828:	dfc00317 	ldw	ra,12(sp)
   8282c:	dc000217 	ldw	r16,8(sp)
   82830:	dec00404 	addi	sp,sp,16
   82834:	f800283a 	ret
   82838:	30c00617 	ldw	r3,24(r6)
   8283c:	10c00616 	blt	r2,r3,82858 <_putc_r+0x74>
   82840:	30800017 	ldw	r2,0(r6)
   82844:	00c00284 	movi	r3,10
   82848:	11400005 	stb	r5,0(r2)
   8284c:	30800017 	ldw	r2,0(r6)
   82850:	11400003 	ldbu	r5,0(r2)
   82854:	28fff11e 	bne	r5,r3,8281c <_putc_r+0x38>
   82858:	8009883a 	mov	r4,r16
   8285c:	dfc00317 	ldw	ra,12(sp)
   82860:	dc000217 	ldw	r16,8(sp)
   82864:	dec00404 	addi	sp,sp,16
   82868:	00829e41 	jmpi	829e4 <__swbuf_r>
   8286c:	d9400015 	stw	r5,0(sp)
   82870:	d9800115 	stw	r6,4(sp)
   82874:	00834080 	call	83408 <__sinit>
   82878:	d9800117 	ldw	r6,4(sp)
   8287c:	d9400017 	ldw	r5,0(sp)
   82880:	003fdf06 	br	82800 <_putc_r+0x1c>

00082884 <putc>:
   82884:	00800234 	movhi	r2,8
   82888:	defffc04 	addi	sp,sp,-16
   8288c:	109ccc04 	addi	r2,r2,29488
   82890:	dc000115 	stw	r16,4(sp)
   82894:	14000017 	ldw	r16,0(r2)
   82898:	dc400215 	stw	r17,8(sp)
   8289c:	dfc00315 	stw	ra,12(sp)
   828a0:	2023883a 	mov	r17,r4
   828a4:	80000226 	beq	r16,zero,828b0 <putc+0x2c>
   828a8:	80800e17 	ldw	r2,56(r16)
   828ac:	10001a26 	beq	r2,zero,82918 <putc+0x94>
   828b0:	28800217 	ldw	r2,8(r5)
   828b4:	10bfffc4 	addi	r2,r2,-1
   828b8:	28800215 	stw	r2,8(r5)
   828bc:	10000b16 	blt	r2,zero,828ec <putc+0x68>
   828c0:	28800017 	ldw	r2,0(r5)
   828c4:	14400005 	stb	r17,0(r2)
   828c8:	28800017 	ldw	r2,0(r5)
   828cc:	10c00044 	addi	r3,r2,1
   828d0:	28c00015 	stw	r3,0(r5)
   828d4:	10800003 	ldbu	r2,0(r2)
   828d8:	dfc00317 	ldw	ra,12(sp)
   828dc:	dc400217 	ldw	r17,8(sp)
   828e0:	dc000117 	ldw	r16,4(sp)
   828e4:	dec00404 	addi	sp,sp,16
   828e8:	f800283a 	ret
   828ec:	28c00617 	ldw	r3,24(r5)
   828f0:	10c00e16 	blt	r2,r3,8292c <putc+0xa8>
   828f4:	28800017 	ldw	r2,0(r5)
   828f8:	01000284 	movi	r4,10
   828fc:	14400005 	stb	r17,0(r2)
   82900:	28800017 	ldw	r2,0(r5)
   82904:	10c00003 	ldbu	r3,0(r2)
   82908:	193ff01e 	bne	r3,r4,828cc <putc+0x48>
   8290c:	280d883a 	mov	r6,r5
   82910:	180b883a 	mov	r5,r3
   82914:	00000706 	br	82934 <putc+0xb0>
   82918:	8009883a 	mov	r4,r16
   8291c:	d9400015 	stw	r5,0(sp)
   82920:	00834080 	call	83408 <__sinit>
   82924:	d9400017 	ldw	r5,0(sp)
   82928:	003fe106 	br	828b0 <putc+0x2c>
   8292c:	280d883a 	mov	r6,r5
   82930:	880b883a 	mov	r5,r17
   82934:	8009883a 	mov	r4,r16
   82938:	dfc00317 	ldw	ra,12(sp)
   8293c:	dc400217 	ldw	r17,8(sp)
   82940:	dc000117 	ldw	r16,4(sp)
   82944:	dec00404 	addi	sp,sp,16
   82948:	00829e41 	jmpi	829e4 <__swbuf_r>

0008294c <strlen>:
   8294c:	208000cc 	andi	r2,r4,3
   82950:	10002026 	beq	r2,zero,829d4 <strlen+0x88>
   82954:	20800007 	ldb	r2,0(r4)
   82958:	10002026 	beq	r2,zero,829dc <strlen+0x90>
   8295c:	2005883a 	mov	r2,r4
   82960:	00000206 	br	8296c <strlen+0x20>
   82964:	10c00007 	ldb	r3,0(r2)
   82968:	18001826 	beq	r3,zero,829cc <strlen+0x80>
   8296c:	10800044 	addi	r2,r2,1
   82970:	10c000cc 	andi	r3,r2,3
   82974:	183ffb1e 	bne	r3,zero,82964 <strlen+0x18>
   82978:	10c00017 	ldw	r3,0(r2)
   8297c:	01ffbff4 	movhi	r7,65279
   82980:	39ffbfc4 	addi	r7,r7,-257
   82984:	00ca303a 	nor	r5,zero,r3
   82988:	01a02074 	movhi	r6,32897
   8298c:	19c7883a 	add	r3,r3,r7
   82990:	31a02004 	addi	r6,r6,-32640
   82994:	1946703a 	and	r3,r3,r5
   82998:	1986703a 	and	r3,r3,r6
   8299c:	1800091e 	bne	r3,zero,829c4 <strlen+0x78>
   829a0:	10800104 	addi	r2,r2,4
   829a4:	10c00017 	ldw	r3,0(r2)
   829a8:	19cb883a 	add	r5,r3,r7
   829ac:	00c6303a 	nor	r3,zero,r3
   829b0:	28c6703a 	and	r3,r5,r3
   829b4:	1986703a 	and	r3,r3,r6
   829b8:	183ff926 	beq	r3,zero,829a0 <strlen+0x54>
   829bc:	00000106 	br	829c4 <strlen+0x78>
   829c0:	10800044 	addi	r2,r2,1
   829c4:	10c00007 	ldb	r3,0(r2)
   829c8:	183ffd1e 	bne	r3,zero,829c0 <strlen+0x74>
   829cc:	1105c83a 	sub	r2,r2,r4
   829d0:	f800283a 	ret
   829d4:	2005883a 	mov	r2,r4
   829d8:	003fe706 	br	82978 <strlen+0x2c>
   829dc:	0005883a 	mov	r2,zero
   829e0:	f800283a 	ret

000829e4 <__swbuf_r>:
   829e4:	defffb04 	addi	sp,sp,-20
   829e8:	dcc00315 	stw	r19,12(sp)
   829ec:	dc800215 	stw	r18,8(sp)
   829f0:	dc000015 	stw	r16,0(sp)
   829f4:	dfc00415 	stw	ra,16(sp)
   829f8:	dc400115 	stw	r17,4(sp)
   829fc:	2025883a 	mov	r18,r4
   82a00:	2827883a 	mov	r19,r5
   82a04:	3021883a 	mov	r16,r6
   82a08:	20000226 	beq	r4,zero,82a14 <__swbuf_r+0x30>
   82a0c:	20800e17 	ldw	r2,56(r4)
   82a10:	10004226 	beq	r2,zero,82b1c <__swbuf_r+0x138>
   82a14:	80800617 	ldw	r2,24(r16)
   82a18:	8100030b 	ldhu	r4,12(r16)
   82a1c:	80800215 	stw	r2,8(r16)
   82a20:	2080020c 	andi	r2,r4,8
   82a24:	10003626 	beq	r2,zero,82b00 <__swbuf_r+0x11c>
   82a28:	80c00417 	ldw	r3,16(r16)
   82a2c:	18003426 	beq	r3,zero,82b00 <__swbuf_r+0x11c>
   82a30:	2088000c 	andi	r2,r4,8192
   82a34:	9c403fcc 	andi	r17,r19,255
   82a38:	10001a26 	beq	r2,zero,82aa4 <__swbuf_r+0xc0>
   82a3c:	80800017 	ldw	r2,0(r16)
   82a40:	81000517 	ldw	r4,20(r16)
   82a44:	10c7c83a 	sub	r3,r2,r3
   82a48:	1900200e 	bge	r3,r4,82acc <__swbuf_r+0xe8>
   82a4c:	18c00044 	addi	r3,r3,1
   82a50:	81000217 	ldw	r4,8(r16)
   82a54:	11400044 	addi	r5,r2,1
   82a58:	81400015 	stw	r5,0(r16)
   82a5c:	213fffc4 	addi	r4,r4,-1
   82a60:	81000215 	stw	r4,8(r16)
   82a64:	14c00005 	stb	r19,0(r2)
   82a68:	80800517 	ldw	r2,20(r16)
   82a6c:	10c01e26 	beq	r2,r3,82ae8 <__swbuf_r+0x104>
   82a70:	8080030b 	ldhu	r2,12(r16)
   82a74:	1080004c 	andi	r2,r2,1
   82a78:	10000226 	beq	r2,zero,82a84 <__swbuf_r+0xa0>
   82a7c:	00800284 	movi	r2,10
   82a80:	88801926 	beq	r17,r2,82ae8 <__swbuf_r+0x104>
   82a84:	8805883a 	mov	r2,r17
   82a88:	dfc00417 	ldw	ra,16(sp)
   82a8c:	dcc00317 	ldw	r19,12(sp)
   82a90:	dc800217 	ldw	r18,8(sp)
   82a94:	dc400117 	ldw	r17,4(sp)
   82a98:	dc000017 	ldw	r16,0(sp)
   82a9c:	dec00504 	addi	sp,sp,20
   82aa0:	f800283a 	ret
   82aa4:	81401917 	ldw	r5,100(r16)
   82aa8:	00b7ffc4 	movi	r2,-8193
   82aac:	21080014 	ori	r4,r4,8192
   82ab0:	2884703a 	and	r2,r5,r2
   82ab4:	80801915 	stw	r2,100(r16)
   82ab8:	80800017 	ldw	r2,0(r16)
   82abc:	8100030d 	sth	r4,12(r16)
   82ac0:	81000517 	ldw	r4,20(r16)
   82ac4:	10c7c83a 	sub	r3,r2,r3
   82ac8:	193fe016 	blt	r3,r4,82a4c <__swbuf_r+0x68>
   82acc:	800b883a 	mov	r5,r16
   82ad0:	9009883a 	mov	r4,r18
   82ad4:	008302c0 	call	8302c <_fflush_r>
   82ad8:	1000071e 	bne	r2,zero,82af8 <__swbuf_r+0x114>
   82adc:	80800017 	ldw	r2,0(r16)
   82ae0:	00c00044 	movi	r3,1
   82ae4:	003fda06 	br	82a50 <__swbuf_r+0x6c>
   82ae8:	800b883a 	mov	r5,r16
   82aec:	9009883a 	mov	r4,r18
   82af0:	008302c0 	call	8302c <_fflush_r>
   82af4:	103fe326 	beq	r2,zero,82a84 <__swbuf_r+0xa0>
   82af8:	00bfffc4 	movi	r2,-1
   82afc:	003fe206 	br	82a88 <__swbuf_r+0xa4>
   82b00:	800b883a 	mov	r5,r16
   82b04:	9009883a 	mov	r4,r18
   82b08:	0082b3c0 	call	82b3c <__swsetup_r>
   82b0c:	103ffa1e 	bne	r2,zero,82af8 <__swbuf_r+0x114>
   82b10:	8100030b 	ldhu	r4,12(r16)
   82b14:	80c00417 	ldw	r3,16(r16)
   82b18:	003fc506 	br	82a30 <__swbuf_r+0x4c>
   82b1c:	00834080 	call	83408 <__sinit>
   82b20:	003fbc06 	br	82a14 <__swbuf_r+0x30>

00082b24 <__swbuf>:
   82b24:	00800234 	movhi	r2,8
   82b28:	109ccc04 	addi	r2,r2,29488
   82b2c:	280d883a 	mov	r6,r5
   82b30:	200b883a 	mov	r5,r4
   82b34:	11000017 	ldw	r4,0(r2)
   82b38:	00829e41 	jmpi	829e4 <__swbuf_r>

00082b3c <__swsetup_r>:
   82b3c:	00800234 	movhi	r2,8
   82b40:	defffd04 	addi	sp,sp,-12
   82b44:	109ccc04 	addi	r2,r2,29488
   82b48:	dc400115 	stw	r17,4(sp)
   82b4c:	2023883a 	mov	r17,r4
   82b50:	11000017 	ldw	r4,0(r2)
   82b54:	dc000015 	stw	r16,0(sp)
   82b58:	dfc00215 	stw	ra,8(sp)
   82b5c:	2821883a 	mov	r16,r5
   82b60:	20000226 	beq	r4,zero,82b6c <__swsetup_r+0x30>
   82b64:	20800e17 	ldw	r2,56(r4)
   82b68:	10003126 	beq	r2,zero,82c30 <__swsetup_r+0xf4>
   82b6c:	8080030b 	ldhu	r2,12(r16)
   82b70:	10c0020c 	andi	r3,r2,8
   82b74:	1009883a 	mov	r4,r2
   82b78:	18000f26 	beq	r3,zero,82bb8 <__swsetup_r+0x7c>
   82b7c:	80c00417 	ldw	r3,16(r16)
   82b80:	18001526 	beq	r3,zero,82bd8 <__swsetup_r+0x9c>
   82b84:	1100004c 	andi	r4,r2,1
   82b88:	20001c1e 	bne	r4,zero,82bfc <__swsetup_r+0xc0>
   82b8c:	1080008c 	andi	r2,r2,2
   82b90:	1000291e 	bne	r2,zero,82c38 <__swsetup_r+0xfc>
   82b94:	80800517 	ldw	r2,20(r16)
   82b98:	80800215 	stw	r2,8(r16)
   82b9c:	18001c26 	beq	r3,zero,82c10 <__swsetup_r+0xd4>
   82ba0:	0005883a 	mov	r2,zero
   82ba4:	dfc00217 	ldw	ra,8(sp)
   82ba8:	dc400117 	ldw	r17,4(sp)
   82bac:	dc000017 	ldw	r16,0(sp)
   82bb0:	dec00304 	addi	sp,sp,12
   82bb4:	f800283a 	ret
   82bb8:	2080040c 	andi	r2,r4,16
   82bbc:	10002e26 	beq	r2,zero,82c78 <__swsetup_r+0x13c>
   82bc0:	2080010c 	andi	r2,r4,4
   82bc4:	10001e1e 	bne	r2,zero,82c40 <__swsetup_r+0x104>
   82bc8:	80c00417 	ldw	r3,16(r16)
   82bcc:	20800214 	ori	r2,r4,8
   82bd0:	8080030d 	sth	r2,12(r16)
   82bd4:	183feb1e 	bne	r3,zero,82b84 <__swsetup_r+0x48>
   82bd8:	1100a00c 	andi	r4,r2,640
   82bdc:	01408004 	movi	r5,512
   82be0:	217fe826 	beq	r4,r5,82b84 <__swsetup_r+0x48>
   82be4:	800b883a 	mov	r5,r16
   82be8:	8809883a 	mov	r4,r17
   82bec:	0083a140 	call	83a14 <__smakebuf_r>
   82bf0:	8080030b 	ldhu	r2,12(r16)
   82bf4:	80c00417 	ldw	r3,16(r16)
   82bf8:	003fe206 	br	82b84 <__swsetup_r+0x48>
   82bfc:	80800517 	ldw	r2,20(r16)
   82c00:	80000215 	stw	zero,8(r16)
   82c04:	0085c83a 	sub	r2,zero,r2
   82c08:	80800615 	stw	r2,24(r16)
   82c0c:	183fe41e 	bne	r3,zero,82ba0 <__swsetup_r+0x64>
   82c10:	80c0030b 	ldhu	r3,12(r16)
   82c14:	0005883a 	mov	r2,zero
   82c18:	1900200c 	andi	r4,r3,128
   82c1c:	203fe126 	beq	r4,zero,82ba4 <__swsetup_r+0x68>
   82c20:	18c01014 	ori	r3,r3,64
   82c24:	80c0030d 	sth	r3,12(r16)
   82c28:	00bfffc4 	movi	r2,-1
   82c2c:	003fdd06 	br	82ba4 <__swsetup_r+0x68>
   82c30:	00834080 	call	83408 <__sinit>
   82c34:	003fcd06 	br	82b6c <__swsetup_r+0x30>
   82c38:	0005883a 	mov	r2,zero
   82c3c:	003fd606 	br	82b98 <__swsetup_r+0x5c>
   82c40:	81400c17 	ldw	r5,48(r16)
   82c44:	28000626 	beq	r5,zero,82c60 <__swsetup_r+0x124>
   82c48:	80801004 	addi	r2,r16,64
   82c4c:	28800326 	beq	r5,r2,82c5c <__swsetup_r+0x120>
   82c50:	8809883a 	mov	r4,r17
   82c54:	008357c0 	call	8357c <_free_r>
   82c58:	8100030b 	ldhu	r4,12(r16)
   82c5c:	80000c15 	stw	zero,48(r16)
   82c60:	80c00417 	ldw	r3,16(r16)
   82c64:	00bff6c4 	movi	r2,-37
   82c68:	1108703a 	and	r4,r2,r4
   82c6c:	80000115 	stw	zero,4(r16)
   82c70:	80c00015 	stw	r3,0(r16)
   82c74:	003fd506 	br	82bcc <__swsetup_r+0x90>
   82c78:	00800244 	movi	r2,9
   82c7c:	88800015 	stw	r2,0(r17)
   82c80:	20801014 	ori	r2,r4,64
   82c84:	8080030d 	sth	r2,12(r16)
   82c88:	00bfffc4 	movi	r2,-1
   82c8c:	003fc506 	br	82ba4 <__swsetup_r+0x68>

00082c90 <__call_exitprocs>:
   82c90:	defff504 	addi	sp,sp,-44
   82c94:	df000915 	stw	fp,36(sp)
   82c98:	dd400615 	stw	r21,24(sp)
   82c9c:	dc800315 	stw	r18,12(sp)
   82ca0:	dfc00a15 	stw	ra,40(sp)
   82ca4:	ddc00815 	stw	r23,32(sp)
   82ca8:	dd800715 	stw	r22,28(sp)
   82cac:	dd000515 	stw	r20,20(sp)
   82cb0:	dcc00415 	stw	r19,16(sp)
   82cb4:	dc400215 	stw	r17,8(sp)
   82cb8:	dc000115 	stw	r16,4(sp)
   82cbc:	d9000015 	stw	r4,0(sp)
   82cc0:	2839883a 	mov	fp,r5
   82cc4:	04800044 	movi	r18,1
   82cc8:	057fffc4 	movi	r21,-1
   82ccc:	00800234 	movhi	r2,8
   82cd0:	109ccb04 	addi	r2,r2,29484
   82cd4:	12000017 	ldw	r8,0(r2)
   82cd8:	45005217 	ldw	r20,328(r8)
   82cdc:	44c05204 	addi	r19,r8,328
   82ce0:	a0001c26 	beq	r20,zero,82d54 <__call_exitprocs+0xc4>
   82ce4:	a0800117 	ldw	r2,4(r20)
   82ce8:	15ffffc4 	addi	r23,r2,-1
   82cec:	b8000d16 	blt	r23,zero,82d24 <__call_exitprocs+0x94>
   82cf0:	14000044 	addi	r16,r2,1
   82cf4:	8421883a 	add	r16,r16,r16
   82cf8:	8421883a 	add	r16,r16,r16
   82cfc:	84402004 	addi	r17,r16,128
   82d00:	a463883a 	add	r17,r20,r17
   82d04:	a421883a 	add	r16,r20,r16
   82d08:	e0001e26 	beq	fp,zero,82d84 <__call_exitprocs+0xf4>
   82d0c:	80804017 	ldw	r2,256(r16)
   82d10:	e0801c26 	beq	fp,r2,82d84 <__call_exitprocs+0xf4>
   82d14:	bdffffc4 	addi	r23,r23,-1
   82d18:	843fff04 	addi	r16,r16,-4
   82d1c:	8c7fff04 	addi	r17,r17,-4
   82d20:	bd7ff91e 	bne	r23,r21,82d08 <__call_exitprocs+0x78>
   82d24:	00800034 	movhi	r2,0
   82d28:	10800004 	addi	r2,r2,0
   82d2c:	10000926 	beq	r2,zero,82d54 <__call_exitprocs+0xc4>
   82d30:	a0800117 	ldw	r2,4(r20)
   82d34:	1000301e 	bne	r2,zero,82df8 <__call_exitprocs+0x168>
   82d38:	a0800017 	ldw	r2,0(r20)
   82d3c:	10003226 	beq	r2,zero,82e08 <__call_exitprocs+0x178>
   82d40:	a009883a 	mov	r4,r20
   82d44:	98800015 	stw	r2,0(r19)
   82d48:	00000000 	call	0 <__alt_mem_main_memory-0x80000>
   82d4c:	9d000017 	ldw	r20,0(r19)
   82d50:	a03fe41e 	bne	r20,zero,82ce4 <__call_exitprocs+0x54>
   82d54:	dfc00a17 	ldw	ra,40(sp)
   82d58:	df000917 	ldw	fp,36(sp)
   82d5c:	ddc00817 	ldw	r23,32(sp)
   82d60:	dd800717 	ldw	r22,28(sp)
   82d64:	dd400617 	ldw	r21,24(sp)
   82d68:	dd000517 	ldw	r20,20(sp)
   82d6c:	dcc00417 	ldw	r19,16(sp)
   82d70:	dc800317 	ldw	r18,12(sp)
   82d74:	dc400217 	ldw	r17,8(sp)
   82d78:	dc000117 	ldw	r16,4(sp)
   82d7c:	dec00b04 	addi	sp,sp,44
   82d80:	f800283a 	ret
   82d84:	a0800117 	ldw	r2,4(r20)
   82d88:	80c00017 	ldw	r3,0(r16)
   82d8c:	10bfffc4 	addi	r2,r2,-1
   82d90:	15c01426 	beq	r2,r23,82de4 <__call_exitprocs+0x154>
   82d94:	80000015 	stw	zero,0(r16)
   82d98:	183fde26 	beq	r3,zero,82d14 <__call_exitprocs+0x84>
   82d9c:	95c8983a 	sll	r4,r18,r23
   82da0:	a0806217 	ldw	r2,392(r20)
   82da4:	a5800117 	ldw	r22,4(r20)
   82da8:	2084703a 	and	r2,r4,r2
   82dac:	10000b26 	beq	r2,zero,82ddc <__call_exitprocs+0x14c>
   82db0:	a0806317 	ldw	r2,396(r20)
   82db4:	2088703a 	and	r4,r4,r2
   82db8:	20000c1e 	bne	r4,zero,82dec <__call_exitprocs+0x15c>
   82dbc:	89400017 	ldw	r5,0(r17)
   82dc0:	d9000017 	ldw	r4,0(sp)
   82dc4:	183ee83a 	callr	r3
   82dc8:	a0800117 	ldw	r2,4(r20)
   82dcc:	15bfbf1e 	bne	r2,r22,82ccc <__call_exitprocs+0x3c>
   82dd0:	98800017 	ldw	r2,0(r19)
   82dd4:	153fcf26 	beq	r2,r20,82d14 <__call_exitprocs+0x84>
   82dd8:	003fbc06 	br	82ccc <__call_exitprocs+0x3c>
   82ddc:	183ee83a 	callr	r3
   82de0:	003ff906 	br	82dc8 <__call_exitprocs+0x138>
   82de4:	a5c00115 	stw	r23,4(r20)
   82de8:	003feb06 	br	82d98 <__call_exitprocs+0x108>
   82dec:	89000017 	ldw	r4,0(r17)
   82df0:	183ee83a 	callr	r3
   82df4:	003ff406 	br	82dc8 <__call_exitprocs+0x138>
   82df8:	a0800017 	ldw	r2,0(r20)
   82dfc:	a027883a 	mov	r19,r20
   82e00:	1029883a 	mov	r20,r2
   82e04:	003fb606 	br	82ce0 <__call_exitprocs+0x50>
   82e08:	0005883a 	mov	r2,zero
   82e0c:	003ffb06 	br	82dfc <__call_exitprocs+0x16c>

00082e10 <__sflush_r>:
   82e10:	2880030b 	ldhu	r2,12(r5)
   82e14:	defffb04 	addi	sp,sp,-20
   82e18:	dcc00315 	stw	r19,12(sp)
   82e1c:	dc400115 	stw	r17,4(sp)
   82e20:	dfc00415 	stw	ra,16(sp)
   82e24:	dc800215 	stw	r18,8(sp)
   82e28:	dc000015 	stw	r16,0(sp)
   82e2c:	10c0020c 	andi	r3,r2,8
   82e30:	2823883a 	mov	r17,r5
   82e34:	2027883a 	mov	r19,r4
   82e38:	1800311e 	bne	r3,zero,82f00 <__sflush_r+0xf0>
   82e3c:	28c00117 	ldw	r3,4(r5)
   82e40:	10820014 	ori	r2,r2,2048
   82e44:	2880030d 	sth	r2,12(r5)
   82e48:	00c04b0e 	bge	zero,r3,82f78 <__sflush_r+0x168>
   82e4c:	8a000a17 	ldw	r8,40(r17)
   82e50:	40002326 	beq	r8,zero,82ee0 <__sflush_r+0xd0>
   82e54:	9c000017 	ldw	r16,0(r19)
   82e58:	10c4000c 	andi	r3,r2,4096
   82e5c:	98000015 	stw	zero,0(r19)
   82e60:	18004826 	beq	r3,zero,82f84 <__sflush_r+0x174>
   82e64:	89801417 	ldw	r6,80(r17)
   82e68:	10c0010c 	andi	r3,r2,4
   82e6c:	18000626 	beq	r3,zero,82e88 <__sflush_r+0x78>
   82e70:	88c00117 	ldw	r3,4(r17)
   82e74:	88800c17 	ldw	r2,48(r17)
   82e78:	30cdc83a 	sub	r6,r6,r3
   82e7c:	10000226 	beq	r2,zero,82e88 <__sflush_r+0x78>
   82e80:	88800f17 	ldw	r2,60(r17)
   82e84:	308dc83a 	sub	r6,r6,r2
   82e88:	89400717 	ldw	r5,28(r17)
   82e8c:	000f883a 	mov	r7,zero
   82e90:	9809883a 	mov	r4,r19
   82e94:	403ee83a 	callr	r8
   82e98:	00ffffc4 	movi	r3,-1
   82e9c:	10c04426 	beq	r2,r3,82fb0 <__sflush_r+0x1a0>
   82ea0:	88c0030b 	ldhu	r3,12(r17)
   82ea4:	89000417 	ldw	r4,16(r17)
   82ea8:	88000115 	stw	zero,4(r17)
   82eac:	197dffcc 	andi	r5,r3,63487
   82eb0:	8940030d 	sth	r5,12(r17)
   82eb4:	89000015 	stw	r4,0(r17)
   82eb8:	18c4000c 	andi	r3,r3,4096
   82ebc:	18002c1e 	bne	r3,zero,82f70 <__sflush_r+0x160>
   82ec0:	89400c17 	ldw	r5,48(r17)
   82ec4:	9c000015 	stw	r16,0(r19)
   82ec8:	28000526 	beq	r5,zero,82ee0 <__sflush_r+0xd0>
   82ecc:	88801004 	addi	r2,r17,64
   82ed0:	28800226 	beq	r5,r2,82edc <__sflush_r+0xcc>
   82ed4:	9809883a 	mov	r4,r19
   82ed8:	008357c0 	call	8357c <_free_r>
   82edc:	88000c15 	stw	zero,48(r17)
   82ee0:	0005883a 	mov	r2,zero
   82ee4:	dfc00417 	ldw	ra,16(sp)
   82ee8:	dcc00317 	ldw	r19,12(sp)
   82eec:	dc800217 	ldw	r18,8(sp)
   82ef0:	dc400117 	ldw	r17,4(sp)
   82ef4:	dc000017 	ldw	r16,0(sp)
   82ef8:	dec00504 	addi	sp,sp,20
   82efc:	f800283a 	ret
   82f00:	2c800417 	ldw	r18,16(r5)
   82f04:	903ff626 	beq	r18,zero,82ee0 <__sflush_r+0xd0>
   82f08:	2c000017 	ldw	r16,0(r5)
   82f0c:	108000cc 	andi	r2,r2,3
   82f10:	2c800015 	stw	r18,0(r5)
   82f14:	84a1c83a 	sub	r16,r16,r18
   82f18:	1000131e 	bne	r2,zero,82f68 <__sflush_r+0x158>
   82f1c:	28800517 	ldw	r2,20(r5)
   82f20:	88800215 	stw	r2,8(r17)
   82f24:	04000316 	blt	zero,r16,82f34 <__sflush_r+0x124>
   82f28:	003fed06 	br	82ee0 <__sflush_r+0xd0>
   82f2c:	90a5883a 	add	r18,r18,r2
   82f30:	043feb0e 	bge	zero,r16,82ee0 <__sflush_r+0xd0>
   82f34:	88800917 	ldw	r2,36(r17)
   82f38:	89400717 	ldw	r5,28(r17)
   82f3c:	800f883a 	mov	r7,r16
   82f40:	900d883a 	mov	r6,r18
   82f44:	9809883a 	mov	r4,r19
   82f48:	103ee83a 	callr	r2
   82f4c:	80a1c83a 	sub	r16,r16,r2
   82f50:	00bff616 	blt	zero,r2,82f2c <__sflush_r+0x11c>
   82f54:	88c0030b 	ldhu	r3,12(r17)
   82f58:	00bfffc4 	movi	r2,-1
   82f5c:	18c01014 	ori	r3,r3,64
   82f60:	88c0030d 	sth	r3,12(r17)
   82f64:	003fdf06 	br	82ee4 <__sflush_r+0xd4>
   82f68:	0005883a 	mov	r2,zero
   82f6c:	003fec06 	br	82f20 <__sflush_r+0x110>
   82f70:	88801415 	stw	r2,80(r17)
   82f74:	003fd206 	br	82ec0 <__sflush_r+0xb0>
   82f78:	28c00f17 	ldw	r3,60(r5)
   82f7c:	00ffb316 	blt	zero,r3,82e4c <__sflush_r+0x3c>
   82f80:	003fd706 	br	82ee0 <__sflush_r+0xd0>
   82f84:	89400717 	ldw	r5,28(r17)
   82f88:	000d883a 	mov	r6,zero
   82f8c:	01c00044 	movi	r7,1
   82f90:	9809883a 	mov	r4,r19
   82f94:	403ee83a 	callr	r8
   82f98:	100d883a 	mov	r6,r2
   82f9c:	00bfffc4 	movi	r2,-1
   82fa0:	30801426 	beq	r6,r2,82ff4 <__sflush_r+0x1e4>
   82fa4:	8880030b 	ldhu	r2,12(r17)
   82fa8:	8a000a17 	ldw	r8,40(r17)
   82fac:	003fae06 	br	82e68 <__sflush_r+0x58>
   82fb0:	98c00017 	ldw	r3,0(r19)
   82fb4:	183fba26 	beq	r3,zero,82ea0 <__sflush_r+0x90>
   82fb8:	01000744 	movi	r4,29
   82fbc:	19000626 	beq	r3,r4,82fd8 <__sflush_r+0x1c8>
   82fc0:	01000584 	movi	r4,22
   82fc4:	19000426 	beq	r3,r4,82fd8 <__sflush_r+0x1c8>
   82fc8:	88c0030b 	ldhu	r3,12(r17)
   82fcc:	18c01014 	ori	r3,r3,64
   82fd0:	88c0030d 	sth	r3,12(r17)
   82fd4:	003fc306 	br	82ee4 <__sflush_r+0xd4>
   82fd8:	8880030b 	ldhu	r2,12(r17)
   82fdc:	88c00417 	ldw	r3,16(r17)
   82fe0:	88000115 	stw	zero,4(r17)
   82fe4:	10bdffcc 	andi	r2,r2,63487
   82fe8:	8880030d 	sth	r2,12(r17)
   82fec:	88c00015 	stw	r3,0(r17)
   82ff0:	003fb306 	br	82ec0 <__sflush_r+0xb0>
   82ff4:	98800017 	ldw	r2,0(r19)
   82ff8:	103fea26 	beq	r2,zero,82fa4 <__sflush_r+0x194>
   82ffc:	00c00744 	movi	r3,29
   83000:	10c00226 	beq	r2,r3,8300c <__sflush_r+0x1fc>
   83004:	00c00584 	movi	r3,22
   83008:	10c0031e 	bne	r2,r3,83018 <__sflush_r+0x208>
   8300c:	9c000015 	stw	r16,0(r19)
   83010:	0005883a 	mov	r2,zero
   83014:	003fb306 	br	82ee4 <__sflush_r+0xd4>
   83018:	88c0030b 	ldhu	r3,12(r17)
   8301c:	3005883a 	mov	r2,r6
   83020:	18c01014 	ori	r3,r3,64
   83024:	88c0030d 	sth	r3,12(r17)
   83028:	003fae06 	br	82ee4 <__sflush_r+0xd4>

0008302c <_fflush_r>:
   8302c:	defffd04 	addi	sp,sp,-12
   83030:	dc000115 	stw	r16,4(sp)
   83034:	dfc00215 	stw	ra,8(sp)
   83038:	2021883a 	mov	r16,r4
   8303c:	20000226 	beq	r4,zero,83048 <_fflush_r+0x1c>
   83040:	20800e17 	ldw	r2,56(r4)
   83044:	10000c26 	beq	r2,zero,83078 <_fflush_r+0x4c>
   83048:	2880030f 	ldh	r2,12(r5)
   8304c:	1000051e 	bne	r2,zero,83064 <_fflush_r+0x38>
   83050:	0005883a 	mov	r2,zero
   83054:	dfc00217 	ldw	ra,8(sp)
   83058:	dc000117 	ldw	r16,4(sp)
   8305c:	dec00304 	addi	sp,sp,12
   83060:	f800283a 	ret
   83064:	8009883a 	mov	r4,r16
   83068:	dfc00217 	ldw	ra,8(sp)
   8306c:	dc000117 	ldw	r16,4(sp)
   83070:	dec00304 	addi	sp,sp,12
   83074:	0082e101 	jmpi	82e10 <__sflush_r>
   83078:	d9400015 	stw	r5,0(sp)
   8307c:	00834080 	call	83408 <__sinit>
   83080:	d9400017 	ldw	r5,0(sp)
   83084:	003ff006 	br	83048 <_fflush_r+0x1c>

00083088 <fflush>:
   83088:	20000526 	beq	r4,zero,830a0 <fflush+0x18>
   8308c:	00800234 	movhi	r2,8
   83090:	109ccc04 	addi	r2,r2,29488
   83094:	200b883a 	mov	r5,r4
   83098:	11000017 	ldw	r4,0(r2)
   8309c:	008302c1 	jmpi	8302c <_fflush_r>
   830a0:	00800234 	movhi	r2,8
   830a4:	109ccb04 	addi	r2,r2,29484
   830a8:	11000017 	ldw	r4,0(r2)
   830ac:	01400234 	movhi	r5,8
   830b0:	294c0b04 	addi	r5,r5,12332
   830b4:	00839501 	jmpi	83950 <_fwalk_reent>

000830b8 <__fp_unlock>:
   830b8:	0005883a 	mov	r2,zero
   830bc:	f800283a 	ret

000830c0 <_cleanup_r>:
   830c0:	01400234 	movhi	r5,8
   830c4:	2951d204 	addi	r5,r5,18248
   830c8:	00839501 	jmpi	83950 <_fwalk_reent>

000830cc <__sinit.part.1>:
   830cc:	defff704 	addi	sp,sp,-36
   830d0:	00c00234 	movhi	r3,8
   830d4:	dfc00815 	stw	ra,32(sp)
   830d8:	ddc00715 	stw	r23,28(sp)
   830dc:	dd800615 	stw	r22,24(sp)
   830e0:	dd400515 	stw	r21,20(sp)
   830e4:	dd000415 	stw	r20,16(sp)
   830e8:	dcc00315 	stw	r19,12(sp)
   830ec:	dc800215 	stw	r18,8(sp)
   830f0:	dc400115 	stw	r17,4(sp)
   830f4:	dc000015 	stw	r16,0(sp)
   830f8:	18cc3004 	addi	r3,r3,12480
   830fc:	24000117 	ldw	r16,4(r4)
   83100:	20c00f15 	stw	r3,60(r4)
   83104:	2080bb04 	addi	r2,r4,748
   83108:	00c000c4 	movi	r3,3
   8310c:	20c0b915 	stw	r3,740(r4)
   83110:	2080ba15 	stw	r2,744(r4)
   83114:	2000b815 	stw	zero,736(r4)
   83118:	05c00204 	movi	r23,8
   8311c:	00800104 	movi	r2,4
   83120:	2025883a 	mov	r18,r4
   83124:	b80d883a 	mov	r6,r23
   83128:	81001704 	addi	r4,r16,92
   8312c:	000b883a 	mov	r5,zero
   83130:	80000015 	stw	zero,0(r16)
   83134:	80000115 	stw	zero,4(r16)
   83138:	80000215 	stw	zero,8(r16)
   8313c:	8080030d 	sth	r2,12(r16)
   83140:	80001915 	stw	zero,100(r16)
   83144:	8000038d 	sth	zero,14(r16)
   83148:	80000415 	stw	zero,16(r16)
   8314c:	80000515 	stw	zero,20(r16)
   83150:	80000615 	stw	zero,24(r16)
   83154:	00843dc0 	call	843dc <memset>
   83158:	05800234 	movhi	r22,8
   8315c:	94400217 	ldw	r17,8(r18)
   83160:	05400234 	movhi	r21,8
   83164:	05000234 	movhi	r20,8
   83168:	04c00234 	movhi	r19,8
   8316c:	b5915604 	addi	r22,r22,17752
   83170:	ad516d04 	addi	r21,r21,17844
   83174:	a5118c04 	addi	r20,r20,17968
   83178:	9cd1a304 	addi	r19,r19,18060
   8317c:	85800815 	stw	r22,32(r16)
   83180:	85400915 	stw	r21,36(r16)
   83184:	85000a15 	stw	r20,40(r16)
   83188:	84c00b15 	stw	r19,44(r16)
   8318c:	84000715 	stw	r16,28(r16)
   83190:	00800284 	movi	r2,10
   83194:	8880030d 	sth	r2,12(r17)
   83198:	00800044 	movi	r2,1
   8319c:	b80d883a 	mov	r6,r23
   831a0:	89001704 	addi	r4,r17,92
   831a4:	000b883a 	mov	r5,zero
   831a8:	88000015 	stw	zero,0(r17)
   831ac:	88000115 	stw	zero,4(r17)
   831b0:	88000215 	stw	zero,8(r17)
   831b4:	88001915 	stw	zero,100(r17)
   831b8:	8880038d 	sth	r2,14(r17)
   831bc:	88000415 	stw	zero,16(r17)
   831c0:	88000515 	stw	zero,20(r17)
   831c4:	88000615 	stw	zero,24(r17)
   831c8:	00843dc0 	call	843dc <memset>
   831cc:	94000317 	ldw	r16,12(r18)
   831d0:	00800484 	movi	r2,18
   831d4:	8c400715 	stw	r17,28(r17)
   831d8:	8d800815 	stw	r22,32(r17)
   831dc:	8d400915 	stw	r21,36(r17)
   831e0:	8d000a15 	stw	r20,40(r17)
   831e4:	8cc00b15 	stw	r19,44(r17)
   831e8:	8080030d 	sth	r2,12(r16)
   831ec:	00800084 	movi	r2,2
   831f0:	80000015 	stw	zero,0(r16)
   831f4:	80000115 	stw	zero,4(r16)
   831f8:	80000215 	stw	zero,8(r16)
   831fc:	80001915 	stw	zero,100(r16)
   83200:	8080038d 	sth	r2,14(r16)
   83204:	80000415 	stw	zero,16(r16)
   83208:	80000515 	stw	zero,20(r16)
   8320c:	80000615 	stw	zero,24(r16)
   83210:	b80d883a 	mov	r6,r23
   83214:	000b883a 	mov	r5,zero
   83218:	81001704 	addi	r4,r16,92
   8321c:	00843dc0 	call	843dc <memset>
   83220:	00800044 	movi	r2,1
   83224:	84000715 	stw	r16,28(r16)
   83228:	85800815 	stw	r22,32(r16)
   8322c:	85400915 	stw	r21,36(r16)
   83230:	85000a15 	stw	r20,40(r16)
   83234:	84c00b15 	stw	r19,44(r16)
   83238:	90800e15 	stw	r2,56(r18)
   8323c:	dfc00817 	ldw	ra,32(sp)
   83240:	ddc00717 	ldw	r23,28(sp)
   83244:	dd800617 	ldw	r22,24(sp)
   83248:	dd400517 	ldw	r21,20(sp)
   8324c:	dd000417 	ldw	r20,16(sp)
   83250:	dcc00317 	ldw	r19,12(sp)
   83254:	dc800217 	ldw	r18,8(sp)
   83258:	dc400117 	ldw	r17,4(sp)
   8325c:	dc000017 	ldw	r16,0(sp)
   83260:	dec00904 	addi	sp,sp,36
   83264:	f800283a 	ret

00083268 <__fp_lock>:
   83268:	0005883a 	mov	r2,zero
   8326c:	f800283a 	ret

00083270 <__sfmoreglue>:
   83270:	defffc04 	addi	sp,sp,-16
   83274:	dc400115 	stw	r17,4(sp)
   83278:	2c7fffc4 	addi	r17,r5,-1
   8327c:	8c401a24 	muli	r17,r17,104
   83280:	dc800215 	stw	r18,8(sp)
   83284:	2825883a 	mov	r18,r5
   83288:	89401d04 	addi	r5,r17,116
   8328c:	dc000015 	stw	r16,0(sp)
   83290:	dfc00315 	stw	ra,12(sp)
   83294:	0083bd00 	call	83bd0 <_malloc_r>
   83298:	1021883a 	mov	r16,r2
   8329c:	10000726 	beq	r2,zero,832bc <__sfmoreglue+0x4c>
   832a0:	11000304 	addi	r4,r2,12
   832a4:	10000015 	stw	zero,0(r2)
   832a8:	14800115 	stw	r18,4(r2)
   832ac:	11000215 	stw	r4,8(r2)
   832b0:	89801a04 	addi	r6,r17,104
   832b4:	000b883a 	mov	r5,zero
   832b8:	00843dc0 	call	843dc <memset>
   832bc:	8005883a 	mov	r2,r16
   832c0:	dfc00317 	ldw	ra,12(sp)
   832c4:	dc800217 	ldw	r18,8(sp)
   832c8:	dc400117 	ldw	r17,4(sp)
   832cc:	dc000017 	ldw	r16,0(sp)
   832d0:	dec00404 	addi	sp,sp,16
   832d4:	f800283a 	ret

000832d8 <__sfp>:
   832d8:	defffb04 	addi	sp,sp,-20
   832dc:	dc000015 	stw	r16,0(sp)
   832e0:	04000234 	movhi	r16,8
   832e4:	841ccb04 	addi	r16,r16,29484
   832e8:	dcc00315 	stw	r19,12(sp)
   832ec:	2027883a 	mov	r19,r4
   832f0:	81000017 	ldw	r4,0(r16)
   832f4:	dfc00415 	stw	ra,16(sp)
   832f8:	dc800215 	stw	r18,8(sp)
   832fc:	20800e17 	ldw	r2,56(r4)
   83300:	dc400115 	stw	r17,4(sp)
   83304:	1000021e 	bne	r2,zero,83310 <__sfp+0x38>
   83308:	00830cc0 	call	830cc <__sinit.part.1>
   8330c:	81000017 	ldw	r4,0(r16)
   83310:	2480b804 	addi	r18,r4,736
   83314:	047fffc4 	movi	r17,-1
   83318:	91000117 	ldw	r4,4(r18)
   8331c:	94000217 	ldw	r16,8(r18)
   83320:	213fffc4 	addi	r4,r4,-1
   83324:	20000a16 	blt	r4,zero,83350 <__sfp+0x78>
   83328:	8080030f 	ldh	r2,12(r16)
   8332c:	10000c26 	beq	r2,zero,83360 <__sfp+0x88>
   83330:	80c01d04 	addi	r3,r16,116
   83334:	00000206 	br	83340 <__sfp+0x68>
   83338:	18bfe60f 	ldh	r2,-104(r3)
   8333c:	10000826 	beq	r2,zero,83360 <__sfp+0x88>
   83340:	213fffc4 	addi	r4,r4,-1
   83344:	1c3ffd04 	addi	r16,r3,-12
   83348:	18c01a04 	addi	r3,r3,104
   8334c:	247ffa1e 	bne	r4,r17,83338 <__sfp+0x60>
   83350:	90800017 	ldw	r2,0(r18)
   83354:	10001d26 	beq	r2,zero,833cc <__sfp+0xf4>
   83358:	1025883a 	mov	r18,r2
   8335c:	003fee06 	br	83318 <__sfp+0x40>
   83360:	00bfffc4 	movi	r2,-1
   83364:	8080038d 	sth	r2,14(r16)
   83368:	00800044 	movi	r2,1
   8336c:	8080030d 	sth	r2,12(r16)
   83370:	80001915 	stw	zero,100(r16)
   83374:	80000015 	stw	zero,0(r16)
   83378:	80000215 	stw	zero,8(r16)
   8337c:	80000115 	stw	zero,4(r16)
   83380:	80000415 	stw	zero,16(r16)
   83384:	80000515 	stw	zero,20(r16)
   83388:	80000615 	stw	zero,24(r16)
   8338c:	01800204 	movi	r6,8
   83390:	000b883a 	mov	r5,zero
   83394:	81001704 	addi	r4,r16,92
   83398:	00843dc0 	call	843dc <memset>
   8339c:	8005883a 	mov	r2,r16
   833a0:	80000c15 	stw	zero,48(r16)
   833a4:	80000d15 	stw	zero,52(r16)
   833a8:	80001115 	stw	zero,68(r16)
   833ac:	80001215 	stw	zero,72(r16)
   833b0:	dfc00417 	ldw	ra,16(sp)
   833b4:	dcc00317 	ldw	r19,12(sp)
   833b8:	dc800217 	ldw	r18,8(sp)
   833bc:	dc400117 	ldw	r17,4(sp)
   833c0:	dc000017 	ldw	r16,0(sp)
   833c4:	dec00504 	addi	sp,sp,20
   833c8:	f800283a 	ret
   833cc:	01400104 	movi	r5,4
   833d0:	9809883a 	mov	r4,r19
   833d4:	00832700 	call	83270 <__sfmoreglue>
   833d8:	90800015 	stw	r2,0(r18)
   833dc:	103fde1e 	bne	r2,zero,83358 <__sfp+0x80>
   833e0:	00800304 	movi	r2,12
   833e4:	98800015 	stw	r2,0(r19)
   833e8:	0005883a 	mov	r2,zero
   833ec:	003ff006 	br	833b0 <__sfp+0xd8>

000833f0 <_cleanup>:
   833f0:	00800234 	movhi	r2,8
   833f4:	109ccb04 	addi	r2,r2,29484
   833f8:	11000017 	ldw	r4,0(r2)
   833fc:	01400234 	movhi	r5,8
   83400:	2951d204 	addi	r5,r5,18248
   83404:	00839501 	jmpi	83950 <_fwalk_reent>

00083408 <__sinit>:
   83408:	20800e17 	ldw	r2,56(r4)
   8340c:	10000126 	beq	r2,zero,83414 <__sinit+0xc>
   83410:	f800283a 	ret
   83414:	00830cc1 	jmpi	830cc <__sinit.part.1>

00083418 <__sfp_lock_acquire>:
   83418:	f800283a 	ret

0008341c <__sfp_lock_release>:
   8341c:	f800283a 	ret

00083420 <__sinit_lock_acquire>:
   83420:	f800283a 	ret

00083424 <__sinit_lock_release>:
   83424:	f800283a 	ret

00083428 <__fp_lock_all>:
   83428:	00800234 	movhi	r2,8
   8342c:	109ccc04 	addi	r2,r2,29488
   83430:	11000017 	ldw	r4,0(r2)
   83434:	01400234 	movhi	r5,8
   83438:	294c9a04 	addi	r5,r5,12904
   8343c:	008388c1 	jmpi	8388c <_fwalk>

00083440 <__fp_unlock_all>:
   83440:	00800234 	movhi	r2,8
   83444:	109ccc04 	addi	r2,r2,29488
   83448:	11000017 	ldw	r4,0(r2)
   8344c:	01400234 	movhi	r5,8
   83450:	294c2e04 	addi	r5,r5,12472
   83454:	008388c1 	jmpi	8388c <_fwalk>

00083458 <_malloc_trim_r>:
   83458:	defffb04 	addi	sp,sp,-20
   8345c:	dcc00315 	stw	r19,12(sp)
   83460:	04c00234 	movhi	r19,8
   83464:	dc800215 	stw	r18,8(sp)
   83468:	dc400115 	stw	r17,4(sp)
   8346c:	dc000015 	stw	r16,0(sp)
   83470:	dfc00415 	stw	ra,16(sp)
   83474:	2821883a 	mov	r16,r5
   83478:	9cdbbe04 	addi	r19,r19,28408
   8347c:	2025883a 	mov	r18,r4
   83480:	0084b580 	call	84b58 <__malloc_lock>
   83484:	98800217 	ldw	r2,8(r19)
   83488:	14400117 	ldw	r17,4(r2)
   8348c:	00bfff04 	movi	r2,-4
   83490:	88a2703a 	and	r17,r17,r2
   83494:	8c21c83a 	sub	r16,r17,r16
   83498:	8403fbc4 	addi	r16,r16,4079
   8349c:	8020d33a 	srli	r16,r16,12
   834a0:	0083ffc4 	movi	r2,4095
   834a4:	843fffc4 	addi	r16,r16,-1
   834a8:	8020933a 	slli	r16,r16,12
   834ac:	1400060e 	bge	r2,r16,834c8 <_malloc_trim_r+0x70>
   834b0:	000b883a 	mov	r5,zero
   834b4:	9009883a 	mov	r4,r18
   834b8:	00845040 	call	84504 <_sbrk_r>
   834bc:	98c00217 	ldw	r3,8(r19)
   834c0:	1c47883a 	add	r3,r3,r17
   834c4:	10c00a26 	beq	r2,r3,834f0 <_malloc_trim_r+0x98>
   834c8:	9009883a 	mov	r4,r18
   834cc:	0084b5c0 	call	84b5c <__malloc_unlock>
   834d0:	0005883a 	mov	r2,zero
   834d4:	dfc00417 	ldw	ra,16(sp)
   834d8:	dcc00317 	ldw	r19,12(sp)
   834dc:	dc800217 	ldw	r18,8(sp)
   834e0:	dc400117 	ldw	r17,4(sp)
   834e4:	dc000017 	ldw	r16,0(sp)
   834e8:	dec00504 	addi	sp,sp,20
   834ec:	f800283a 	ret
   834f0:	040bc83a 	sub	r5,zero,r16
   834f4:	9009883a 	mov	r4,r18
   834f8:	00845040 	call	84504 <_sbrk_r>
   834fc:	00ffffc4 	movi	r3,-1
   83500:	10c00d26 	beq	r2,r3,83538 <_malloc_trim_r+0xe0>
   83504:	00c00274 	movhi	r3,9
   83508:	18e85c04 	addi	r3,r3,-24208
   8350c:	18800017 	ldw	r2,0(r3)
   83510:	99000217 	ldw	r4,8(r19)
   83514:	8c23c83a 	sub	r17,r17,r16
   83518:	8c400054 	ori	r17,r17,1
   8351c:	1421c83a 	sub	r16,r2,r16
   83520:	24400115 	stw	r17,4(r4)
   83524:	9009883a 	mov	r4,r18
   83528:	1c000015 	stw	r16,0(r3)
   8352c:	0084b5c0 	call	84b5c <__malloc_unlock>
   83530:	00800044 	movi	r2,1
   83534:	003fe706 	br	834d4 <_malloc_trim_r+0x7c>
   83538:	000b883a 	mov	r5,zero
   8353c:	9009883a 	mov	r4,r18
   83540:	00845040 	call	84504 <_sbrk_r>
   83544:	99000217 	ldw	r4,8(r19)
   83548:	014003c4 	movi	r5,15
   8354c:	1107c83a 	sub	r3,r2,r4
   83550:	28ffdd0e 	bge	r5,r3,834c8 <_malloc_trim_r+0x70>
   83554:	01400234 	movhi	r5,8
   83558:	295ccd04 	addi	r5,r5,29492
   8355c:	29400017 	ldw	r5,0(r5)
   83560:	18c00054 	ori	r3,r3,1
   83564:	20c00115 	stw	r3,4(r4)
   83568:	00c00274 	movhi	r3,9
   8356c:	1145c83a 	sub	r2,r2,r5
   83570:	18e85c04 	addi	r3,r3,-24208
   83574:	18800015 	stw	r2,0(r3)
   83578:	003fd306 	br	834c8 <_malloc_trim_r+0x70>

0008357c <_free_r>:
   8357c:	28004126 	beq	r5,zero,83684 <_free_r+0x108>
   83580:	defffd04 	addi	sp,sp,-12
   83584:	dc400115 	stw	r17,4(sp)
   83588:	dc000015 	stw	r16,0(sp)
   8358c:	2023883a 	mov	r17,r4
   83590:	2821883a 	mov	r16,r5
   83594:	dfc00215 	stw	ra,8(sp)
   83598:	0084b580 	call	84b58 <__malloc_lock>
   8359c:	81ffff17 	ldw	r7,-4(r16)
   835a0:	00bfff84 	movi	r2,-2
   835a4:	01000234 	movhi	r4,8
   835a8:	81bffe04 	addi	r6,r16,-8
   835ac:	3884703a 	and	r2,r7,r2
   835b0:	211bbe04 	addi	r4,r4,28408
   835b4:	308b883a 	add	r5,r6,r2
   835b8:	2a400117 	ldw	r9,4(r5)
   835bc:	22000217 	ldw	r8,8(r4)
   835c0:	00ffff04 	movi	r3,-4
   835c4:	48c6703a 	and	r3,r9,r3
   835c8:	2a005726 	beq	r5,r8,83728 <_free_r+0x1ac>
   835cc:	28c00115 	stw	r3,4(r5)
   835d0:	39c0004c 	andi	r7,r7,1
   835d4:	3800091e 	bne	r7,zero,835fc <_free_r+0x80>
   835d8:	823ffe17 	ldw	r8,-8(r16)
   835dc:	22400204 	addi	r9,r4,8
   835e0:	320dc83a 	sub	r6,r6,r8
   835e4:	31c00217 	ldw	r7,8(r6)
   835e8:	1205883a 	add	r2,r2,r8
   835ec:	3a406526 	beq	r7,r9,83784 <_free_r+0x208>
   835f0:	32000317 	ldw	r8,12(r6)
   835f4:	3a000315 	stw	r8,12(r7)
   835f8:	41c00215 	stw	r7,8(r8)
   835fc:	28cf883a 	add	r7,r5,r3
   83600:	39c00117 	ldw	r7,4(r7)
   83604:	39c0004c 	andi	r7,r7,1
   83608:	38003a26 	beq	r7,zero,836f4 <_free_r+0x178>
   8360c:	10c00054 	ori	r3,r2,1
   83610:	30c00115 	stw	r3,4(r6)
   83614:	3087883a 	add	r3,r6,r2
   83618:	18800015 	stw	r2,0(r3)
   8361c:	00c07fc4 	movi	r3,511
   83620:	18801936 	bltu	r3,r2,83688 <_free_r+0x10c>
   83624:	1004d0fa 	srli	r2,r2,3
   83628:	01c00044 	movi	r7,1
   8362c:	21400117 	ldw	r5,4(r4)
   83630:	10c00044 	addi	r3,r2,1
   83634:	18c7883a 	add	r3,r3,r3
   83638:	1005d0ba 	srai	r2,r2,2
   8363c:	18c7883a 	add	r3,r3,r3
   83640:	18c7883a 	add	r3,r3,r3
   83644:	1907883a 	add	r3,r3,r4
   83648:	3884983a 	sll	r2,r7,r2
   8364c:	19c00017 	ldw	r7,0(r3)
   83650:	1a3ffe04 	addi	r8,r3,-8
   83654:	1144b03a 	or	r2,r2,r5
   83658:	32000315 	stw	r8,12(r6)
   8365c:	31c00215 	stw	r7,8(r6)
   83660:	20800115 	stw	r2,4(r4)
   83664:	19800015 	stw	r6,0(r3)
   83668:	39800315 	stw	r6,12(r7)
   8366c:	8809883a 	mov	r4,r17
   83670:	dfc00217 	ldw	ra,8(sp)
   83674:	dc400117 	ldw	r17,4(sp)
   83678:	dc000017 	ldw	r16,0(sp)
   8367c:	dec00304 	addi	sp,sp,12
   83680:	0084b5c1 	jmpi	84b5c <__malloc_unlock>
   83684:	f800283a 	ret
   83688:	100ad27a 	srli	r5,r2,9
   8368c:	00c00104 	movi	r3,4
   83690:	19404a36 	bltu	r3,r5,837bc <_free_r+0x240>
   83694:	100ad1ba 	srli	r5,r2,6
   83698:	28c00e44 	addi	r3,r5,57
   8369c:	18c7883a 	add	r3,r3,r3
   836a0:	29400e04 	addi	r5,r5,56
   836a4:	18c7883a 	add	r3,r3,r3
   836a8:	18c7883a 	add	r3,r3,r3
   836ac:	1909883a 	add	r4,r3,r4
   836b0:	20c00017 	ldw	r3,0(r4)
   836b4:	01c00234 	movhi	r7,8
   836b8:	213ffe04 	addi	r4,r4,-8
   836bc:	39dbbe04 	addi	r7,r7,28408
   836c0:	20c04426 	beq	r4,r3,837d4 <_free_r+0x258>
   836c4:	01ffff04 	movi	r7,-4
   836c8:	19400117 	ldw	r5,4(r3)
   836cc:	29ca703a 	and	r5,r5,r7
   836d0:	1140022e 	bgeu	r2,r5,836dc <_free_r+0x160>
   836d4:	18c00217 	ldw	r3,8(r3)
   836d8:	20fffb1e 	bne	r4,r3,836c8 <_free_r+0x14c>
   836dc:	19000317 	ldw	r4,12(r3)
   836e0:	31000315 	stw	r4,12(r6)
   836e4:	30c00215 	stw	r3,8(r6)
   836e8:	21800215 	stw	r6,8(r4)
   836ec:	19800315 	stw	r6,12(r3)
   836f0:	003fde06 	br	8366c <_free_r+0xf0>
   836f4:	29c00217 	ldw	r7,8(r5)
   836f8:	10c5883a 	add	r2,r2,r3
   836fc:	00c00234 	movhi	r3,8
   83700:	18dbc004 	addi	r3,r3,28416
   83704:	38c03b26 	beq	r7,r3,837f4 <_free_r+0x278>
   83708:	2a000317 	ldw	r8,12(r5)
   8370c:	11400054 	ori	r5,r2,1
   83710:	3087883a 	add	r3,r6,r2
   83714:	3a000315 	stw	r8,12(r7)
   83718:	41c00215 	stw	r7,8(r8)
   8371c:	31400115 	stw	r5,4(r6)
   83720:	18800015 	stw	r2,0(r3)
   83724:	003fbd06 	br	8361c <_free_r+0xa0>
   83728:	39c0004c 	andi	r7,r7,1
   8372c:	10c5883a 	add	r2,r2,r3
   83730:	3800071e 	bne	r7,zero,83750 <_free_r+0x1d4>
   83734:	81fffe17 	ldw	r7,-8(r16)
   83738:	31cdc83a 	sub	r6,r6,r7
   8373c:	30c00317 	ldw	r3,12(r6)
   83740:	31400217 	ldw	r5,8(r6)
   83744:	11c5883a 	add	r2,r2,r7
   83748:	28c00315 	stw	r3,12(r5)
   8374c:	19400215 	stw	r5,8(r3)
   83750:	10c00054 	ori	r3,r2,1
   83754:	30c00115 	stw	r3,4(r6)
   83758:	00c00234 	movhi	r3,8
   8375c:	18dcce04 	addi	r3,r3,29496
   83760:	18c00017 	ldw	r3,0(r3)
   83764:	21800215 	stw	r6,8(r4)
   83768:	10ffc036 	bltu	r2,r3,8366c <_free_r+0xf0>
   8376c:	00800274 	movhi	r2,9
   83770:	10a5ac04 	addi	r2,r2,-26960
   83774:	11400017 	ldw	r5,0(r2)
   83778:	8809883a 	mov	r4,r17
   8377c:	00834580 	call	83458 <_malloc_trim_r>
   83780:	003fba06 	br	8366c <_free_r+0xf0>
   83784:	28c9883a 	add	r4,r5,r3
   83788:	21000117 	ldw	r4,4(r4)
   8378c:	2100004c 	andi	r4,r4,1
   83790:	2000391e 	bne	r4,zero,83878 <_free_r+0x2fc>
   83794:	29c00217 	ldw	r7,8(r5)
   83798:	29000317 	ldw	r4,12(r5)
   8379c:	1885883a 	add	r2,r3,r2
   837a0:	10c00054 	ori	r3,r2,1
   837a4:	39000315 	stw	r4,12(r7)
   837a8:	21c00215 	stw	r7,8(r4)
   837ac:	30c00115 	stw	r3,4(r6)
   837b0:	308d883a 	add	r6,r6,r2
   837b4:	30800015 	stw	r2,0(r6)
   837b8:	003fac06 	br	8366c <_free_r+0xf0>
   837bc:	00c00504 	movi	r3,20
   837c0:	19401536 	bltu	r3,r5,83818 <_free_r+0x29c>
   837c4:	28c01704 	addi	r3,r5,92
   837c8:	18c7883a 	add	r3,r3,r3
   837cc:	294016c4 	addi	r5,r5,91
   837d0:	003fb406 	br	836a4 <_free_r+0x128>
   837d4:	280bd0ba 	srai	r5,r5,2
   837d8:	00c00044 	movi	r3,1
   837dc:	38800117 	ldw	r2,4(r7)
   837e0:	194a983a 	sll	r5,r3,r5
   837e4:	2007883a 	mov	r3,r4
   837e8:	2884b03a 	or	r2,r5,r2
   837ec:	38800115 	stw	r2,4(r7)
   837f0:	003fbb06 	br	836e0 <_free_r+0x164>
   837f4:	21800515 	stw	r6,20(r4)
   837f8:	21800415 	stw	r6,16(r4)
   837fc:	10c00054 	ori	r3,r2,1
   83800:	31c00315 	stw	r7,12(r6)
   83804:	31c00215 	stw	r7,8(r6)
   83808:	30c00115 	stw	r3,4(r6)
   8380c:	308d883a 	add	r6,r6,r2
   83810:	30800015 	stw	r2,0(r6)
   83814:	003f9506 	br	8366c <_free_r+0xf0>
   83818:	00c01504 	movi	r3,84
   8381c:	19400536 	bltu	r3,r5,83834 <_free_r+0x2b8>
   83820:	100ad33a 	srli	r5,r2,12
   83824:	28c01bc4 	addi	r3,r5,111
   83828:	18c7883a 	add	r3,r3,r3
   8382c:	29401b84 	addi	r5,r5,110
   83830:	003f9c06 	br	836a4 <_free_r+0x128>
   83834:	00c05504 	movi	r3,340
   83838:	19400536 	bltu	r3,r5,83850 <_free_r+0x2d4>
   8383c:	100ad3fa 	srli	r5,r2,15
   83840:	28c01e04 	addi	r3,r5,120
   83844:	18c7883a 	add	r3,r3,r3
   83848:	29401dc4 	addi	r5,r5,119
   8384c:	003f9506 	br	836a4 <_free_r+0x128>
   83850:	00c15504 	movi	r3,1364
   83854:	19400536 	bltu	r3,r5,8386c <_free_r+0x2f0>
   83858:	100ad4ba 	srli	r5,r2,18
   8385c:	28c01f44 	addi	r3,r5,125
   83860:	18c7883a 	add	r3,r3,r3
   83864:	29401f04 	addi	r5,r5,124
   83868:	003f8e06 	br	836a4 <_free_r+0x128>
   8386c:	00c03f84 	movi	r3,254
   83870:	01401f84 	movi	r5,126
   83874:	003f8b06 	br	836a4 <_free_r+0x128>
   83878:	10c00054 	ori	r3,r2,1
   8387c:	30c00115 	stw	r3,4(r6)
   83880:	308d883a 	add	r6,r6,r2
   83884:	30800015 	stw	r2,0(r6)
   83888:	003f7806 	br	8366c <_free_r+0xf0>

0008388c <_fwalk>:
   8388c:	defff704 	addi	sp,sp,-36
   83890:	dd000415 	stw	r20,16(sp)
   83894:	dfc00815 	stw	ra,32(sp)
   83898:	ddc00715 	stw	r23,28(sp)
   8389c:	dd800615 	stw	r22,24(sp)
   838a0:	dd400515 	stw	r21,20(sp)
   838a4:	dcc00315 	stw	r19,12(sp)
   838a8:	dc800215 	stw	r18,8(sp)
   838ac:	dc400115 	stw	r17,4(sp)
   838b0:	dc000015 	stw	r16,0(sp)
   838b4:	2500b804 	addi	r20,r4,736
   838b8:	a0002326 	beq	r20,zero,83948 <_fwalk+0xbc>
   838bc:	282b883a 	mov	r21,r5
   838c0:	002f883a 	mov	r23,zero
   838c4:	05800044 	movi	r22,1
   838c8:	04ffffc4 	movi	r19,-1
   838cc:	a4400117 	ldw	r17,4(r20)
   838d0:	a4800217 	ldw	r18,8(r20)
   838d4:	8c7fffc4 	addi	r17,r17,-1
   838d8:	88000d16 	blt	r17,zero,83910 <_fwalk+0x84>
   838dc:	94000304 	addi	r16,r18,12
   838e0:	94800384 	addi	r18,r18,14
   838e4:	8080000b 	ldhu	r2,0(r16)
   838e8:	8c7fffc4 	addi	r17,r17,-1
   838ec:	813ffd04 	addi	r4,r16,-12
   838f0:	b080042e 	bgeu	r22,r2,83904 <_fwalk+0x78>
   838f4:	9080000f 	ldh	r2,0(r18)
   838f8:	14c00226 	beq	r2,r19,83904 <_fwalk+0x78>
   838fc:	a83ee83a 	callr	r21
   83900:	b8aeb03a 	or	r23,r23,r2
   83904:	84001a04 	addi	r16,r16,104
   83908:	94801a04 	addi	r18,r18,104
   8390c:	8cfff51e 	bne	r17,r19,838e4 <_fwalk+0x58>
   83910:	a5000017 	ldw	r20,0(r20)
   83914:	a03fed1e 	bne	r20,zero,838cc <_fwalk+0x40>
   83918:	b805883a 	mov	r2,r23
   8391c:	dfc00817 	ldw	ra,32(sp)
   83920:	ddc00717 	ldw	r23,28(sp)
   83924:	dd800617 	ldw	r22,24(sp)
   83928:	dd400517 	ldw	r21,20(sp)
   8392c:	dd000417 	ldw	r20,16(sp)
   83930:	dcc00317 	ldw	r19,12(sp)
   83934:	dc800217 	ldw	r18,8(sp)
   83938:	dc400117 	ldw	r17,4(sp)
   8393c:	dc000017 	ldw	r16,0(sp)
   83940:	dec00904 	addi	sp,sp,36
   83944:	f800283a 	ret
   83948:	002f883a 	mov	r23,zero
   8394c:	003ff206 	br	83918 <_fwalk+0x8c>

00083950 <_fwalk_reent>:
   83950:	defff704 	addi	sp,sp,-36
   83954:	dd000415 	stw	r20,16(sp)
   83958:	dfc00815 	stw	ra,32(sp)
   8395c:	ddc00715 	stw	r23,28(sp)
   83960:	dd800615 	stw	r22,24(sp)
   83964:	dd400515 	stw	r21,20(sp)
   83968:	dcc00315 	stw	r19,12(sp)
   8396c:	dc800215 	stw	r18,8(sp)
   83970:	dc400115 	stw	r17,4(sp)
   83974:	dc000015 	stw	r16,0(sp)
   83978:	2500b804 	addi	r20,r4,736
   8397c:	a0002326 	beq	r20,zero,83a0c <_fwalk_reent+0xbc>
   83980:	282b883a 	mov	r21,r5
   83984:	2027883a 	mov	r19,r4
   83988:	002f883a 	mov	r23,zero
   8398c:	05800044 	movi	r22,1
   83990:	04bfffc4 	movi	r18,-1
   83994:	a4400117 	ldw	r17,4(r20)
   83998:	a4000217 	ldw	r16,8(r20)
   8399c:	8c7fffc4 	addi	r17,r17,-1
   839a0:	88000c16 	blt	r17,zero,839d4 <_fwalk_reent+0x84>
   839a4:	84000304 	addi	r16,r16,12
   839a8:	8080000b 	ldhu	r2,0(r16)
   839ac:	8c7fffc4 	addi	r17,r17,-1
   839b0:	817ffd04 	addi	r5,r16,-12
   839b4:	b080052e 	bgeu	r22,r2,839cc <_fwalk_reent+0x7c>
   839b8:	8080008f 	ldh	r2,2(r16)
   839bc:	9809883a 	mov	r4,r19
   839c0:	14800226 	beq	r2,r18,839cc <_fwalk_reent+0x7c>
   839c4:	a83ee83a 	callr	r21
   839c8:	b8aeb03a 	or	r23,r23,r2
   839cc:	84001a04 	addi	r16,r16,104
   839d0:	8cbff51e 	bne	r17,r18,839a8 <_fwalk_reent+0x58>
   839d4:	a5000017 	ldw	r20,0(r20)
   839d8:	a03fee1e 	bne	r20,zero,83994 <_fwalk_reent+0x44>
   839dc:	b805883a 	mov	r2,r23
   839e0:	dfc00817 	ldw	ra,32(sp)
   839e4:	ddc00717 	ldw	r23,28(sp)
   839e8:	dd800617 	ldw	r22,24(sp)
   839ec:	dd400517 	ldw	r21,20(sp)
   839f0:	dd000417 	ldw	r20,16(sp)
   839f4:	dcc00317 	ldw	r19,12(sp)
   839f8:	dc800217 	ldw	r18,8(sp)
   839fc:	dc400117 	ldw	r17,4(sp)
   83a00:	dc000017 	ldw	r16,0(sp)
   83a04:	dec00904 	addi	sp,sp,36
   83a08:	f800283a 	ret
   83a0c:	002f883a 	mov	r23,zero
   83a10:	003ff206 	br	839dc <_fwalk_reent+0x8c>

00083a14 <__smakebuf_r>:
   83a14:	2880030b 	ldhu	r2,12(r5)
   83a18:	10c0008c 	andi	r3,r2,2
   83a1c:	1800411e 	bne	r3,zero,83b24 <__smakebuf_r+0x110>
   83a20:	deffec04 	addi	sp,sp,-80
   83a24:	dc000f15 	stw	r16,60(sp)
   83a28:	2821883a 	mov	r16,r5
   83a2c:	2940038f 	ldh	r5,14(r5)
   83a30:	dc401015 	stw	r17,64(sp)
   83a34:	dfc01315 	stw	ra,76(sp)
   83a38:	dcc01215 	stw	r19,72(sp)
   83a3c:	dc801115 	stw	r18,68(sp)
   83a40:	2023883a 	mov	r17,r4
   83a44:	28001c16 	blt	r5,zero,83ab8 <__smakebuf_r+0xa4>
   83a48:	d80d883a 	mov	r6,sp
   83a4c:	008484c0 	call	8484c <_fstat_r>
   83a50:	10001816 	blt	r2,zero,83ab4 <__smakebuf_r+0xa0>
   83a54:	d8800117 	ldw	r2,4(sp)
   83a58:	00e00014 	movui	r3,32768
   83a5c:	10bc000c 	andi	r2,r2,61440
   83a60:	14c80020 	cmpeqi	r19,r2,8192
   83a64:	10c03726 	beq	r2,r3,83b44 <__smakebuf_r+0x130>
   83a68:	80c0030b 	ldhu	r3,12(r16)
   83a6c:	18c20014 	ori	r3,r3,2048
   83a70:	80c0030d 	sth	r3,12(r16)
   83a74:	00c80004 	movi	r3,8192
   83a78:	10c0521e 	bne	r2,r3,83bc4 <__smakebuf_r+0x1b0>
   83a7c:	8140038f 	ldh	r5,14(r16)
   83a80:	8809883a 	mov	r4,r17
   83a84:	00848a80 	call	848a8 <_isatty_r>
   83a88:	10004c26 	beq	r2,zero,83bbc <__smakebuf_r+0x1a8>
   83a8c:	8080030b 	ldhu	r2,12(r16)
   83a90:	80c010c4 	addi	r3,r16,67
   83a94:	80c00015 	stw	r3,0(r16)
   83a98:	10800054 	ori	r2,r2,1
   83a9c:	8080030d 	sth	r2,12(r16)
   83aa0:	00800044 	movi	r2,1
   83aa4:	80c00415 	stw	r3,16(r16)
   83aa8:	80800515 	stw	r2,20(r16)
   83aac:	04810004 	movi	r18,1024
   83ab0:	00000706 	br	83ad0 <__smakebuf_r+0xbc>
   83ab4:	8080030b 	ldhu	r2,12(r16)
   83ab8:	10c0200c 	andi	r3,r2,128
   83abc:	18001f1e 	bne	r3,zero,83b3c <__smakebuf_r+0x128>
   83ac0:	04810004 	movi	r18,1024
   83ac4:	10820014 	ori	r2,r2,2048
   83ac8:	8080030d 	sth	r2,12(r16)
   83acc:	0027883a 	mov	r19,zero
   83ad0:	900b883a 	mov	r5,r18
   83ad4:	8809883a 	mov	r4,r17
   83ad8:	0083bd00 	call	83bd0 <_malloc_r>
   83adc:	10002c26 	beq	r2,zero,83b90 <__smakebuf_r+0x17c>
   83ae0:	80c0030b 	ldhu	r3,12(r16)
   83ae4:	01000234 	movhi	r4,8
   83ae8:	210c3004 	addi	r4,r4,12480
   83aec:	89000f15 	stw	r4,60(r17)
   83af0:	18c02014 	ori	r3,r3,128
   83af4:	80c0030d 	sth	r3,12(r16)
   83af8:	80800015 	stw	r2,0(r16)
   83afc:	80800415 	stw	r2,16(r16)
   83b00:	84800515 	stw	r18,20(r16)
   83b04:	98001a1e 	bne	r19,zero,83b70 <__smakebuf_r+0x15c>
   83b08:	dfc01317 	ldw	ra,76(sp)
   83b0c:	dcc01217 	ldw	r19,72(sp)
   83b10:	dc801117 	ldw	r18,68(sp)
   83b14:	dc401017 	ldw	r17,64(sp)
   83b18:	dc000f17 	ldw	r16,60(sp)
   83b1c:	dec01404 	addi	sp,sp,80
   83b20:	f800283a 	ret
   83b24:	288010c4 	addi	r2,r5,67
   83b28:	28800015 	stw	r2,0(r5)
   83b2c:	28800415 	stw	r2,16(r5)
   83b30:	00800044 	movi	r2,1
   83b34:	28800515 	stw	r2,20(r5)
   83b38:	f800283a 	ret
   83b3c:	04801004 	movi	r18,64
   83b40:	003fe006 	br	83ac4 <__smakebuf_r+0xb0>
   83b44:	81000a17 	ldw	r4,40(r16)
   83b48:	00c00234 	movhi	r3,8
   83b4c:	18d18c04 	addi	r3,r3,17968
   83b50:	20ffc51e 	bne	r4,r3,83a68 <__smakebuf_r+0x54>
   83b54:	8080030b 	ldhu	r2,12(r16)
   83b58:	04810004 	movi	r18,1024
   83b5c:	84801315 	stw	r18,76(r16)
   83b60:	1484b03a 	or	r2,r2,r18
   83b64:	8080030d 	sth	r2,12(r16)
   83b68:	0027883a 	mov	r19,zero
   83b6c:	003fd806 	br	83ad0 <__smakebuf_r+0xbc>
   83b70:	8140038f 	ldh	r5,14(r16)
   83b74:	8809883a 	mov	r4,r17
   83b78:	00848a80 	call	848a8 <_isatty_r>
   83b7c:	103fe226 	beq	r2,zero,83b08 <__smakebuf_r+0xf4>
   83b80:	8080030b 	ldhu	r2,12(r16)
   83b84:	10800054 	ori	r2,r2,1
   83b88:	8080030d 	sth	r2,12(r16)
   83b8c:	003fde06 	br	83b08 <__smakebuf_r+0xf4>
   83b90:	8080030b 	ldhu	r2,12(r16)
   83b94:	10c0800c 	andi	r3,r2,512
   83b98:	183fdb1e 	bne	r3,zero,83b08 <__smakebuf_r+0xf4>
   83b9c:	10800094 	ori	r2,r2,2
   83ba0:	80c010c4 	addi	r3,r16,67
   83ba4:	8080030d 	sth	r2,12(r16)
   83ba8:	00800044 	movi	r2,1
   83bac:	80c00015 	stw	r3,0(r16)
   83bb0:	80c00415 	stw	r3,16(r16)
   83bb4:	80800515 	stw	r2,20(r16)
   83bb8:	003fd306 	br	83b08 <__smakebuf_r+0xf4>
   83bbc:	04810004 	movi	r18,1024
   83bc0:	003fc306 	br	83ad0 <__smakebuf_r+0xbc>
   83bc4:	0027883a 	mov	r19,zero
   83bc8:	04810004 	movi	r18,1024
   83bcc:	003fc006 	br	83ad0 <__smakebuf_r+0xbc>

00083bd0 <_malloc_r>:
   83bd0:	defff504 	addi	sp,sp,-44
   83bd4:	dc800315 	stw	r18,12(sp)
   83bd8:	dfc00a15 	stw	ra,40(sp)
   83bdc:	df000915 	stw	fp,36(sp)
   83be0:	ddc00815 	stw	r23,32(sp)
   83be4:	dd800715 	stw	r22,28(sp)
   83be8:	dd400615 	stw	r21,24(sp)
   83bec:	dd000515 	stw	r20,20(sp)
   83bf0:	dcc00415 	stw	r19,16(sp)
   83bf4:	dc400215 	stw	r17,8(sp)
   83bf8:	dc000115 	stw	r16,4(sp)
   83bfc:	288002c4 	addi	r2,r5,11
   83c00:	00c00584 	movi	r3,22
   83c04:	2025883a 	mov	r18,r4
   83c08:	18807f2e 	bgeu	r3,r2,83e08 <_malloc_r+0x238>
   83c0c:	047ffe04 	movi	r17,-8
   83c10:	1462703a 	and	r17,r2,r17
   83c14:	8800a316 	blt	r17,zero,83ea4 <_malloc_r+0x2d4>
   83c18:	8940a236 	bltu	r17,r5,83ea4 <_malloc_r+0x2d4>
   83c1c:	0084b580 	call	84b58 <__malloc_lock>
   83c20:	00807dc4 	movi	r2,503
   83c24:	1441e92e 	bgeu	r2,r17,843cc <_malloc_r+0x7fc>
   83c28:	8804d27a 	srli	r2,r17,9
   83c2c:	1000a126 	beq	r2,zero,83eb4 <_malloc_r+0x2e4>
   83c30:	00c00104 	movi	r3,4
   83c34:	18811e36 	bltu	r3,r2,840b0 <_malloc_r+0x4e0>
   83c38:	8804d1ba 	srli	r2,r17,6
   83c3c:	12000e44 	addi	r8,r2,57
   83c40:	11c00e04 	addi	r7,r2,56
   83c44:	4209883a 	add	r4,r8,r8
   83c48:	04c00234 	movhi	r19,8
   83c4c:	2109883a 	add	r4,r4,r4
   83c50:	9cdbbe04 	addi	r19,r19,28408
   83c54:	2109883a 	add	r4,r4,r4
   83c58:	9909883a 	add	r4,r19,r4
   83c5c:	24000117 	ldw	r16,4(r4)
   83c60:	213ffe04 	addi	r4,r4,-8
   83c64:	24009726 	beq	r4,r16,83ec4 <_malloc_r+0x2f4>
   83c68:	80800117 	ldw	r2,4(r16)
   83c6c:	01bfff04 	movi	r6,-4
   83c70:	014003c4 	movi	r5,15
   83c74:	1184703a 	and	r2,r2,r6
   83c78:	1447c83a 	sub	r3,r2,r17
   83c7c:	28c00716 	blt	r5,r3,83c9c <_malloc_r+0xcc>
   83c80:	1800920e 	bge	r3,zero,83ecc <_malloc_r+0x2fc>
   83c84:	84000317 	ldw	r16,12(r16)
   83c88:	24008e26 	beq	r4,r16,83ec4 <_malloc_r+0x2f4>
   83c8c:	80800117 	ldw	r2,4(r16)
   83c90:	1184703a 	and	r2,r2,r6
   83c94:	1447c83a 	sub	r3,r2,r17
   83c98:	28fff90e 	bge	r5,r3,83c80 <_malloc_r+0xb0>
   83c9c:	3809883a 	mov	r4,r7
   83ca0:	01800234 	movhi	r6,8
   83ca4:	9c000417 	ldw	r16,16(r19)
   83ca8:	319bbe04 	addi	r6,r6,28408
   83cac:	32000204 	addi	r8,r6,8
   83cb0:	82013426 	beq	r16,r8,84184 <_malloc_r+0x5b4>
   83cb4:	80c00117 	ldw	r3,4(r16)
   83cb8:	00bfff04 	movi	r2,-4
   83cbc:	188e703a 	and	r7,r3,r2
   83cc0:	3c45c83a 	sub	r2,r7,r17
   83cc4:	00c003c4 	movi	r3,15
   83cc8:	18811f16 	blt	r3,r2,84148 <_malloc_r+0x578>
   83ccc:	32000515 	stw	r8,20(r6)
   83cd0:	32000415 	stw	r8,16(r6)
   83cd4:	10007f0e 	bge	r2,zero,83ed4 <_malloc_r+0x304>
   83cd8:	00807fc4 	movi	r2,511
   83cdc:	11c0fd36 	bltu	r2,r7,840d4 <_malloc_r+0x504>
   83ce0:	3806d0fa 	srli	r3,r7,3
   83ce4:	01c00044 	movi	r7,1
   83ce8:	30800117 	ldw	r2,4(r6)
   83cec:	19400044 	addi	r5,r3,1
   83cf0:	294b883a 	add	r5,r5,r5
   83cf4:	1807d0ba 	srai	r3,r3,2
   83cf8:	294b883a 	add	r5,r5,r5
   83cfc:	294b883a 	add	r5,r5,r5
   83d00:	298b883a 	add	r5,r5,r6
   83d04:	38c6983a 	sll	r3,r7,r3
   83d08:	29c00017 	ldw	r7,0(r5)
   83d0c:	2a7ffe04 	addi	r9,r5,-8
   83d10:	1886b03a 	or	r3,r3,r2
   83d14:	82400315 	stw	r9,12(r16)
   83d18:	81c00215 	stw	r7,8(r16)
   83d1c:	30c00115 	stw	r3,4(r6)
   83d20:	2c000015 	stw	r16,0(r5)
   83d24:	3c000315 	stw	r16,12(r7)
   83d28:	2005d0ba 	srai	r2,r4,2
   83d2c:	01400044 	movi	r5,1
   83d30:	288a983a 	sll	r5,r5,r2
   83d34:	19406f36 	bltu	r3,r5,83ef4 <_malloc_r+0x324>
   83d38:	28c4703a 	and	r2,r5,r3
   83d3c:	10000a1e 	bne	r2,zero,83d68 <_malloc_r+0x198>
   83d40:	00bfff04 	movi	r2,-4
   83d44:	294b883a 	add	r5,r5,r5
   83d48:	2088703a 	and	r4,r4,r2
   83d4c:	28c4703a 	and	r2,r5,r3
   83d50:	21000104 	addi	r4,r4,4
   83d54:	1000041e 	bne	r2,zero,83d68 <_malloc_r+0x198>
   83d58:	294b883a 	add	r5,r5,r5
   83d5c:	28c4703a 	and	r2,r5,r3
   83d60:	21000104 	addi	r4,r4,4
   83d64:	103ffc26 	beq	r2,zero,83d58 <_malloc_r+0x188>
   83d68:	02bfff04 	movi	r10,-4
   83d6c:	024003c4 	movi	r9,15
   83d70:	21800044 	addi	r6,r4,1
   83d74:	318d883a 	add	r6,r6,r6
   83d78:	318d883a 	add	r6,r6,r6
   83d7c:	318d883a 	add	r6,r6,r6
   83d80:	998d883a 	add	r6,r19,r6
   83d84:	333ffe04 	addi	r12,r6,-8
   83d88:	2017883a 	mov	r11,r4
   83d8c:	31800104 	addi	r6,r6,4
   83d90:	34000017 	ldw	r16,0(r6)
   83d94:	31fffd04 	addi	r7,r6,-12
   83d98:	81c0041e 	bne	r16,r7,83dac <_malloc_r+0x1dc>
   83d9c:	0000fb06 	br	8418c <_malloc_r+0x5bc>
   83da0:	1801030e 	bge	r3,zero,841b0 <_malloc_r+0x5e0>
   83da4:	84000317 	ldw	r16,12(r16)
   83da8:	81c0f826 	beq	r16,r7,8418c <_malloc_r+0x5bc>
   83dac:	80800117 	ldw	r2,4(r16)
   83db0:	1284703a 	and	r2,r2,r10
   83db4:	1447c83a 	sub	r3,r2,r17
   83db8:	48fff90e 	bge	r9,r3,83da0 <_malloc_r+0x1d0>
   83dbc:	80800317 	ldw	r2,12(r16)
   83dc0:	81000217 	ldw	r4,8(r16)
   83dc4:	89400054 	ori	r5,r17,1
   83dc8:	81400115 	stw	r5,4(r16)
   83dcc:	20800315 	stw	r2,12(r4)
   83dd0:	11000215 	stw	r4,8(r2)
   83dd4:	8463883a 	add	r17,r16,r17
   83dd8:	9c400515 	stw	r17,20(r19)
   83ddc:	9c400415 	stw	r17,16(r19)
   83de0:	18800054 	ori	r2,r3,1
   83de4:	88800115 	stw	r2,4(r17)
   83de8:	8a000315 	stw	r8,12(r17)
   83dec:	8a000215 	stw	r8,8(r17)
   83df0:	88e3883a 	add	r17,r17,r3
   83df4:	88c00015 	stw	r3,0(r17)
   83df8:	9009883a 	mov	r4,r18
   83dfc:	0084b5c0 	call	84b5c <__malloc_unlock>
   83e00:	80800204 	addi	r2,r16,8
   83e04:	00001b06 	br	83e74 <_malloc_r+0x2a4>
   83e08:	04400404 	movi	r17,16
   83e0c:	89402536 	bltu	r17,r5,83ea4 <_malloc_r+0x2d4>
   83e10:	0084b580 	call	84b58 <__malloc_lock>
   83e14:	00800184 	movi	r2,6
   83e18:	01000084 	movi	r4,2
   83e1c:	04c00234 	movhi	r19,8
   83e20:	1085883a 	add	r2,r2,r2
   83e24:	9cdbbe04 	addi	r19,r19,28408
   83e28:	1085883a 	add	r2,r2,r2
   83e2c:	9885883a 	add	r2,r19,r2
   83e30:	14000117 	ldw	r16,4(r2)
   83e34:	10fffe04 	addi	r3,r2,-8
   83e38:	80c0d926 	beq	r16,r3,841a0 <_malloc_r+0x5d0>
   83e3c:	80c00117 	ldw	r3,4(r16)
   83e40:	81000317 	ldw	r4,12(r16)
   83e44:	00bfff04 	movi	r2,-4
   83e48:	1884703a 	and	r2,r3,r2
   83e4c:	81400217 	ldw	r5,8(r16)
   83e50:	8085883a 	add	r2,r16,r2
   83e54:	10c00117 	ldw	r3,4(r2)
   83e58:	29000315 	stw	r4,12(r5)
   83e5c:	21400215 	stw	r5,8(r4)
   83e60:	18c00054 	ori	r3,r3,1
   83e64:	10c00115 	stw	r3,4(r2)
   83e68:	9009883a 	mov	r4,r18
   83e6c:	0084b5c0 	call	84b5c <__malloc_unlock>
   83e70:	80800204 	addi	r2,r16,8
   83e74:	dfc00a17 	ldw	ra,40(sp)
   83e78:	df000917 	ldw	fp,36(sp)
   83e7c:	ddc00817 	ldw	r23,32(sp)
   83e80:	dd800717 	ldw	r22,28(sp)
   83e84:	dd400617 	ldw	r21,24(sp)
   83e88:	dd000517 	ldw	r20,20(sp)
   83e8c:	dcc00417 	ldw	r19,16(sp)
   83e90:	dc800317 	ldw	r18,12(sp)
   83e94:	dc400217 	ldw	r17,8(sp)
   83e98:	dc000117 	ldw	r16,4(sp)
   83e9c:	dec00b04 	addi	sp,sp,44
   83ea0:	f800283a 	ret
   83ea4:	00800304 	movi	r2,12
   83ea8:	90800015 	stw	r2,0(r18)
   83eac:	0005883a 	mov	r2,zero
   83eb0:	003ff006 	br	83e74 <_malloc_r+0x2a4>
   83eb4:	01002004 	movi	r4,128
   83eb8:	02001004 	movi	r8,64
   83ebc:	01c00fc4 	movi	r7,63
   83ec0:	003f6106 	br	83c48 <_malloc_r+0x78>
   83ec4:	4009883a 	mov	r4,r8
   83ec8:	003f7506 	br	83ca0 <_malloc_r+0xd0>
   83ecc:	81000317 	ldw	r4,12(r16)
   83ed0:	003fde06 	br	83e4c <_malloc_r+0x27c>
   83ed4:	81c5883a 	add	r2,r16,r7
   83ed8:	11400117 	ldw	r5,4(r2)
   83edc:	9009883a 	mov	r4,r18
   83ee0:	29400054 	ori	r5,r5,1
   83ee4:	11400115 	stw	r5,4(r2)
   83ee8:	0084b5c0 	call	84b5c <__malloc_unlock>
   83eec:	80800204 	addi	r2,r16,8
   83ef0:	003fe006 	br	83e74 <_malloc_r+0x2a4>
   83ef4:	9c000217 	ldw	r16,8(r19)
   83ef8:	00bfff04 	movi	r2,-4
   83efc:	85800117 	ldw	r22,4(r16)
   83f00:	b0ac703a 	and	r22,r22,r2
   83f04:	b4400336 	bltu	r22,r17,83f14 <_malloc_r+0x344>
   83f08:	b445c83a 	sub	r2,r22,r17
   83f0c:	00c003c4 	movi	r3,15
   83f10:	18805d16 	blt	r3,r2,84088 <_malloc_r+0x4b8>
   83f14:	05c00234 	movhi	r23,8
   83f18:	00800274 	movhi	r2,9
   83f1c:	10a5ac04 	addi	r2,r2,-26960
   83f20:	bddccd04 	addi	r23,r23,29492
   83f24:	15400017 	ldw	r21,0(r2)
   83f28:	b8c00017 	ldw	r3,0(r23)
   83f2c:	00bfffc4 	movi	r2,-1
   83f30:	858d883a 	add	r6,r16,r22
   83f34:	8d6b883a 	add	r21,r17,r21
   83f38:	1880ea26 	beq	r3,r2,842e4 <_malloc_r+0x714>
   83f3c:	ad4403c4 	addi	r21,r21,4111
   83f40:	00bc0004 	movi	r2,-4096
   83f44:	a8aa703a 	and	r21,r21,r2
   83f48:	a80b883a 	mov	r5,r21
   83f4c:	9009883a 	mov	r4,r18
   83f50:	d9800015 	stw	r6,0(sp)
   83f54:	00845040 	call	84504 <_sbrk_r>
   83f58:	1029883a 	mov	r20,r2
   83f5c:	00bfffc4 	movi	r2,-1
   83f60:	d9800017 	ldw	r6,0(sp)
   83f64:	a080e826 	beq	r20,r2,84308 <_malloc_r+0x738>
   83f68:	a180a636 	bltu	r20,r6,84204 <_malloc_r+0x634>
   83f6c:	07000274 	movhi	fp,9
   83f70:	e7285c04 	addi	fp,fp,-24208
   83f74:	e0800017 	ldw	r2,0(fp)
   83f78:	a887883a 	add	r3,r21,r2
   83f7c:	e0c00015 	stw	r3,0(fp)
   83f80:	3500e626 	beq	r6,r20,8431c <_malloc_r+0x74c>
   83f84:	b9000017 	ldw	r4,0(r23)
   83f88:	00bfffc4 	movi	r2,-1
   83f8c:	2080ee26 	beq	r4,r2,84348 <_malloc_r+0x778>
   83f90:	a185c83a 	sub	r2,r20,r6
   83f94:	10c5883a 	add	r2,r2,r3
   83f98:	e0800015 	stw	r2,0(fp)
   83f9c:	a0c001cc 	andi	r3,r20,7
   83fa0:	1800bc26 	beq	r3,zero,84294 <_malloc_r+0x6c4>
   83fa4:	a0e9c83a 	sub	r20,r20,r3
   83fa8:	00840204 	movi	r2,4104
   83fac:	a5000204 	addi	r20,r20,8
   83fb0:	10c7c83a 	sub	r3,r2,r3
   83fb4:	a545883a 	add	r2,r20,r21
   83fb8:	1083ffcc 	andi	r2,r2,4095
   83fbc:	18abc83a 	sub	r21,r3,r2
   83fc0:	a80b883a 	mov	r5,r21
   83fc4:	9009883a 	mov	r4,r18
   83fc8:	00845040 	call	84504 <_sbrk_r>
   83fcc:	00ffffc4 	movi	r3,-1
   83fd0:	10c0e126 	beq	r2,r3,84358 <_malloc_r+0x788>
   83fd4:	1505c83a 	sub	r2,r2,r20
   83fd8:	1545883a 	add	r2,r2,r21
   83fdc:	10800054 	ori	r2,r2,1
   83fe0:	e0c00017 	ldw	r3,0(fp)
   83fe4:	9d000215 	stw	r20,8(r19)
   83fe8:	a0800115 	stw	r2,4(r20)
   83fec:	a8c7883a 	add	r3,r21,r3
   83ff0:	e0c00015 	stw	r3,0(fp)
   83ff4:	84c00e26 	beq	r16,r19,84030 <_malloc_r+0x460>
   83ff8:	018003c4 	movi	r6,15
   83ffc:	3580a72e 	bgeu	r6,r22,8429c <_malloc_r+0x6cc>
   84000:	81400117 	ldw	r5,4(r16)
   84004:	013ffe04 	movi	r4,-8
   84008:	b0bffd04 	addi	r2,r22,-12
   8400c:	1104703a 	and	r2,r2,r4
   84010:	2900004c 	andi	r4,r5,1
   84014:	2088b03a 	or	r4,r4,r2
   84018:	81000115 	stw	r4,4(r16)
   8401c:	01400144 	movi	r5,5
   84020:	8089883a 	add	r4,r16,r2
   84024:	21400115 	stw	r5,4(r4)
   84028:	21400215 	stw	r5,8(r4)
   8402c:	3080cd36 	bltu	r6,r2,84364 <_malloc_r+0x794>
   84030:	00800274 	movhi	r2,9
   84034:	10a5ab04 	addi	r2,r2,-26964
   84038:	11000017 	ldw	r4,0(r2)
   8403c:	20c0012e 	bgeu	r4,r3,84044 <_malloc_r+0x474>
   84040:	10c00015 	stw	r3,0(r2)
   84044:	00800274 	movhi	r2,9
   84048:	10a5aa04 	addi	r2,r2,-26968
   8404c:	11000017 	ldw	r4,0(r2)
   84050:	9c000217 	ldw	r16,8(r19)
   84054:	20c0012e 	bgeu	r4,r3,8405c <_malloc_r+0x48c>
   84058:	10c00015 	stw	r3,0(r2)
   8405c:	80c00117 	ldw	r3,4(r16)
   84060:	00bfff04 	movi	r2,-4
   84064:	1886703a 	and	r3,r3,r2
   84068:	1c45c83a 	sub	r2,r3,r17
   8406c:	1c400236 	bltu	r3,r17,84078 <_malloc_r+0x4a8>
   84070:	00c003c4 	movi	r3,15
   84074:	18800416 	blt	r3,r2,84088 <_malloc_r+0x4b8>
   84078:	9009883a 	mov	r4,r18
   8407c:	0084b5c0 	call	84b5c <__malloc_unlock>
   84080:	0005883a 	mov	r2,zero
   84084:	003f7b06 	br	83e74 <_malloc_r+0x2a4>
   84088:	88c00054 	ori	r3,r17,1
   8408c:	80c00115 	stw	r3,4(r16)
   84090:	8463883a 	add	r17,r16,r17
   84094:	10800054 	ori	r2,r2,1
   84098:	9c400215 	stw	r17,8(r19)
   8409c:	88800115 	stw	r2,4(r17)
   840a0:	9009883a 	mov	r4,r18
   840a4:	0084b5c0 	call	84b5c <__malloc_unlock>
   840a8:	80800204 	addi	r2,r16,8
   840ac:	003f7106 	br	83e74 <_malloc_r+0x2a4>
   840b0:	00c00504 	movi	r3,20
   840b4:	18804a2e 	bgeu	r3,r2,841e0 <_malloc_r+0x610>
   840b8:	00c01504 	movi	r3,84
   840bc:	18806e36 	bltu	r3,r2,84278 <_malloc_r+0x6a8>
   840c0:	8804d33a 	srli	r2,r17,12
   840c4:	12001bc4 	addi	r8,r2,111
   840c8:	11c01b84 	addi	r7,r2,110
   840cc:	4209883a 	add	r4,r8,r8
   840d0:	003edd06 	br	83c48 <_malloc_r+0x78>
   840d4:	3804d27a 	srli	r2,r7,9
   840d8:	00c00104 	movi	r3,4
   840dc:	1880442e 	bgeu	r3,r2,841f0 <_malloc_r+0x620>
   840e0:	00c00504 	movi	r3,20
   840e4:	18808136 	bltu	r3,r2,842ec <_malloc_r+0x71c>
   840e8:	11401704 	addi	r5,r2,92
   840ec:	10c016c4 	addi	r3,r2,91
   840f0:	294b883a 	add	r5,r5,r5
   840f4:	294b883a 	add	r5,r5,r5
   840f8:	294b883a 	add	r5,r5,r5
   840fc:	994b883a 	add	r5,r19,r5
   84100:	28800017 	ldw	r2,0(r5)
   84104:	01800234 	movhi	r6,8
   84108:	297ffe04 	addi	r5,r5,-8
   8410c:	319bbe04 	addi	r6,r6,28408
   84110:	28806526 	beq	r5,r2,842a8 <_malloc_r+0x6d8>
   84114:	01bfff04 	movi	r6,-4
   84118:	10c00117 	ldw	r3,4(r2)
   8411c:	1986703a 	and	r3,r3,r6
   84120:	38c0022e 	bgeu	r7,r3,8412c <_malloc_r+0x55c>
   84124:	10800217 	ldw	r2,8(r2)
   84128:	28bffb1e 	bne	r5,r2,84118 <_malloc_r+0x548>
   8412c:	11400317 	ldw	r5,12(r2)
   84130:	98c00117 	ldw	r3,4(r19)
   84134:	81400315 	stw	r5,12(r16)
   84138:	80800215 	stw	r2,8(r16)
   8413c:	2c000215 	stw	r16,8(r5)
   84140:	14000315 	stw	r16,12(r2)
   84144:	003ef806 	br	83d28 <_malloc_r+0x158>
   84148:	88c00054 	ori	r3,r17,1
   8414c:	80c00115 	stw	r3,4(r16)
   84150:	8463883a 	add	r17,r16,r17
   84154:	34400515 	stw	r17,20(r6)
   84158:	34400415 	stw	r17,16(r6)
   8415c:	10c00054 	ori	r3,r2,1
   84160:	8a000315 	stw	r8,12(r17)
   84164:	8a000215 	stw	r8,8(r17)
   84168:	88c00115 	stw	r3,4(r17)
   8416c:	88a3883a 	add	r17,r17,r2
   84170:	88800015 	stw	r2,0(r17)
   84174:	9009883a 	mov	r4,r18
   84178:	0084b5c0 	call	84b5c <__malloc_unlock>
   8417c:	80800204 	addi	r2,r16,8
   84180:	003f3c06 	br	83e74 <_malloc_r+0x2a4>
   84184:	30c00117 	ldw	r3,4(r6)
   84188:	003ee706 	br	83d28 <_malloc_r+0x158>
   8418c:	5ac00044 	addi	r11,r11,1
   84190:	588000cc 	andi	r2,r11,3
   84194:	31800204 	addi	r6,r6,8
   84198:	103efd1e 	bne	r2,zero,83d90 <_malloc_r+0x1c0>
   8419c:	00002406 	br	84230 <_malloc_r+0x660>
   841a0:	14000317 	ldw	r16,12(r2)
   841a4:	143f251e 	bne	r2,r16,83e3c <_malloc_r+0x26c>
   841a8:	21000084 	addi	r4,r4,2
   841ac:	003ebc06 	br	83ca0 <_malloc_r+0xd0>
   841b0:	8085883a 	add	r2,r16,r2
   841b4:	10c00117 	ldw	r3,4(r2)
   841b8:	81000317 	ldw	r4,12(r16)
   841bc:	81400217 	ldw	r5,8(r16)
   841c0:	18c00054 	ori	r3,r3,1
   841c4:	10c00115 	stw	r3,4(r2)
   841c8:	29000315 	stw	r4,12(r5)
   841cc:	21400215 	stw	r5,8(r4)
   841d0:	9009883a 	mov	r4,r18
   841d4:	0084b5c0 	call	84b5c <__malloc_unlock>
   841d8:	80800204 	addi	r2,r16,8
   841dc:	003f2506 	br	83e74 <_malloc_r+0x2a4>
   841e0:	12001704 	addi	r8,r2,92
   841e4:	11c016c4 	addi	r7,r2,91
   841e8:	4209883a 	add	r4,r8,r8
   841ec:	003e9606 	br	83c48 <_malloc_r+0x78>
   841f0:	3804d1ba 	srli	r2,r7,6
   841f4:	11400e44 	addi	r5,r2,57
   841f8:	10c00e04 	addi	r3,r2,56
   841fc:	294b883a 	add	r5,r5,r5
   84200:	003fbc06 	br	840f4 <_malloc_r+0x524>
   84204:	84ff5926 	beq	r16,r19,83f6c <_malloc_r+0x39c>
   84208:	00800234 	movhi	r2,8
   8420c:	109bbe04 	addi	r2,r2,28408
   84210:	14000217 	ldw	r16,8(r2)
   84214:	00bfff04 	movi	r2,-4
   84218:	80c00117 	ldw	r3,4(r16)
   8421c:	1886703a 	and	r3,r3,r2
   84220:	003f9106 	br	84068 <_malloc_r+0x498>
   84224:	60800217 	ldw	r2,8(r12)
   84228:	213fffc4 	addi	r4,r4,-1
   8422c:	1300651e 	bne	r2,r12,843c4 <_malloc_r+0x7f4>
   84230:	208000cc 	andi	r2,r4,3
   84234:	633ffe04 	addi	r12,r12,-8
   84238:	103ffa1e 	bne	r2,zero,84224 <_malloc_r+0x654>
   8423c:	98800117 	ldw	r2,4(r19)
   84240:	0146303a 	nor	r3,zero,r5
   84244:	1884703a 	and	r2,r3,r2
   84248:	98800115 	stw	r2,4(r19)
   8424c:	294b883a 	add	r5,r5,r5
   84250:	117f2836 	bltu	r2,r5,83ef4 <_malloc_r+0x324>
   84254:	283f2726 	beq	r5,zero,83ef4 <_malloc_r+0x324>
   84258:	2886703a 	and	r3,r5,r2
   8425c:	5809883a 	mov	r4,r11
   84260:	183ec31e 	bne	r3,zero,83d70 <_malloc_r+0x1a0>
   84264:	294b883a 	add	r5,r5,r5
   84268:	2886703a 	and	r3,r5,r2
   8426c:	21000104 	addi	r4,r4,4
   84270:	183ffc26 	beq	r3,zero,84264 <_malloc_r+0x694>
   84274:	003ebe06 	br	83d70 <_malloc_r+0x1a0>
   84278:	00c05504 	movi	r3,340
   8427c:	18801236 	bltu	r3,r2,842c8 <_malloc_r+0x6f8>
   84280:	8804d3fa 	srli	r2,r17,15
   84284:	12001e04 	addi	r8,r2,120
   84288:	11c01dc4 	addi	r7,r2,119
   8428c:	4209883a 	add	r4,r8,r8
   84290:	003e6d06 	br	83c48 <_malloc_r+0x78>
   84294:	00c40004 	movi	r3,4096
   84298:	003f4606 	br	83fb4 <_malloc_r+0x3e4>
   8429c:	00800044 	movi	r2,1
   842a0:	a0800115 	stw	r2,4(r20)
   842a4:	003f7406 	br	84078 <_malloc_r+0x4a8>
   842a8:	1805d0ba 	srai	r2,r3,2
   842ac:	01c00044 	movi	r7,1
   842b0:	30c00117 	ldw	r3,4(r6)
   842b4:	388e983a 	sll	r7,r7,r2
   842b8:	2805883a 	mov	r2,r5
   842bc:	38c6b03a 	or	r3,r7,r3
   842c0:	30c00115 	stw	r3,4(r6)
   842c4:	003f9b06 	br	84134 <_malloc_r+0x564>
   842c8:	00c15504 	movi	r3,1364
   842cc:	18801a36 	bltu	r3,r2,84338 <_malloc_r+0x768>
   842d0:	8804d4ba 	srli	r2,r17,18
   842d4:	12001f44 	addi	r8,r2,125
   842d8:	11c01f04 	addi	r7,r2,124
   842dc:	4209883a 	add	r4,r8,r8
   842e0:	003e5906 	br	83c48 <_malloc_r+0x78>
   842e4:	ad400404 	addi	r21,r21,16
   842e8:	003f1706 	br	83f48 <_malloc_r+0x378>
   842ec:	00c01504 	movi	r3,84
   842f0:	18802336 	bltu	r3,r2,84380 <_malloc_r+0x7b0>
   842f4:	3804d33a 	srli	r2,r7,12
   842f8:	11401bc4 	addi	r5,r2,111
   842fc:	10c01b84 	addi	r3,r2,110
   84300:	294b883a 	add	r5,r5,r5
   84304:	003f7b06 	br	840f4 <_malloc_r+0x524>
   84308:	9c000217 	ldw	r16,8(r19)
   8430c:	00bfff04 	movi	r2,-4
   84310:	80c00117 	ldw	r3,4(r16)
   84314:	1886703a 	and	r3,r3,r2
   84318:	003f5306 	br	84068 <_malloc_r+0x498>
   8431c:	3083ffcc 	andi	r2,r6,4095
   84320:	103f181e 	bne	r2,zero,83f84 <_malloc_r+0x3b4>
   84324:	99000217 	ldw	r4,8(r19)
   84328:	b545883a 	add	r2,r22,r21
   8432c:	10800054 	ori	r2,r2,1
   84330:	20800115 	stw	r2,4(r4)
   84334:	003f3e06 	br	84030 <_malloc_r+0x460>
   84338:	01003f84 	movi	r4,254
   8433c:	02001fc4 	movi	r8,127
   84340:	01c01f84 	movi	r7,126
   84344:	003e4006 	br	83c48 <_malloc_r+0x78>
   84348:	00800234 	movhi	r2,8
   8434c:	109ccd04 	addi	r2,r2,29492
   84350:	15000015 	stw	r20,0(r2)
   84354:	003f1106 	br	83f9c <_malloc_r+0x3cc>
   84358:	00800044 	movi	r2,1
   8435c:	002b883a 	mov	r21,zero
   84360:	003f1f06 	br	83fe0 <_malloc_r+0x410>
   84364:	81400204 	addi	r5,r16,8
   84368:	9009883a 	mov	r4,r18
   8436c:	008357c0 	call	8357c <_free_r>
   84370:	00800274 	movhi	r2,9
   84374:	10a85c04 	addi	r2,r2,-24208
   84378:	10c00017 	ldw	r3,0(r2)
   8437c:	003f2c06 	br	84030 <_malloc_r+0x460>
   84380:	00c05504 	movi	r3,340
   84384:	18800536 	bltu	r3,r2,8439c <_malloc_r+0x7cc>
   84388:	3804d3fa 	srli	r2,r7,15
   8438c:	11401e04 	addi	r5,r2,120
   84390:	10c01dc4 	addi	r3,r2,119
   84394:	294b883a 	add	r5,r5,r5
   84398:	003f5606 	br	840f4 <_malloc_r+0x524>
   8439c:	00c15504 	movi	r3,1364
   843a0:	18800536 	bltu	r3,r2,843b8 <_malloc_r+0x7e8>
   843a4:	3804d4ba 	srli	r2,r7,18
   843a8:	11401f44 	addi	r5,r2,125
   843ac:	10c01f04 	addi	r3,r2,124
   843b0:	294b883a 	add	r5,r5,r5
   843b4:	003f4f06 	br	840f4 <_malloc_r+0x524>
   843b8:	01403f84 	movi	r5,254
   843bc:	00c01f84 	movi	r3,126
   843c0:	003f4c06 	br	840f4 <_malloc_r+0x524>
   843c4:	98800117 	ldw	r2,4(r19)
   843c8:	003fa006 	br	8424c <_malloc_r+0x67c>
   843cc:	8808d0fa 	srli	r4,r17,3
   843d0:	20800044 	addi	r2,r4,1
   843d4:	1085883a 	add	r2,r2,r2
   843d8:	003e9006 	br	83e1c <_malloc_r+0x24c>

000843dc <memset>:
   843dc:	20c000cc 	andi	r3,r4,3
   843e0:	2005883a 	mov	r2,r4
   843e4:	18004426 	beq	r3,zero,844f8 <memset+0x11c>
   843e8:	31ffffc4 	addi	r7,r6,-1
   843ec:	30004026 	beq	r6,zero,844f0 <memset+0x114>
   843f0:	2813883a 	mov	r9,r5
   843f4:	200d883a 	mov	r6,r4
   843f8:	2007883a 	mov	r3,r4
   843fc:	00000406 	br	84410 <memset+0x34>
   84400:	3a3fffc4 	addi	r8,r7,-1
   84404:	31800044 	addi	r6,r6,1
   84408:	38003926 	beq	r7,zero,844f0 <memset+0x114>
   8440c:	400f883a 	mov	r7,r8
   84410:	18c00044 	addi	r3,r3,1
   84414:	32400005 	stb	r9,0(r6)
   84418:	1a0000cc 	andi	r8,r3,3
   8441c:	403ff81e 	bne	r8,zero,84400 <memset+0x24>
   84420:	010000c4 	movi	r4,3
   84424:	21c02d2e 	bgeu	r4,r7,844dc <memset+0x100>
   84428:	29003fcc 	andi	r4,r5,255
   8442c:	200c923a 	slli	r6,r4,8
   84430:	3108b03a 	or	r4,r6,r4
   84434:	200c943a 	slli	r6,r4,16
   84438:	218cb03a 	or	r6,r4,r6
   8443c:	010003c4 	movi	r4,15
   84440:	21c0182e 	bgeu	r4,r7,844a4 <memset+0xc8>
   84444:	3b3ffc04 	addi	r12,r7,-16
   84448:	6018d13a 	srli	r12,r12,4
   8444c:	1a000104 	addi	r8,r3,4
   84450:	1ac00204 	addi	r11,r3,8
   84454:	6008913a 	slli	r4,r12,4
   84458:	1a800304 	addi	r10,r3,12
   8445c:	1813883a 	mov	r9,r3
   84460:	21000504 	addi	r4,r4,20
   84464:	1909883a 	add	r4,r3,r4
   84468:	49800015 	stw	r6,0(r9)
   8446c:	41800015 	stw	r6,0(r8)
   84470:	59800015 	stw	r6,0(r11)
   84474:	51800015 	stw	r6,0(r10)
   84478:	42000404 	addi	r8,r8,16
   8447c:	4a400404 	addi	r9,r9,16
   84480:	5ac00404 	addi	r11,r11,16
   84484:	52800404 	addi	r10,r10,16
   84488:	413ff71e 	bne	r8,r4,84468 <memset+0x8c>
   8448c:	63000044 	addi	r12,r12,1
   84490:	6018913a 	slli	r12,r12,4
   84494:	39c003cc 	andi	r7,r7,15
   84498:	010000c4 	movi	r4,3
   8449c:	1b07883a 	add	r3,r3,r12
   844a0:	21c00e2e 	bgeu	r4,r7,844dc <memset+0x100>
   844a4:	1813883a 	mov	r9,r3
   844a8:	3811883a 	mov	r8,r7
   844ac:	010000c4 	movi	r4,3
   844b0:	49800015 	stw	r6,0(r9)
   844b4:	423fff04 	addi	r8,r8,-4
   844b8:	4a400104 	addi	r9,r9,4
   844bc:	223ffc36 	bltu	r4,r8,844b0 <memset+0xd4>
   844c0:	393fff04 	addi	r4,r7,-4
   844c4:	2008d0ba 	srli	r4,r4,2
   844c8:	39c000cc 	andi	r7,r7,3
   844cc:	21000044 	addi	r4,r4,1
   844d0:	2109883a 	add	r4,r4,r4
   844d4:	2109883a 	add	r4,r4,r4
   844d8:	1907883a 	add	r3,r3,r4
   844dc:	38000526 	beq	r7,zero,844f4 <memset+0x118>
   844e0:	19cf883a 	add	r7,r3,r7
   844e4:	19400005 	stb	r5,0(r3)
   844e8:	18c00044 	addi	r3,r3,1
   844ec:	38fffd1e 	bne	r7,r3,844e4 <memset+0x108>
   844f0:	f800283a 	ret
   844f4:	f800283a 	ret
   844f8:	2007883a 	mov	r3,r4
   844fc:	300f883a 	mov	r7,r6
   84500:	003fc706 	br	84420 <memset+0x44>

00084504 <_sbrk_r>:
   84504:	defffd04 	addi	sp,sp,-12
   84508:	dc000015 	stw	r16,0(sp)
   8450c:	04000274 	movhi	r16,9
   84510:	dc400115 	stw	r17,4(sp)
   84514:	8425a904 	addi	r16,r16,-26972
   84518:	2023883a 	mov	r17,r4
   8451c:	2809883a 	mov	r4,r5
   84520:	dfc00215 	stw	ra,8(sp)
   84524:	80000015 	stw	zero,0(r16)
   84528:	0084c380 	call	84c38 <sbrk>
   8452c:	00ffffc4 	movi	r3,-1
   84530:	10c00526 	beq	r2,r3,84548 <_sbrk_r+0x44>
   84534:	dfc00217 	ldw	ra,8(sp)
   84538:	dc400117 	ldw	r17,4(sp)
   8453c:	dc000017 	ldw	r16,0(sp)
   84540:	dec00304 	addi	sp,sp,12
   84544:	f800283a 	ret
   84548:	80c00017 	ldw	r3,0(r16)
   8454c:	183ff926 	beq	r3,zero,84534 <_sbrk_r+0x30>
   84550:	88c00015 	stw	r3,0(r17)
   84554:	003ff706 	br	84534 <_sbrk_r+0x30>

00084558 <__sread>:
   84558:	defffe04 	addi	sp,sp,-8
   8455c:	dc000015 	stw	r16,0(sp)
   84560:	2821883a 	mov	r16,r5
   84564:	2940038f 	ldh	r5,14(r5)
   84568:	dfc00115 	stw	ra,4(sp)
   8456c:	008495c0 	call	8495c <_read_r>
   84570:	10000716 	blt	r2,zero,84590 <__sread+0x38>
   84574:	80c01417 	ldw	r3,80(r16)
   84578:	1887883a 	add	r3,r3,r2
   8457c:	80c01415 	stw	r3,80(r16)
   84580:	dfc00117 	ldw	ra,4(sp)
   84584:	dc000017 	ldw	r16,0(sp)
   84588:	dec00204 	addi	sp,sp,8
   8458c:	f800283a 	ret
   84590:	80c0030b 	ldhu	r3,12(r16)
   84594:	18fbffcc 	andi	r3,r3,61439
   84598:	80c0030d 	sth	r3,12(r16)
   8459c:	dfc00117 	ldw	ra,4(sp)
   845a0:	dc000017 	ldw	r16,0(sp)
   845a4:	dec00204 	addi	sp,sp,8
   845a8:	f800283a 	ret

000845ac <__seofread>:
   845ac:	0005883a 	mov	r2,zero
   845b0:	f800283a 	ret

000845b4 <__swrite>:
   845b4:	2880030b 	ldhu	r2,12(r5)
   845b8:	defffb04 	addi	sp,sp,-20
   845bc:	dcc00315 	stw	r19,12(sp)
   845c0:	dc800215 	stw	r18,8(sp)
   845c4:	dc400115 	stw	r17,4(sp)
   845c8:	dc000015 	stw	r16,0(sp)
   845cc:	dfc00415 	stw	ra,16(sp)
   845d0:	10c0400c 	andi	r3,r2,256
   845d4:	2821883a 	mov	r16,r5
   845d8:	2023883a 	mov	r17,r4
   845dc:	3025883a 	mov	r18,r6
   845e0:	3827883a 	mov	r19,r7
   845e4:	18000526 	beq	r3,zero,845fc <__swrite+0x48>
   845e8:	2940038f 	ldh	r5,14(r5)
   845ec:	01c00084 	movi	r7,2
   845f0:	000d883a 	mov	r6,zero
   845f4:	00848fc0 	call	848fc <_lseek_r>
   845f8:	8080030b 	ldhu	r2,12(r16)
   845fc:	8140038f 	ldh	r5,14(r16)
   84600:	10bbffcc 	andi	r2,r2,61439
   84604:	980f883a 	mov	r7,r19
   84608:	900d883a 	mov	r6,r18
   8460c:	8809883a 	mov	r4,r17
   84610:	8080030d 	sth	r2,12(r16)
   84614:	dfc00417 	ldw	ra,16(sp)
   84618:	dcc00317 	ldw	r19,12(sp)
   8461c:	dc800217 	ldw	r18,8(sp)
   84620:	dc400117 	ldw	r17,4(sp)
   84624:	dc000017 	ldw	r16,0(sp)
   84628:	dec00504 	addi	sp,sp,20
   8462c:	00846941 	jmpi	84694 <_write_r>

00084630 <__sseek>:
   84630:	defffe04 	addi	sp,sp,-8
   84634:	dc000015 	stw	r16,0(sp)
   84638:	2821883a 	mov	r16,r5
   8463c:	2940038f 	ldh	r5,14(r5)
   84640:	dfc00115 	stw	ra,4(sp)
   84644:	00848fc0 	call	848fc <_lseek_r>
   84648:	00ffffc4 	movi	r3,-1
   8464c:	10c00826 	beq	r2,r3,84670 <__sseek+0x40>
   84650:	80c0030b 	ldhu	r3,12(r16)
   84654:	80801415 	stw	r2,80(r16)
   84658:	18c40014 	ori	r3,r3,4096
   8465c:	80c0030d 	sth	r3,12(r16)
   84660:	dfc00117 	ldw	ra,4(sp)
   84664:	dc000017 	ldw	r16,0(sp)
   84668:	dec00204 	addi	sp,sp,8
   8466c:	f800283a 	ret
   84670:	80c0030b 	ldhu	r3,12(r16)
   84674:	18fbffcc 	andi	r3,r3,61439
   84678:	80c0030d 	sth	r3,12(r16)
   8467c:	dfc00117 	ldw	ra,4(sp)
   84680:	dc000017 	ldw	r16,0(sp)
   84684:	dec00204 	addi	sp,sp,8
   84688:	f800283a 	ret

0008468c <__sclose>:
   8468c:	2940038f 	ldh	r5,14(r5)
   84690:	00846f41 	jmpi	846f4 <_close_r>

00084694 <_write_r>:
   84694:	defffd04 	addi	sp,sp,-12
   84698:	2805883a 	mov	r2,r5
   8469c:	dc000015 	stw	r16,0(sp)
   846a0:	04000274 	movhi	r16,9
   846a4:	dc400115 	stw	r17,4(sp)
   846a8:	300b883a 	mov	r5,r6
   846ac:	8425a904 	addi	r16,r16,-26972
   846b0:	2023883a 	mov	r17,r4
   846b4:	380d883a 	mov	r6,r7
   846b8:	1009883a 	mov	r4,r2
   846bc:	dfc00215 	stw	ra,8(sp)
   846c0:	80000015 	stw	zero,0(r16)
   846c4:	0084c840 	call	84c84 <write>
   846c8:	00ffffc4 	movi	r3,-1
   846cc:	10c00526 	beq	r2,r3,846e4 <_write_r+0x50>
   846d0:	dfc00217 	ldw	ra,8(sp)
   846d4:	dc400117 	ldw	r17,4(sp)
   846d8:	dc000017 	ldw	r16,0(sp)
   846dc:	dec00304 	addi	sp,sp,12
   846e0:	f800283a 	ret
   846e4:	80c00017 	ldw	r3,0(r16)
   846e8:	183ff926 	beq	r3,zero,846d0 <_write_r+0x3c>
   846ec:	88c00015 	stw	r3,0(r17)
   846f0:	003ff706 	br	846d0 <_write_r+0x3c>

000846f4 <_close_r>:
   846f4:	defffd04 	addi	sp,sp,-12
   846f8:	dc000015 	stw	r16,0(sp)
   846fc:	04000274 	movhi	r16,9
   84700:	dc400115 	stw	r17,4(sp)
   84704:	8425a904 	addi	r16,r16,-26972
   84708:	2023883a 	mov	r17,r4
   8470c:	2809883a 	mov	r4,r5
   84710:	dfc00215 	stw	ra,8(sp)
   84714:	80000015 	stw	zero,0(r16)
   84718:	0081dc40 	call	81dc4 <close>
   8471c:	00ffffc4 	movi	r3,-1
   84720:	10c00526 	beq	r2,r3,84738 <_close_r+0x44>
   84724:	dfc00217 	ldw	ra,8(sp)
   84728:	dc400117 	ldw	r17,4(sp)
   8472c:	dc000017 	ldw	r16,0(sp)
   84730:	dec00304 	addi	sp,sp,12
   84734:	f800283a 	ret
   84738:	80c00017 	ldw	r3,0(r16)
   8473c:	183ff926 	beq	r3,zero,84724 <_close_r+0x30>
   84740:	88c00015 	stw	r3,0(r17)
   84744:	003ff706 	br	84724 <_close_r+0x30>

00084748 <_fclose_r>:
   84748:	28003926 	beq	r5,zero,84830 <_fclose_r+0xe8>
   8474c:	defffc04 	addi	sp,sp,-16
   84750:	dc400115 	stw	r17,4(sp)
   84754:	dc000015 	stw	r16,0(sp)
   84758:	dfc00315 	stw	ra,12(sp)
   8475c:	dc800215 	stw	r18,8(sp)
   84760:	2023883a 	mov	r17,r4
   84764:	2821883a 	mov	r16,r5
   84768:	20000226 	beq	r4,zero,84774 <_fclose_r+0x2c>
   8476c:	20800e17 	ldw	r2,56(r4)
   84770:	10002726 	beq	r2,zero,84810 <_fclose_r+0xc8>
   84774:	8080030f 	ldh	r2,12(r16)
   84778:	1000071e 	bne	r2,zero,84798 <_fclose_r+0x50>
   8477c:	0005883a 	mov	r2,zero
   84780:	dfc00317 	ldw	ra,12(sp)
   84784:	dc800217 	ldw	r18,8(sp)
   84788:	dc400117 	ldw	r17,4(sp)
   8478c:	dc000017 	ldw	r16,0(sp)
   84790:	dec00404 	addi	sp,sp,16
   84794:	f800283a 	ret
   84798:	800b883a 	mov	r5,r16
   8479c:	8809883a 	mov	r4,r17
   847a0:	0082e100 	call	82e10 <__sflush_r>
   847a4:	1025883a 	mov	r18,r2
   847a8:	80800b17 	ldw	r2,44(r16)
   847ac:	10000426 	beq	r2,zero,847c0 <_fclose_r+0x78>
   847b0:	81400717 	ldw	r5,28(r16)
   847b4:	8809883a 	mov	r4,r17
   847b8:	103ee83a 	callr	r2
   847bc:	10001616 	blt	r2,zero,84818 <_fclose_r+0xd0>
   847c0:	8080030b 	ldhu	r2,12(r16)
   847c4:	1080200c 	andi	r2,r2,128
   847c8:	1000151e 	bne	r2,zero,84820 <_fclose_r+0xd8>
   847cc:	81400c17 	ldw	r5,48(r16)
   847d0:	28000526 	beq	r5,zero,847e8 <_fclose_r+0xa0>
   847d4:	80801004 	addi	r2,r16,64
   847d8:	28800226 	beq	r5,r2,847e4 <_fclose_r+0x9c>
   847dc:	8809883a 	mov	r4,r17
   847e0:	008357c0 	call	8357c <_free_r>
   847e4:	80000c15 	stw	zero,48(r16)
   847e8:	81401117 	ldw	r5,68(r16)
   847ec:	28000326 	beq	r5,zero,847fc <_fclose_r+0xb4>
   847f0:	8809883a 	mov	r4,r17
   847f4:	008357c0 	call	8357c <_free_r>
   847f8:	80001115 	stw	zero,68(r16)
   847fc:	00834180 	call	83418 <__sfp_lock_acquire>
   84800:	8000030d 	sth	zero,12(r16)
   84804:	008341c0 	call	8341c <__sfp_lock_release>
   84808:	9005883a 	mov	r2,r18
   8480c:	003fdc06 	br	84780 <_fclose_r+0x38>
   84810:	00834080 	call	83408 <__sinit>
   84814:	003fd706 	br	84774 <_fclose_r+0x2c>
   84818:	04bfffc4 	movi	r18,-1
   8481c:	003fe806 	br	847c0 <_fclose_r+0x78>
   84820:	81400417 	ldw	r5,16(r16)
   84824:	8809883a 	mov	r4,r17
   84828:	008357c0 	call	8357c <_free_r>
   8482c:	003fe706 	br	847cc <_fclose_r+0x84>
   84830:	0005883a 	mov	r2,zero
   84834:	f800283a 	ret

00084838 <fclose>:
   84838:	00800234 	movhi	r2,8
   8483c:	109ccc04 	addi	r2,r2,29488
   84840:	200b883a 	mov	r5,r4
   84844:	11000017 	ldw	r4,0(r2)
   84848:	00847481 	jmpi	84748 <_fclose_r>

0008484c <_fstat_r>:
   8484c:	defffd04 	addi	sp,sp,-12
   84850:	2805883a 	mov	r2,r5
   84854:	dc000015 	stw	r16,0(sp)
   84858:	04000274 	movhi	r16,9
   8485c:	dc400115 	stw	r17,4(sp)
   84860:	8425a904 	addi	r16,r16,-26972
   84864:	2023883a 	mov	r17,r4
   84868:	300b883a 	mov	r5,r6
   8486c:	1009883a 	mov	r4,r2
   84870:	dfc00215 	stw	ra,8(sp)
   84874:	80000015 	stw	zero,0(r16)
   84878:	00849d00 	call	849d0 <fstat>
   8487c:	00ffffc4 	movi	r3,-1
   84880:	10c00526 	beq	r2,r3,84898 <_fstat_r+0x4c>
   84884:	dfc00217 	ldw	ra,8(sp)
   84888:	dc400117 	ldw	r17,4(sp)
   8488c:	dc000017 	ldw	r16,0(sp)
   84890:	dec00304 	addi	sp,sp,12
   84894:	f800283a 	ret
   84898:	80c00017 	ldw	r3,0(r16)
   8489c:	183ff926 	beq	r3,zero,84884 <_fstat_r+0x38>
   848a0:	88c00015 	stw	r3,0(r17)
   848a4:	003ff706 	br	84884 <_fstat_r+0x38>

000848a8 <_isatty_r>:
   848a8:	defffd04 	addi	sp,sp,-12
   848ac:	dc000015 	stw	r16,0(sp)
   848b0:	04000274 	movhi	r16,9
   848b4:	dc400115 	stw	r17,4(sp)
   848b8:	8425a904 	addi	r16,r16,-26972
   848bc:	2023883a 	mov	r17,r4
   848c0:	2809883a 	mov	r4,r5
   848c4:	dfc00215 	stw	ra,8(sp)
   848c8:	80000015 	stw	zero,0(r16)
   848cc:	0084a440 	call	84a44 <isatty>
   848d0:	00ffffc4 	movi	r3,-1
   848d4:	10c00526 	beq	r2,r3,848ec <_isatty_r+0x44>
   848d8:	dfc00217 	ldw	ra,8(sp)
   848dc:	dc400117 	ldw	r17,4(sp)
   848e0:	dc000017 	ldw	r16,0(sp)
   848e4:	dec00304 	addi	sp,sp,12
   848e8:	f800283a 	ret
   848ec:	80c00017 	ldw	r3,0(r16)
   848f0:	183ff926 	beq	r3,zero,848d8 <_isatty_r+0x30>
   848f4:	88c00015 	stw	r3,0(r17)
   848f8:	003ff706 	br	848d8 <_isatty_r+0x30>

000848fc <_lseek_r>:
   848fc:	defffd04 	addi	sp,sp,-12
   84900:	2805883a 	mov	r2,r5
   84904:	dc000015 	stw	r16,0(sp)
   84908:	04000274 	movhi	r16,9
   8490c:	dc400115 	stw	r17,4(sp)
   84910:	300b883a 	mov	r5,r6
   84914:	8425a904 	addi	r16,r16,-26972
   84918:	2023883a 	mov	r17,r4
   8491c:	380d883a 	mov	r6,r7
   84920:	1009883a 	mov	r4,r2
   84924:	dfc00215 	stw	ra,8(sp)
   84928:	80000015 	stw	zero,0(r16)
   8492c:	0084ac80 	call	84ac8 <lseek>
   84930:	00ffffc4 	movi	r3,-1
   84934:	10c00526 	beq	r2,r3,8494c <_lseek_r+0x50>
   84938:	dfc00217 	ldw	ra,8(sp)
   8493c:	dc400117 	ldw	r17,4(sp)
   84940:	dc000017 	ldw	r16,0(sp)
   84944:	dec00304 	addi	sp,sp,12
   84948:	f800283a 	ret
   8494c:	80c00017 	ldw	r3,0(r16)
   84950:	183ff926 	beq	r3,zero,84938 <_lseek_r+0x3c>
   84954:	88c00015 	stw	r3,0(r17)
   84958:	003ff706 	br	84938 <_lseek_r+0x3c>

0008495c <_read_r>:
   8495c:	defffd04 	addi	sp,sp,-12
   84960:	2805883a 	mov	r2,r5
   84964:	dc000015 	stw	r16,0(sp)
   84968:	04000274 	movhi	r16,9
   8496c:	dc400115 	stw	r17,4(sp)
   84970:	300b883a 	mov	r5,r6
   84974:	8425a904 	addi	r16,r16,-26972
   84978:	2023883a 	mov	r17,r4
   8497c:	380d883a 	mov	r6,r7
   84980:	1009883a 	mov	r4,r2
   84984:	dfc00215 	stw	ra,8(sp)
   84988:	80000015 	stw	zero,0(r16)
   8498c:	0084b600 	call	84b60 <read>
   84990:	00ffffc4 	movi	r3,-1
   84994:	10c00526 	beq	r2,r3,849ac <_read_r+0x50>
   84998:	dfc00217 	ldw	ra,8(sp)
   8499c:	dc400117 	ldw	r17,4(sp)
   849a0:	dc000017 	ldw	r16,0(sp)
   849a4:	dec00304 	addi	sp,sp,12
   849a8:	f800283a 	ret
   849ac:	80c00017 	ldw	r3,0(r16)
   849b0:	183ff926 	beq	r3,zero,84998 <_read_r+0x3c>
   849b4:	88c00015 	stw	r3,0(r17)
   849b8:	003ff706 	br	84998 <_read_r+0x3c>

000849bc <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   849bc:	20000226 	beq	r4,zero,849c8 <_exit+0xc>
    ALT_SIM_FAIL();
   849c0:	002af070 	cmpltui	zero,zero,43969
   849c4:	00000106 	br	849cc <_exit+0x10>
  } else {
    ALT_SIM_PASS();
   849c8:	002af0b0 	cmpltui	zero,zero,43970
   849cc:	003fff06 	br	849cc <_exit+0x10>

000849d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   849d0:	deffff04 	addi	sp,sp,-4
   849d4:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   849d8:	20000f16 	blt	r4,zero,84a18 <fstat+0x48>
   849dc:	20c00324 	muli	r3,r4,12
   849e0:	00800234 	movhi	r2,8
   849e4:	109a4b04 	addi	r2,r2,26924
   849e8:	1887883a 	add	r3,r3,r2
  
  if (fd)
   849ec:	18000a26 	beq	r3,zero,84a18 <fstat+0x48>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   849f0:	18800017 	ldw	r2,0(r3)
   849f4:	10800817 	ldw	r2,32(r2)
   849f8:	10000326 	beq	r2,zero,84a08 <fstat+0x38>
    {
      return fd->dev->fstat(fd, st);
   849fc:	1809883a 	mov	r4,r3
   84a00:	103ee83a 	callr	r2
   84a04:	00000c06 	br	84a38 <fstat+0x68>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   84a08:	00880004 	movi	r2,8192
   84a0c:	28800115 	stw	r2,4(r5)
      return 0;
   84a10:	0005883a 	mov	r2,zero
   84a14:	00000806 	br	84a38 <fstat+0x68>
   84a18:	d0a00717 	ldw	r2,-32740(gp)
   84a1c:	10000226 	beq	r2,zero,84a28 <fstat+0x58>
   84a20:	103ee83a 	callr	r2
   84a24:	00000106 	br	84a2c <fstat+0x5c>
   84a28:	d0a8e904 	addi	r2,gp,-23644
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   84a2c:	00c01444 	movi	r3,81
   84a30:	10c00015 	stw	r3,0(r2)
    return -1;
   84a34:	00bfffc4 	movi	r2,-1
  }
}
   84a38:	dfc00017 	ldw	ra,0(sp)
   84a3c:	dec00104 	addi	sp,sp,4
   84a40:	f800283a 	ret

00084a44 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   84a44:	defff004 	addi	sp,sp,-64
   84a48:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84a4c:	20001116 	blt	r4,zero,84a94 <isatty+0x50>
   84a50:	20c00324 	muli	r3,r4,12
   84a54:	00800234 	movhi	r2,8
   84a58:	109a4b04 	addi	r2,r2,26924
   84a5c:	1885883a 	add	r2,r3,r2
  
  if (fd)
   84a60:	10000c26 	beq	r2,zero,84a94 <isatty+0x50>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   84a64:	1805883a 	mov	r2,r3
   84a68:	00c00234 	movhi	r3,8
   84a6c:	18da4b04 	addi	r3,r3,26924
   84a70:	1885883a 	add	r2,r3,r2
   84a74:	10800017 	ldw	r2,0(r2)
   84a78:	10800817 	ldw	r2,32(r2)
   84a7c:	10000e26 	beq	r2,zero,84ab8 <isatty+0x74>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   84a80:	d80b883a 	mov	r5,sp
   84a84:	00849d00 	call	849d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   84a88:	d8800117 	ldw	r2,4(sp)
   84a8c:	10880020 	cmpeqi	r2,r2,8192
   84a90:	00000a06 	br	84abc <isatty+0x78>
   84a94:	d0a00717 	ldw	r2,-32740(gp)
   84a98:	10000226 	beq	r2,zero,84aa4 <isatty+0x60>
   84a9c:	103ee83a 	callr	r2
   84aa0:	00000106 	br	84aa8 <isatty+0x64>
   84aa4:	d0a8e904 	addi	r2,gp,-23644
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   84aa8:	00c01444 	movi	r3,81
   84aac:	10c00015 	stw	r3,0(r2)
    return 0;
   84ab0:	0005883a 	mov	r2,zero
   84ab4:	00000106 	br	84abc <isatty+0x78>
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
   84ab8:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
   84abc:	dfc00f17 	ldw	ra,60(sp)
   84ac0:	dec01004 	addi	sp,sp,64
   84ac4:	f800283a 	ret

00084ac8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   84ac8:	defffe04 	addi	sp,sp,-8
   84acc:	dfc00115 	stw	ra,4(sp)
   84ad0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84ad4:	20000d16 	blt	r4,zero,84b0c <lseek+0x44>
   84ad8:	20c00324 	muli	r3,r4,12
   84adc:	00800234 	movhi	r2,8
   84ae0:	109a4b04 	addi	r2,r2,26924
   84ae4:	1887883a 	add	r3,r3,r2
  
  if (fd) 
   84ae8:	18001226 	beq	r3,zero,84b34 <lseek+0x6c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   84aec:	18800017 	ldw	r2,0(r3)
   84af0:	10800717 	ldw	r2,28(r2)
   84af4:	10001126 	beq	r2,zero,84b3c <lseek+0x74>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   84af8:	1809883a 	mov	r4,r3
   84afc:	103ee83a 	callr	r2
   84b00:	1021883a 	mov	r16,r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
   84b04:	10000f0e 	bge	r2,zero,84b44 <lseek+0x7c>
   84b08:	00000106 	br	84b10 <lseek+0x48>
      rc = -ENOTSUP;
    }
  }
  else  
  {
    rc = -EBADFD;
   84b0c:	043febc4 	movi	r16,-81
   84b10:	d0a00717 	ldw	r2,-32740(gp)
   84b14:	10000226 	beq	r2,zero,84b20 <lseek+0x58>
   84b18:	103ee83a 	callr	r2
   84b1c:	00000106 	br	84b24 <lseek+0x5c>
   84b20:	d0a8e904 	addi	r2,gp,-23644
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
   84b24:	0421c83a 	sub	r16,zero,r16
   84b28:	14000015 	stw	r16,0(r2)
    rc = -1;
   84b2c:	043fffc4 	movi	r16,-1
  }

  return rc;
   84b30:	00000406 	br	84b44 <lseek+0x7c>
      rc = -ENOTSUP;
    }
  }
  else  
  {
    rc = -EBADFD;
   84b34:	043febc4 	movi	r16,-81
   84b38:	003ff506 	br	84b10 <lseek+0x48>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   84b3c:	043fde84 	movi	r16,-134
   84b40:	003ff306 	br	84b10 <lseek+0x48>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
   84b44:	8005883a 	mov	r2,r16
   84b48:	dfc00117 	ldw	ra,4(sp)
   84b4c:	dc000017 	ldw	r16,0(sp)
   84b50:	dec00204 	addi	sp,sp,8
   84b54:	f800283a 	ret

00084b58 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   84b58:	f800283a 	ret

00084b5c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   84b5c:	f800283a 	ret

00084b60 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   84b60:	defffe04 	addi	sp,sp,-8
   84b64:	dfc00115 	stw	ra,4(sp)
   84b68:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84b6c:	20002616 	blt	r4,zero,84c08 <read+0xa8>
   84b70:	21c00324 	muli	r7,r4,12
   84b74:	00800234 	movhi	r2,8
   84b78:	109a4b04 	addi	r2,r2,26924
   84b7c:	388f883a 	add	r7,r7,r2
  
  if (fd)
   84b80:	38002126 	beq	r7,zero,84c08 <read+0xa8>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   84b84:	20800324 	muli	r2,r4,12
   84b88:	00c00234 	movhi	r3,8
   84b8c:	18da4d04 	addi	r3,r3,26932
   84b90:	10c5883a 	add	r2,r2,r3
   84b94:	10800017 	ldw	r2,0(r2)
   84b98:	108000cc 	andi	r2,r2,3
   84b9c:	00c00044 	movi	r3,1
   84ba0:	10c01026 	beq	r2,r3,84be4 <read+0x84>
        (fd->dev->read))
   84ba4:	38800017 	ldw	r2,0(r7)
   84ba8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   84bac:	10000d26 	beq	r2,zero,84be4 <read+0x84>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   84bb0:	3809883a 	mov	r4,r7
   84bb4:	103ee83a 	callr	r2
   84bb8:	1021883a 	mov	r16,r2
   84bbc:	10001a0e 	bge	r2,zero,84c28 <read+0xc8>
   84bc0:	d0a00717 	ldw	r2,-32740(gp)
   84bc4:	10000226 	beq	r2,zero,84bd0 <read+0x70>
   84bc8:	103ee83a 	callr	r2
   84bcc:	00000106 	br	84bd4 <read+0x74>
   84bd0:	d0a8e904 	addi	r2,gp,-23644
        {
          ALT_ERRNO = -rval;
   84bd4:	0421c83a 	sub	r16,zero,r16
   84bd8:	14000015 	stw	r16,0(r2)
          return -1;
   84bdc:	00bfffc4 	movi	r2,-1
   84be0:	00001106 	br	84c28 <read+0xc8>
   84be4:	d0a00717 	ldw	r2,-32740(gp)
   84be8:	10000226 	beq	r2,zero,84bf4 <read+0x94>
   84bec:	103ee83a 	callr	r2
   84bf0:	00000106 	br	84bf8 <read+0x98>
   84bf4:	d0a8e904 	addi	r2,gp,-23644
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
   84bf8:	00c00344 	movi	r3,13
   84bfc:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   84c00:	00bfffc4 	movi	r2,-1
   84c04:	00000806 	br	84c28 <read+0xc8>
   84c08:	d0a00717 	ldw	r2,-32740(gp)
   84c0c:	10000226 	beq	r2,zero,84c18 <read+0xb8>
   84c10:	103ee83a 	callr	r2
   84c14:	00000106 	br	84c1c <read+0xbc>
   84c18:	d0a8e904 	addi	r2,gp,-23644
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   84c1c:	00c01444 	movi	r3,81
   84c20:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   84c24:	00bfffc4 	movi	r2,-1
}
   84c28:	dfc00117 	ldw	ra,4(sp)
   84c2c:	dc000017 	ldw	r16,0(sp)
   84c30:	dec00204 	addi	sp,sp,8
   84c34:	f800283a 	ret

00084c38 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84c38:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84c3c:	00bfff84 	movi	r2,-2
   84c40:	2884703a 	and	r2,r5,r2
   84c44:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   84c48:	d0a00f17 	ldw	r2,-32708(gp)
   84c4c:	108000c4 	addi	r2,r2,3
   84c50:	00ffff04 	movi	r3,-4
   84c54:	10c4703a 	and	r2,r2,r3
   84c58:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   84c5c:	1109883a 	add	r4,r2,r4
   84c60:	00c00374 	movhi	r3,13
   84c64:	18ec0004 	addi	r3,r3,-20480
   84c68:	1900032e 	bgeu	r3,r4,84c78 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84c6c:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   84c70:	00bfffc4 	movi	r2,-1
   84c74:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   84c78:	d1200f15 	stw	r4,-32708(gp)
   84c7c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   84c80:	f800283a 	ret

00084c84 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   84c84:	defffe04 	addi	sp,sp,-8
   84c88:	dfc00115 	stw	ra,4(sp)
   84c8c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84c90:	20002516 	blt	r4,zero,84d28 <write+0xa4>
   84c94:	21c00324 	muli	r7,r4,12
   84c98:	00800234 	movhi	r2,8
   84c9c:	109a4b04 	addi	r2,r2,26924
   84ca0:	388f883a 	add	r7,r7,r2
  
  if (fd)
   84ca4:	38002026 	beq	r7,zero,84d28 <write+0xa4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   84ca8:	20800324 	muli	r2,r4,12
   84cac:	00c00234 	movhi	r3,8
   84cb0:	18da4d04 	addi	r3,r3,26932
   84cb4:	10c5883a 	add	r2,r2,r3
   84cb8:	10800017 	ldw	r2,0(r2)
   84cbc:	108000cc 	andi	r2,r2,3
   84cc0:	10001026 	beq	r2,zero,84d04 <write+0x80>
   84cc4:	38800017 	ldw	r2,0(r7)
   84cc8:	10800617 	ldw	r2,24(r2)
   84ccc:	10000d26 	beq	r2,zero,84d04 <write+0x80>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   84cd0:	3809883a 	mov	r4,r7
   84cd4:	103ee83a 	callr	r2
   84cd8:	1021883a 	mov	r16,r2
   84cdc:	10001a0e 	bge	r2,zero,84d48 <write+0xc4>
   84ce0:	d0a00717 	ldw	r2,-32740(gp)
   84ce4:	10000226 	beq	r2,zero,84cf0 <write+0x6c>
   84ce8:	103ee83a 	callr	r2
   84cec:	00000106 	br	84cf4 <write+0x70>
   84cf0:	d0a8e904 	addi	r2,gp,-23644
      {
        ALT_ERRNO = -rval;
   84cf4:	0421c83a 	sub	r16,zero,r16
   84cf8:	14000015 	stw	r16,0(r2)
        return -1;
   84cfc:	00bfffc4 	movi	r2,-1
   84d00:	00001106 	br	84d48 <write+0xc4>
   84d04:	d0a00717 	ldw	r2,-32740(gp)
   84d08:	10000226 	beq	r2,zero,84d14 <write+0x90>
   84d0c:	103ee83a 	callr	r2
   84d10:	00000106 	br	84d18 <write+0x94>
   84d14:	d0a8e904 	addi	r2,gp,-23644
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
   84d18:	00c00344 	movi	r3,13
   84d1c:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   84d20:	00bfffc4 	movi	r2,-1
   84d24:	00000806 	br	84d48 <write+0xc4>
   84d28:	d0a00717 	ldw	r2,-32740(gp)
   84d2c:	10000226 	beq	r2,zero,84d38 <write+0xb4>
   84d30:	103ee83a 	callr	r2
   84d34:	00000106 	br	84d3c <write+0xb8>
   84d38:	d0a8e904 	addi	r2,gp,-23644
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   84d3c:	00c01444 	movi	r3,81
   84d40:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   84d44:	00bfffc4 	movi	r2,-1
}
   84d48:	dfc00117 	ldw	ra,4(sp)
   84d4c:	dc000017 	ldw	r16,0(sp)
   84d50:	dec00204 	addi	sp,sp,8
   84d54:	f800283a 	ret
